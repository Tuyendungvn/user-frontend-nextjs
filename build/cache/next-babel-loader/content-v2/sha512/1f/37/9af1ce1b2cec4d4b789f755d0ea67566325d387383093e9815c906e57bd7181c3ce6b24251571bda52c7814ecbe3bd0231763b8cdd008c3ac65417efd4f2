{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState } from \"react\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport { useAsync } from \"react-async-hook\";\nimport useConstant from \"use-constant\"; // Generic reusable hook\n\nexport var useDebouncedSearch = function useDebouncedSearch(searchFunction) {\n  var timeDebounced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n\n  // Handle the input text state\n  var _useState = useState(\"\"),\n      inputText = _useState[0],\n      setInputText = _useState[1]; // Debounce the original search async function\n\n\n  var debouncedSearchFunction = useConstant(function () {\n    return AwesomeDebouncePromise(searchFunction, timeDebounced);\n  }); // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n\n  var searchResults = useAsync( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(inputText.length < 2)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 4:\n            return _context.abrupt(\"return\", debouncedSearchFunction(inputText));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [debouncedSearchFunction, inputText]); // Return everything needed for the hook consumer\n\n  return {\n    inputText: inputText,\n    setInputText: setInputText,\n    searchResults: searchResults\n  };\n};","map":null,"metadata":{},"sourceType":"module"}