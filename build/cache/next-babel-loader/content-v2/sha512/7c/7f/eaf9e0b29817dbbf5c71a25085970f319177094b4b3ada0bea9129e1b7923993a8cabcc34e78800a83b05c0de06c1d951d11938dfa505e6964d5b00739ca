{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport { useTranslation } from \"next-i18next\";\nimport { Transition } from \"@headlessui/react\";\nimport { formatParams } from \"@common/functions\";\nimport { useDebouncedSearch } from \"@common/hooks/useDebounced\";\nimport AutoComplete from \"@designs/AutoComplete\";\nimport { SVG } from \"@designs/SVG\";\nimport { Button, Dropdown, DropdownItem, Form, Input, ListBoxItem, ListBoxMenu, SearchBoxContainer, SearchIcon, TextField } from \"./styles\";\n\nconst SearchBox = props => {\n  const {\n    className = \"\",\n    onFetchData,\n    onSelect,\n    renderDropdownItem,\n    onSubmit,\n    value = \"\"\n  } = props;\n  const {\n    t\n  } = useTranslation([\"common\"]);\n  const fullQuery = useRouter().query || {};\n  const {\n    p: _province\n  } = fullQuery;\n  const queryProvince = formatParams(decodeURIComponent(_province || \"\"));\n  const {\n    inputText,\n    setInputText,\n    searchResults\n  } = useDebouncedSearch(onFetchData);\n  const {\n    provinces\n  } = useSelector(state => state.location);\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]);\n  const {\n    0: isOpenDropdown,\n    1: setIsOpenDropdown\n  } = useState(false);\n  const {\n    0: itemIndexActive,\n    1: setItemIndexActive\n  } = useState(-1);\n  const {\n    0: provinceSelected,\n    1: setProvinceSelected\n  } = useState({});\n  const {\n    0: listProvince,\n    1: setListProvince\n  } = useState([]);\n  useEffect(() => {\n    if (value) {\n      setInputText(value);\n    } else {\n      setInputText(\"\");\n    }\n  }, [value]);\n  useEffect(() => {\n    if (searchResults !== null && searchResults !== void 0 && searchResults.result) {\n      setSuggestions(searchResults.result || []);\n      setItemIndexActive(-1);\n    }\n  }, [searchResults === null || searchResults === void 0 ? void 0 : searchResults.result]);\n  useEffect(() => {\n    addOptionToProvince();\n  }, [provinces]);\n  useEffect(() => {\n    if (queryProvince) {\n      const provinceSelected = listProvince.find(item => (item === null || item === void 0 ? void 0 : item.slug) === queryProvince);\n      setProvinceSelected(provinceSelected);\n    } else {\n      setProvinceSelected(listProvince[0]);\n    }\n  }, [listProvince, fullQuery]);\n\n  const handleSubmit = e => {\n    if (itemIndexActive >= 0) {\n      onSelect(suggestions[itemIndexActive]);\n    }\n\n    onSubmit && onSubmit(inputText, provinceSelected === null || provinceSelected === void 0 ? void 0 : provinceSelected.slug);\n    e.preventDefault();\n    setIsOpenDropdown(false);\n  };\n\n  const handleChange = e => {\n    // onChange && onChange(value);\n    setInputText(e.target.value || \"\");\n  };\n\n  const handleKeydown = e => {\n    switch (e.key) {\n      case \"ArrowDown\":\n        {\n          if (itemIndexActive < (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) - 1) setItemIndexActive(prev => prev + 1);\n          break;\n        }\n\n      case \"ArrowUp\":\n        {\n          if (itemIndexActive > 0) setItemIndexActive(prev => prev - 1);\n          break;\n        }\n    }\n  };\n\n  const handleSelectProvince = option => {\n    setProvinceSelected(option);\n    onSubmit && onSubmit(inputText, option === null || option === void 0 ? void 0 : option.slug);\n  };\n\n  const addOptionToProvince = () => {\n    let draftArray = [...provinces];\n    const allProvince = {\n      name: t(\"filter-all-location\")\n    };\n    draftArray.unshift(allProvince);\n    setListProvince(draftArray);\n  };\n\n  const handleFocus = () => {\n    if ((suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) > 0) {\n      setIsOpenDropdown(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(SearchBoxContainer, {\n    className: className,\n    children: /*#__PURE__*/_jsxs(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxs(TextField, {\n        children: [/*#__PURE__*/_jsx(SearchIcon, {\n          className: \"text-black\"\n        }), /*#__PURE__*/_jsx(Input, {\n          placeholder: t(\"search-company-placeholder\"),\n          onChange: handleChange,\n          onFocus: handleFocus,\n          value: inputText,\n          onBlur: () => setIsOpenDropdown(false),\n          onKeyDown: handleKeydown\n        }), /*#__PURE__*/_jsx(Transition, {\n          show: isOpenDropdown,\n          as: Fragment,\n          enter: \"transition ease-out duration-100\",\n          enterFrom: \"transform opacity-0 \",\n          enterTo: \"transform opacity-100 \",\n          leave: \"transition ease-in duration-75\",\n          leaveFrom: \"transform opacity-100 \",\n          leaveTo: \"transform opacity-0\",\n          children: /*#__PURE__*/_jsx(Dropdown, {\n            children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsx(DropdownItem, {\n              active: index === itemIndexActive,\n              onMouseEnter: () => setItemIndexActive(index),\n              onMouseLeave: () => setItemIndexActive(-1),\n              children: renderDropdownItem(suggestion)\n            }, index))\n          })\n        })]\n      }), /*#__PURE__*/_jsx(AutoComplete, {\n        className: \"w-full laptop:w-26.5\",\n        MenuButton: /*#__PURE__*/_jsxs(ListBoxMenu, {\n          children: [/*#__PURE__*/_jsx(SVG, {\n            name: \"common/location\",\n            width: \"24\",\n            height: \"24\"\n          }), provinceSelected === null || provinceSelected === void 0 ? void 0 : provinceSelected.name]\n        }),\n        fieldToSearch: [\"name\", \"nameEn\"],\n        onChange: handleSelectProvince,\n        optionSelected: provinceSelected,\n        options: listProvince,\n        renderItem: option => /*#__PURE__*/_jsx(ListBoxItem, {\n          children: option === null || option === void 0 ? void 0 : option.name\n        })\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsx(\"p\", {\n          className: \"hidden phone:block\",\n          children: t(\"search-box.search\")\n        })\n      })]\n    })\n  });\n};\n\nexport default SearchBox;","map":null,"metadata":{},"sourceType":"module"}