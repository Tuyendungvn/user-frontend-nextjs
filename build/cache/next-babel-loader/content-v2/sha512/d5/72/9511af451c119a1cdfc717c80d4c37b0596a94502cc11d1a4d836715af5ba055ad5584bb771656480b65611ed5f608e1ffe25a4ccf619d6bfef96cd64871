{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"next-i18next\";\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Dialog from \"@components/Dialog\";\nimport Button from \"@designs/Button\";\nimport TextArea from \"@designs/TextArea\";\nimport { updateRecord, createRecord } from \"@redux/actions/record\";\nimport { ButtonWrapper, Container, DialogButton, Title, Wrapper, Form } from \"./styles\";\n\nconst GeneralInfoDialog = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    content,\n    recordId,\n    userId\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const initialValues = {\n    describe: content\n  };\n\n  const handleSubmit = values => {\n    if (!recordId && !!userId) {\n      const payload = {\n        recordCreateInput: {\n          user: userId,\n          description: values.describe\n        }\n      };\n      dispatch(createRecord(payload));\n    }\n\n    if (!!recordId && !!userId) {\n      const payload = {\n        id: recordId,\n        recordUpdateInput: {\n          description: values.describe\n        }\n      };\n      dispatch(updateRecord(payload));\n    }\n\n    handleCloseDialog();\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.about.add-describe\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          onSubmit: handleSubmit,\n          children: formik => /*#__PURE__*/_jsxs(Form, {\n            children: [/*#__PURE__*/_jsx(TextArea, _objectSpread(_objectSpread({\n              label: t(\"personal-info.about.describe-yourself\"),\n              placeholder: t(\"personal-info.about.describe-yourself-placeholder\"),\n              type: \"text\",\n              rows: 6\n            }, formik.getFieldProps(\"describe\")), formik.getFieldMeta(\"describe\"))), /*#__PURE__*/_jsxs(ButtonWrapper, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                type: \"button\",\n                onClick: handleCloseDialog,\n                className: \"w-1/2 border border-solid border-primary\",\n                children: t(\"common:dialog.cancel\")\n              }), /*#__PURE__*/_jsx(Button, {\n                loading: isLoading,\n                primary: true,\n                type: \"submit\",\n                className: \"w-1/2\",\n                children: !isLoading && t(\"common:dialog.save\")\n              })]\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default GeneralInfoDialog;","map":null,"metadata":{},"sourceType":"module"}