{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useTranslation } from \"next-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useAuth from \"@common/hooks/useAuth\";\nimport { setOpenNotification } from \"@redux/actions/common\";\nimport { PATH } from \"@routes\";\nimport Notify from \"./Notify\";\nimport { ContentContainer, Header, Icon, CloseIcon, Title, Login, Empty, NotifyContainer } from \"./styles\";\nimport { useEffect, useState } from \"react\";\n\nconst Content = () => {\n  const {\n    isAuth\n  } = useAuth();\n  const {\n    t\n  } = useTranslation([\"common\"]);\n  const {\n    notifications: {\n      loading = true,\n      getNotifyByUser: result = []\n    },\n    notificationsSettingByUser: {\n      loading: loadingSetting = false,\n      results: notifySetting = []\n    }\n  } = useSelector(state => state.notifications);\n  const {\n    isOpenNotification\n  } = useSelector(state => state.actions);\n  const dispatch = useDispatch();\n  const {\n    0: allNotify,\n    1: setAllNotify\n  } = useState([]);\n  useEffect(() => {\n    if (notifySetting.length > 0 && result.length > 0) {\n      const notifyList = [];\n      notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.map(setting => {\n        const notify = {\n          company: {\n            name: t(\"header.admin\")\n          },\n          createdAt: setting.createdAt,\n          name: setting.name,\n          description: setting.description\n        };\n        notifyList.push(notify);\n      });\n      setAllNotify(state => [...result, ...notifyList]);\n    } else if (result.length > 0 && (notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.length) === 0) {\n      setAllNotify(result);\n    } else {\n      setAllNotify(notifySetting);\n    }\n  }, [result, notifySetting]);\n\n  const handleClose = () => {\n    dispatch(setOpenNotification(false));\n  };\n\n  const arrReverse = [...allNotify];\n  arrReverse === null || arrReverse === void 0 ? void 0 : arrReverse.sort((value1, value2) => {\n    const date1 = new Date(value1.createdAt);\n    const date2 = new Date(value2.createdAt);\n    return date2 - date1;\n  });\n  return /*#__PURE__*/_jsxs(ContentContainer, {\n    className: `transform ${isOpenNotification ? `translate-x-0` : `translate-x-full`}`,\n    children: [/*#__PURE__*/_jsxs(Header, {\n      children: [/*#__PURE__*/_jsx(Icon, {\n        name: \"common/menu/bell-icon\",\n        width: 80,\n        height: 80\n      }), /*#__PURE__*/_jsx(Title, {\n        children: t(\"header.career-notification\")\n      }), /*#__PURE__*/_jsx(CloseIcon, {\n        onClick: handleClose,\n        name: \"common/close\",\n        width: 24,\n        height: 24\n      })]\n    }), isAuth ? /*#__PURE__*/_jsx(NotifyContainer, {\n      children: !loading && !loadingSetting && (arrReverse === null || arrReverse === void 0 ? void 0 : arrReverse.length) > 0 ? arrReverse === null || arrReverse === void 0 ? void 0 : arrReverse.map(notify => /*#__PURE__*/_jsx(Notify, {\n        notification: notify\n      })) : /*#__PURE__*/_jsx(Empty, {\n        children: t(\"header.empty-notify\")\n      })\n    }) : /*#__PURE__*/_jsxs(Login.Wrapper, {\n      children: [/*#__PURE__*/_jsx(Login.Title, {\n        children: t(\"header.login-notification\")\n      }), /*#__PURE__*/_jsx(Login.Button, {\n        routeName: PATH.LOGIN,\n        className: \"transform hover:scale-105\",\n        children: t(\"header.login\")\n      })]\n    })]\n  });\n};\n\nexport default Content;","map":null,"metadata":{},"sourceType":"module"}