{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"next-i18next\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport EditDesiredJobForm from \"./components/Form\";\nimport { getAllCategoryLevel1, getAllCategoryLevel2 } from \"@redux/actions/category\";\nimport { updateRecord, createRecord } from \"@redux/actions/record\";\nimport { Container, DialogButton, Title, Wrapper } from \"./styles\";\n\nvar EditDesiredJob = function EditDesiredJob(props) {\n  var _useTranslation = useTranslation([\"job-management\", \"common\"]),\n      t = _useTranslation.t;\n\n  var ButtonMenu = props.ButtonMenu,\n      className = props.className,\n      benefitList = props.benefitList,\n      benefitsWanted = props.benefitsWanted,\n      recordId = props.recordId,\n      userId = props.userId,\n      allJobLevel = props.allJobLevel,\n      careers = props.careers,\n      level = props.level,\n      _props$salary = props.salary,\n      salary = _props$salary === void 0 ? \"0\" : _props$salary,\n      workLocation = props.workLocation;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.location;\n  }),\n      provinces = _useSelector.provinces;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.category;\n  }),\n      _useSelector2$categor = _useSelector2.categoryLevel2,\n      _useSelector2$categor2 = _useSelector2$categor.results,\n      categoryLevel2 = _useSelector2$categor2 === void 0 ? [] : _useSelector2$categor2,\n      _useSelector2$categor3 = _useSelector2$categor.totalCount,\n      totalCount = _useSelector2$categor3 === void 0 ? 0 : _useSelector2$categor3,\n      _useSelector2$categor4 = _useSelector2.categoryLevel1.results,\n      categoryLevel1 = _useSelector2$categor4 === void 0 ? [] : _useSelector2$categor4;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.actions;\n  }),\n      isLoading = _useSelector3.isLoading;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(benefitList),\n      benefits = _useState2[0],\n      setBenefits = _useState2[1];\n\n  var _useState3 = useState([]),\n      allCareers = _useState3[0],\n      setAllCareers = _useState3[1];\n\n  var _useState4 = useState(0),\n      page = _useState4[0],\n      setPage = _useState4[1];\n\n  var defaultWorkLocationValue = function defaultWorkLocationValue() {\n    return !!(workLocation !== null && workLocation !== void 0 && workLocation.name) && {\n      name: workLocation.name,\n      _id: workLocation._id,\n      code: workLocation.code\n    };\n  };\n\n  var defaultJobDesiredValue = function defaultJobDesiredValue() {\n    return !!careers && careers.map(function (career) {\n      return {\n        name: career.name,\n        _id: career._id\n      };\n    });\n  };\n\n  var defaultLevelValue = function defaultLevelValue() {\n    return !!level && {\n      name: level,\n      _id: level\n    };\n  };\n\n  var initialValues = {\n    workLocation: defaultWorkLocationValue(),\n    jobDesired: defaultJobDesiredValue(),\n    levelDesired: defaultLevelValue(),\n    salaryDesired: !!salary ? Number(salary) : \"\"\n  };\n  var validationSchema = Yup.object({\n    workLocation: Yup.object().required(t(\"personal-info.desired-job.work-location-validation\")).nullable(),\n    levelDesired: Yup.object().required(t(\"personal-info.desired-job.desired-level-validation\")).nullable(),\n    salaryDesired: Yup.number().required(t(\"personal-info.desired-job.salary-validation\"))\n  });\n  useEffect(function () {\n    if ((allCareers === null || allCareers === void 0 ? void 0 : allCareers.length) < totalCount) {\n      var newPage = page + 1;\n      setPage(newPage);\n      getAllCategoryLv2API(newPage);\n    }\n  }, [allCareers]);\n  useEffect(function () {\n    if ((categoryLevel2 === null || categoryLevel2 === void 0 ? void 0 : categoryLevel2.length) > 0) {\n      setAllCareers([].concat(_toConsumableArray(allCareers), _toConsumableArray(categoryLevel2)));\n    }\n  }, [categoryLevel2]);\n  useEffect(function () {\n    dispatch(getAllCategoryLevel1({}));\n    getAllCategoryLv2API(0);\n  }, []);\n  useEffect(function () {\n    setBenefits(benefitList);\n  }, [benefitList]);\n  useEffect(function () {\n    if (!!benefits && benefits.length > 0 && !!benefitsWanted && !!open) {\n      setBenefits(function (state) {\n        var newState = _toConsumableArray(state);\n\n        benefitsWanted === null || benefitsWanted === void 0 ? void 0 : benefitsWanted.forEach(function (benefitWanted) {\n          var _state$index, _state$index2, _state$index3, _state$index4;\n\n          var index = state.findIndex(function (benefit) {\n            return benefit._id === benefitWanted._id;\n          });\n          newState[index] = {\n            _id: (_state$index = state[index]) === null || _state$index === void 0 ? void 0 : _state$index._id,\n            description: (_state$index2 = state[index]) === null || _state$index2 === void 0 ? void 0 : _state$index2.description,\n            enabled: true,\n            icon: (_state$index3 = state[index]) === null || _state$index3 === void 0 ? void 0 : _state$index3.icon,\n            name: (_state$index4 = state[index]) === null || _state$index4 === void 0 ? void 0 : _state$index4.name\n          };\n        });\n        return newState;\n      });\n    }\n  }, [open, benefitsWanted]);\n\n  var getAllCategoryLv2API = function getAllCategoryLv2API(page) {\n    dispatch(getAllCategoryLevel2({\n      page: page,\n      size: 50\n    }));\n  };\n\n  var onSelected = function onSelected(type, formik) {\n    return function (value) {\n      return formik.setFieldValue(type, value);\n    };\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    var benefitsWanted = benefits.filter(function (benefit) {\n      return benefit.enabled === true;\n    }).map(function (benefit) {\n      return benefit._id;\n    });\n    var career = values.jobDesired.map(function (item) {\n      return item._id;\n    });\n\n    if (!recordId && !!userId) {\n      var _values$workLocation, _values$levelDesired;\n\n      var payload = {\n        recordCreateInput: {\n          user: userId,\n          benefitsWanted: benefitsWanted,\n          career: career,\n          workPlace: (_values$workLocation = values.workLocation) === null || _values$workLocation === void 0 ? void 0 : _values$workLocation._id,\n          salaryWanted: values.salaryDesired,\n          jobLevelWanted: (_values$levelDesired = values.levelDesired) === null || _values$levelDesired === void 0 ? void 0 : _values$levelDesired.name\n        }\n      };\n      dispatch(createRecord(payload));\n    }\n\n    if (!!recordId && !!userId) {\n      var _values$workLocation2, _values$levelDesired2;\n\n      var _payload = {\n        id: recordId,\n        recordUpdateInput: {\n          benefitsWanted: benefitsWanted,\n          career: career,\n          workPlace: (_values$workLocation2 = values.workLocation) === null || _values$workLocation2 === void 0 ? void 0 : _values$workLocation2._id,\n          salaryWanted: values.salaryDesired,\n          jobLevelWanted: (_values$levelDesired2 = values.levelDesired) === null || _values$levelDesired2 === void 0 ? void 0 : _values$levelDesired2.name\n        }\n      };\n      dispatch(updateRecord(_payload));\n    }\n\n    setOpen(false);\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpen(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpen(true);\n  };\n\n  var handleSelectBenefits = function handleSelectBenefits(id) {\n    setBenefits(function (state) {\n      var index = state.findIndex(function (benefit) {\n        return benefit._id === id;\n      });\n\n      var newState = _toConsumableArray(state);\n\n      var enabledList = newState.filter(function (benefit) {\n        return benefit.enabled === true;\n      });\n\n      if (enabledList.length < 5 || newState[index].enabled === true) {\n        newState[index] = {\n          _id: newState[index]._id,\n          description: newState[index].description,\n          enabled: !newState[index].enabled,\n          icon: newState[index].icon,\n          name: newState[index].name\n        };\n      }\n\n      return newState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.desired-job.edit-desired-job\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          onSubmit: handleSubmit,\n          validationSchema: validationSchema,\n          children: function children(formik) {\n            return /*#__PURE__*/_jsx(EditDesiredJobForm, {\n              allJobLevel: allJobLevel,\n              benefits: benefits,\n              categoryLevel1: categoryLevel1,\n              categoryLevel2: allCareers,\n              formik: formik,\n              handleCloseDialog: handleCloseDialog,\n              handleSelectBenefits: handleSelectBenefits,\n              initialValues: initialValues,\n              isLoading: isLoading,\n              onSelected: onSelected,\n              provinces: provinces\n            });\n          }\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditDesiredJob;","map":null,"metadata":{},"sourceType":"module"}