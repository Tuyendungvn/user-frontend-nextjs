{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { SVG } from \"@designs/SVG\";\nimport { Container, TextArea as TextAreaStyled, Label, Required, Error } from \"./styles\";\n\nconst TextArea = props => {\n  const {\n    className = \"\",\n    classNameInput = \"\",\n    error,\n    ref,\n    rows = 4,\n    onChangeValue,\n    onChange,\n    label = \"\",\n    required,\n    touched,\n    placeholder\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"className\", \"classNameInput\", \"error\", \"ref\", \"rows\", \"onChangeValue\", \"onChange\", \"label\", \"required\", \"touched\", \"placeholder\"]);\n\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  useEffect(() => {\n    if (touched && error) {\n      !isError && setIsError(true);\n    } else {\n      isError && setIsError(false);\n    }\n  }, [touched, error]);\n\n  const handleChange = e => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(e);\n    const currentValue = e.target.value || \"\";\n    const containValue = currentValue.split(\"\\n\").join(\"<br>\");\n    onChangeValue && onChangeValue(containValue);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [label && /*#__PURE__*/_jsxs(Label, {\n      children: [label, required && /*#__PURE__*/_jsx(Required, {\n        children: \"(*)\"\n      })]\n    }), /*#__PURE__*/_jsx(TextAreaStyled, _objectSpread({\n      className: classNameInput,\n      error: isError,\n      rows: rows,\n      ref: ref,\n      onChange: handleChange,\n      placeholder: placeholder\n    }, restProps)), error && touched && /*#__PURE__*/_jsxs(Error, {\n      children: [/*#__PURE__*/_jsx(SVG, {\n        name: \"common/error\",\n        width: 16,\n        height: 16,\n        className: \"mr-0.5 inline-block\"\n      }), error]\n    })]\n  });\n};\n\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}