{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useTranslation } from \"next-i18next\";\nimport { paths } from \"@routes/index\";\nimport path from \"path\";\nimport { useEffect, useRef } from \"react\";\n\nconst Link = props => {\n  var _currentPath$locale;\n\n  const {\n    i18n\n  } = useTranslation();\n  const currentLanguage = i18n.language;\n  const {\n    routeName,\n    disableShadow = false,\n    locale = currentLanguage,\n    children,\n    className = \"\",\n    query = {},\n    params = {}\n  } = props;\n  const linkRef = useRef(null);\n  const currentPath = paths.find(item => item.name === routeName);\n\n  if (!currentPath) {\n    console.error(`[Link Error] Don't find any route which has name is \"${routeName}\"`);\n  }\n\n  let href = path.join(`/${currentPath === null || currentPath === void 0 ? void 0 : (_currentPath$locale = currentPath.locale) === null || _currentPath$locale === void 0 ? void 0 : _currentPath$locale[locale]}`);\n\n  if (Object.keys(params).length) {\n    for (const key in params) {\n      const value = params[key];\n      href = href.replace(`/:${key}`, `/${value}`);\n    }\n  } // incase we replace all params but it still has /:abc in url,\n  // replace it by -.\n\n\n  href = href.replace(/(\\/:)\\w+/g, \"/-\");\n\n  if (Object.keys(query).length) {\n    const queryString = renderQueryStringFromObject(query);\n    href += `?${queryString}`;\n  }\n\n  useEffect(() => {\n    if (href) {\n      linkRef.current.href = href;\n    }\n  }, [href]);\n  return /*#__PURE__*/_jsx(\"a\", {\n    ref: linkRef,\n    href: href,\n    className: `block cursor-pointer ${className}`,\n    children: children\n  });\n};\n\nexport default Link;\n\nconst renderQueryStringFromObject = query => {\n  var _URLSearchParams;\n\n  return (_URLSearchParams = new URLSearchParams(query)) === null || _URLSearchParams === void 0 ? void 0 : _URLSearchParams.toString();\n};","map":null,"metadata":{},"sourceType":"module"}