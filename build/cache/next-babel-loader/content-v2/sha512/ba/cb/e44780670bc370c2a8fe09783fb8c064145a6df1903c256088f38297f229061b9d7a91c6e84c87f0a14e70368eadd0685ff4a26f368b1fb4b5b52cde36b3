{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport { renderLocation } from \"@common/functions\";\nimport { getUserCookies } from \"@common/utils/auth\";\nimport { getUserProfile } from \"@redux/actions/user\";\nimport { setSubscribeCompany } from \"@redux/actions/company\";\nimport { resetAction } from \"@redux/actions/common\";\nimport { PATH } from \"@routes\";\nimport { SVG } from \"@designs/SVG\";\nimport { Career, Container, Content, Heart, HeartCount, Img, InfoWrapper, Link, Location, Logo, Title, TextWrapper } from \"./styles\";\nconst skeletonImage = \"/img/skeleton/default-small.jpg\";\n\nconst CompanyItem = props => {\n  const {\n    company,\n    className = \"\"\n  } = props;\n  const {\n    logo,\n    name,\n    career,\n    subscribe,\n    slug,\n    province,\n    _id\n  } = company;\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.user);\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    actionSuccess\n  } = useSelector(state => state.actions);\n  const {\n    0: isSubscribe,\n    1: setIsSubscribe\n  } = useState(false);\n  const {\n    0: countHeart,\n    1: setCountHeart\n  } = useState(subscribe);\n  const userInfo = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userInfo) || {};\n  const careerArray = career === null || career === void 0 ? void 0 : career.map(item => item === null || item === void 0 ? void 0 : item.name);\n  const careerString = renderLocation(careerArray);\n  const locationArray = province === null || province === void 0 ? void 0 : province.map(item => item === null || item === void 0 ? void 0 : item.name);\n  const locationString = renderLocation(locationArray);\n  useEffect(() => {\n    getUserProfileAPI();\n  }, []);\n  useEffect(() => {\n    checkSubscribed();\n  }, [user]);\n  useEffect(() => {\n    if (actionSuccess) {\n      dispatch(resetAction());\n      getUserProfileAPI();\n      checkSubscribed();\n    }\n  }, [actionSuccess]);\n\n  const handleSubscribe = () => {\n    if (isEmpty(userInfo)) return;\n    setSubscribeCompanyAPI(user === null || user === void 0 ? void 0 : user._id, _id);\n    setCountHeart(subscribe + 1);\n  };\n\n  const setSubscribeCompanyAPI = (userId, companyId) => {\n    const payload = {\n      userId: userId,\n      companyId: companyId\n    };\n    dispatch(setSubscribeCompany(payload));\n  };\n\n  const getUserProfileAPI = () => {\n    var _getUserCookies, _getUserCookies$userI;\n\n    const payload = {\n      id: (_getUserCookies = getUserCookies()) === null || _getUserCookies === void 0 ? void 0 : (_getUserCookies$userI = _getUserCookies.userInfo) === null || _getUserCookies$userI === void 0 ? void 0 : _getUserCookies$userI._id\n    };\n    dispatch(getUserProfile(payload));\n  };\n\n  const checkSubscribed = () => {\n    var _user$subscribedCompa;\n\n    const listSubscribedId = user === null || user === void 0 ? void 0 : (_user$subscribedCompa = user.subscribedCompany) === null || _user$subscribedCompa === void 0 ? void 0 : _user$subscribedCompa.map(item => item === null || item === void 0 ? void 0 : item._id);\n\n    if (listSubscribedId !== null && listSubscribedId !== void 0 && listSubscribedId.includes(_id)) {\n      setIsSubscribe(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(Logo, {\n      children: /*#__PURE__*/_jsx(Img, {\n        src: (logo === null || logo === void 0 ? void 0 : logo.small) || (logo === null || logo === void 0 ? void 0 : logo.default) || (logo === null || logo === void 0 ? void 0 : logo.medium) || skeletonImage,\n        alt: name,\n        loading: \"lazy\"\n      })\n    }), /*#__PURE__*/_jsxs(Content, {\n      children: [/*#__PURE__*/_jsx(Link, {\n        routeName: PATH.COMPANY_DETAIL,\n        params: {\n          slug: slug\n        },\n        children: /*#__PURE__*/_jsx(Title, {\n          children: name\n        })\n      }), /*#__PURE__*/_jsxs(InfoWrapper, {\n        children: [/*#__PURE__*/_jsxs(TextWrapper, {\n          children: [(career === null || career === void 0 ? void 0 : career.length) > 0 && /*#__PURE__*/_jsx(Career, {\n            children: careerString\n          }), (province === null || province === void 0 ? void 0 : province.length) > 0 && /*#__PURE__*/_jsx(Location, {\n            children: locationString\n          })]\n        }), /*#__PURE__*/_jsxs(Heart, {\n          children: [Object.keys(userInfo).length > 0 ? /*#__PURE__*/_jsx(SVG // name=\"company/heart-fill\"\n          , {\n            name: isSubscribe ? \"company/heart-fill\" : \"company/heart\",\n            width: \"24\",\n            height: \"24\",\n            className: \"mx-auto\",\n            onClick: handleSubscribe,\n            style: {\n              opacity: isSubscribe ? 0.25 : 1,\n              pointerEvents: isSubscribe ? \"none\" : \"initial\",\n              cursor: isSubscribe ? \"not-allowed\" : \"pointer\"\n            }\n          }) : /*#__PURE__*/_jsx(Link, {\n            routeName: PATH.LOGIN,\n            children: /*#__PURE__*/_jsx(SVG, {\n              name: \"company/heart\",\n              width: \"24\",\n              height: \"24\",\n              className: \"mx-auto\",\n              onClick: handleSubscribe,\n              style: {\n                opacity: isSubscribe ? 0.5 : 1,\n                pointerEvents: isSubscribe ? \"none\" : \"initial\",\n                cursor: isSubscribe ? \"not-allowed\" : \"pointer\"\n              }\n            })\n          }), /*#__PURE__*/_jsx(HeartCount, {\n            children: countHeart\n          })]\n        })]\n      })]\n    })]\n  });\n};\n\nexport default CompanyItem;","map":null,"metadata":{},"sourceType":"module"}