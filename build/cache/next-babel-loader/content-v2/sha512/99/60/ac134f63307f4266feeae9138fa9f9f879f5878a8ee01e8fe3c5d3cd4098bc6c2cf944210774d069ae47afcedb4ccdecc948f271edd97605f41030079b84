{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty } from \"lodash\";\nimport { renderLocation } from \"@common/functions\";\nimport { getUserCookies } from \"@common/utils/auth\";\nimport _Link from \"@designs/Link\";\nimport { PATH } from \"@routes\";\nimport { getUserProfile } from \"@redux/actions/user\";\nimport { setAppliedRecruitment, setSavedRecruitment } from \"@redux/actions/recruitment\";\nimport { resetAction } from \"@redux/actions/common\";\nimport { Button, ButtonWrapper, Container, CompanyName, Img, Link, Logo, Location, MainContent, OverviewWrapper, Salary, SalaryWrapper, Title, CompanyClick, Field } from \"./styles\";\nimport { setSeenCompany } from \"@redux/actions/company\";\nconst skeletonImage = \"/img/skeleton/default-small.jpg\";\n\nconst Overview = ({\n  recruitment\n}) => {\n  const {\n    t\n  } = useTranslation([\"job\"]);\n  const dispatch = useDispatch();\n  const {\n    companyLogo,\n    companyName,\n    companySlug,\n    location,\n    name,\n    salaryMax,\n    company,\n    dealSalary\n  } = recruitment;\n  const {\n    user\n  } = useSelector(state => state.user);\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    actionSuccess\n  } = useSelector(state => state.actions);\n  const {\n    0: isApplied,\n    1: setIsApplied\n  } = useState();\n  const {\n    0: isSaved,\n    1: setIsSaved\n  } = useState();\n  const userInfo = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userInfo) || {};\n  const locationArray = location === null || location === void 0 ? void 0 : location.map(item => item.province.name);\n  const locationString = renderLocation(locationArray);\n  useEffect(() => {\n    getUserProfileAPI();\n  }, []);\n  useEffect(() => {\n    checkApplied();\n    checkSaved();\n  }, [user]);\n  useEffect(() => {\n    if (actionSuccess) {\n      dispatch(resetAction());\n      getUserProfileAPI();\n      checkApplied();\n      checkSaved();\n    }\n  }, [actionSuccess]);\n\n  const handleApply = () => {\n    setAppliedRecruitmentAPI(user === null || user === void 0 ? void 0 : user._id, recruitment === null || recruitment === void 0 ? void 0 : recruitment._id);\n  };\n\n  const handleSave = () => {\n    setSaveRecruitmentAPI(user === null || user === void 0 ? void 0 : user._id, recruitment === null || recruitment === void 0 ? void 0 : recruitment._id);\n  };\n\n  const setAppliedRecruitmentAPI = (userId, recruitmentId) => {\n    const payload = {\n      userId: userId,\n      recruitmentId: recruitmentId\n    };\n    dispatch(setAppliedRecruitment(payload));\n  };\n\n  const setSaveRecruitmentAPI = (userId, recruitmentId) => {\n    const payload = {\n      userId: userId,\n      recruitmentId: recruitmentId\n    };\n    dispatch(setSavedRecruitment(payload));\n  };\n\n  const getUserProfileAPI = () => {\n    var _getUserCookies, _getUserCookies$userI;\n\n    const payload = {\n      id: (_getUserCookies = getUserCookies()) === null || _getUserCookies === void 0 ? void 0 : (_getUserCookies$userI = _getUserCookies.userInfo) === null || _getUserCookies$userI === void 0 ? void 0 : _getUserCookies$userI._id\n    };\n    dispatch(getUserProfile(payload));\n  };\n\n  const checkApplied = () => {\n    var _user$appliedRecruitm;\n\n    const listAppliedId = user === null || user === void 0 ? void 0 : (_user$appliedRecruitm = user.appliedRecruitment) === null || _user$appliedRecruitm === void 0 ? void 0 : _user$appliedRecruitm.map(item => {\n      var _item$recruitment;\n\n      return item === null || item === void 0 ? void 0 : (_item$recruitment = item.recruitment) === null || _item$recruitment === void 0 ? void 0 : _item$recruitment._id;\n    });\n\n    if (listAppliedId !== null && listAppliedId !== void 0 && listAppliedId.includes(recruitment === null || recruitment === void 0 ? void 0 : recruitment._id)) {\n      setIsApplied(true);\n    }\n  };\n\n  const checkSaved = () => {\n    var _user$savedRecruitmen;\n\n    const listSavedId = user === null || user === void 0 ? void 0 : (_user$savedRecruitmen = user.savedRecruitment) === null || _user$savedRecruitmen === void 0 ? void 0 : _user$savedRecruitmen.map(item => item === null || item === void 0 ? void 0 : item._id);\n\n    if (listSavedId !== null && listSavedId !== void 0 && listSavedId.includes(recruitment === null || recruitment === void 0 ? void 0 : recruitment._id)) {\n      setIsSaved(true);\n    }\n  };\n\n  const handleSetSeenCompany = () => {\n    if (isEmpty(userInfo)) return;\n    dispatch(setSeenCompany({\n      companyId: company === null || company === void 0 ? void 0 : company._id,\n      userId: userInfo === null || userInfo === void 0 ? void 0 : userInfo._id\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(OverviewWrapper, {\n    children: /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsx(Logo, {\n        children: /*#__PURE__*/_jsx(Img, {\n          src: (companyLogo === null || companyLogo === void 0 ? void 0 : companyLogo.small) || (companyLogo === null || companyLogo === void 0 ? void 0 : companyLogo.default) || (companyLogo === null || companyLogo === void 0 ? void 0 : companyLogo.medium) || skeletonImage,\n          alt: name,\n          loading: \"lazy\"\n        })\n      }), /*#__PURE__*/_jsxs(MainContent, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: name\n        }), /*#__PURE__*/_jsx(CompanyClick, {\n          onClick: handleSetSeenCompany,\n          children: /*#__PURE__*/_jsx(CompanyName, {\n            routeName: PATH.COMPANY_RECRUITMENT,\n            params: {\n              slug: companySlug\n            },\n            children: companyName\n          })\n        }), /*#__PURE__*/_jsxs(Location, {\n          children: [t(\"location\"), \": \", locationString]\n        }), /*#__PURE__*/_jsxs(SalaryWrapper, {\n          children: [/*#__PURE__*/_jsxs(Field, {\n            children: [t(\"salary\"), \": \"]\n          }), /*#__PURE__*/_jsx(Salary, {\n            children: isEmpty(userInfo) ? /*#__PURE__*/_jsx(_Link, {\n              routeName: PATH.LOGIN,\n              children: t(\"login-to-see\")\n            }) : dealSalary ? t(\"deal-salary\") : `${salaryMax} ${t(\"unit\")}`\n          })]\n        }), /*#__PURE__*/_jsxs(ButtonWrapper, {\n          children: [Object.keys(userInfo).length > 0 ? /*#__PURE__*/_jsx(Button, {\n            onClick: handleApply,\n            style: {\n              opacity: isApplied ? 0.5 : 1,\n              pointerEvents: isApplied ? \"none\" : \"initial\"\n            },\n            children: isApplied ? t(\"applied\") : t(\"apply\")\n          }) : /*#__PURE__*/_jsx(Link, {\n            routeName: PATH.LOGIN,\n            children: t(\"apply\")\n          }), Object.keys(userInfo).length > 0 ? /*#__PURE__*/_jsx(Button, {\n            onClick: handleSave,\n            style: {\n              opacity: isSaved ? 0.5 : 1,\n              pointerEvents: isSaved ? \"none\" : \"initial\"\n            },\n            children: isSaved ? t(\"saved-job\") : t(\"save-job\")\n          }) : /*#__PURE__*/_jsx(Link, {\n            routeName: PATH.LOGIN,\n            children: t(\"save-job\")\n          })]\n        })]\n      })]\n    })\n  });\n};\n\nexport default Overview;","map":null,"metadata":{},"sourceType":"module"}