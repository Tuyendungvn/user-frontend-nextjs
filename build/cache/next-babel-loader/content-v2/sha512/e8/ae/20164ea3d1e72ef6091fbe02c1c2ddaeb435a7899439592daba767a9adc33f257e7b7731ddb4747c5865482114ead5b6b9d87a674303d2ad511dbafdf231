{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateUserProfile } from \"@redux/actions/user\";\nimport Avatar from \"@designs/Avatar\";\nimport ImageCropper from \"@components/ImageCropper\";\nimport { randomId } from \"@common/functions\";\nimport { SVG } from \"@designs/SVG\";\nimport { Container, UploadWrapper, Input, AvatarWrapper, Button, Label } from \"./styles\";\n\nvar AvatarUploader = function AvatarUploader(props) {\n  var _props$aspect = props.aspect,\n      aspect = _props$aspect === void 0 ? 1 : _props$aspect,\n      userId = props.userId,\n      avatarURL = props.avatarURL;\n\n  var _useSelector = useSelector(function (state) {\n    return state.actions;\n  }),\n      isLoading = _useSelector.isLoading;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      fileSelected = _useState[0],\n      setFileSelected = _useState[1];\n\n  var _useState2 = useState(false),\n      openCropImage = _useState2[0],\n      setOpenCropImage = _useState2[1];\n\n  var _useState3 = useState(randomId()),\n      id = _useState3[0],\n      _ = _useState3[1];\n\n  var handleUploadRawImage = function handleUploadRawImage(event) {\n    var _event$target;\n\n    var files = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.files;\n    if (!files) return;\n    var file = files[0];\n    setFileSelected(file);\n    setOpenCropImage(true);\n  };\n\n  var handleCloseImageCropper = function handleCloseImageCropper() {\n    setOpenCropImage(false);\n  };\n\n  var handleCroppedImage = function handleCroppedImage(file) {\n    var updateUserPayload = {\n      updateUserInput: {\n        urlAvt: file\n      }\n    };\n    dispatch(updateUserProfile(updateUserPayload));\n    handleCloseImageCropper();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsxs(Label, {\n        htmlFor: id,\n        children: [/*#__PURE__*/_jsx(UploadWrapper, {\n          children: /*#__PURE__*/_jsxs(AvatarWrapper, {\n            children: [/*#__PURE__*/_jsx(Avatar, {\n              href: avatarURL,\n              className: \"w-12 h-12 phone:w-17 phone:h-17\"\n            }), /*#__PURE__*/_jsx(Button, {\n              children: /*#__PURE__*/_jsx(SVG, {\n                name: \"job-management/edit-avatar\",\n                className: \"phone:w-6.5 w-4\"\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Input, {\n          accept: \"image/*\",\n          id: id,\n          type: \"file\",\n          onChange: handleUploadRawImage\n        })]\n      })\n    }), /*#__PURE__*/_jsx(ImageCropper, {\n      aspect: aspect,\n      image: fileSelected,\n      isOpen: openCropImage,\n      onClose: handleCloseImageCropper,\n      onConfirm: handleCroppedImage,\n      isLoading: isLoading,\n      fileType: (fileSelected === null || fileSelected === void 0 ? void 0 : fileSelected.type) || \"image/png\"\n    })]\n  });\n};\n\nexport default AvatarUploader;","map":null,"metadata":{},"sourceType":"module"}