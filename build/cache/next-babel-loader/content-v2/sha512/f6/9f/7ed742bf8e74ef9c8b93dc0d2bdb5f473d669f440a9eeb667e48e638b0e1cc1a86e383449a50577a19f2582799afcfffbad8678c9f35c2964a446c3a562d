{"ast":null,"code":"import { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nconst GET_ALL_COMPANY = gql`\n  query(\n    $keyword: String\n    $filterCompany: FilterCompany\n    $page: Int\n    $size: Int\n  ) {\n    getCompanies(\n      keyword: $keyword\n      filterCompany: $filterCompany\n      page: $page\n      size: $size\n    ) {\n      totalCount\n      results {\n        _id\n        name\n        code\n        slug\n        description\n        career {\n          _id\n          name\n        }\n        size\n        phoneNumber\n        contactName\n        location\n        province {\n          name\n        }\n        images {\n          default\n          medium\n          small\n        }\n        logo {\n          small\n          medium\n          default\n        }\n        videos\n        benefits {\n          _id\n          icon {\n            name\n            icon {\n              default\n              medium\n              small\n            }\n            _id\n          }\n          content\n        }\n        subscribe\n        user {\n          _id\n        }\n      }\n    }\n  }\n`;\nexport const getAllCompany = async variables => {\n  const response = await graphQLCommon(GET_ALL_COMPANY, variables);\n  return response;\n};\nconst GET_COMPANY = gql`\n  query Query($id: String!) {\n    getCompanyById(id: $id) {\n      _id\n      name\n      code\n      description\n      career {\n        _id\n        name\n      }\n      size\n      phoneNumber\n      contactName\n      location\n      province {\n        name\n      }\n      images {\n        default\n        medium\n        small\n      }\n      logo {\n        small\n        medium\n        default\n      }\n      videos\n      benefits {\n        _id\n        icon {\n          name\n          icon {\n            default\n            medium\n            small\n          }\n          _id\n        }\n        content\n      }\n      subscribe\n      user {\n        _id\n      }\n    }\n  }\n`;\nexport const getCompany = async variables => {\n  const response = await graphQLCommon(GET_COMPANY, variables);\n  return response;\n};\nconst UPDATE_COMPANY = gql`\n  mutation($id: String!, $companyUpdateInput: CompanyUpdateInput) {\n    updateCompany(id: $id, companyUpdateInput: $companyUpdateInput) {\n      _id\n    }\n  }\n`;\nexport const updateCompany = async variables => {\n  const response = await graphQLCommon(UPDATE_COMPANY, variables);\n  return response;\n};\nconst SUBSCRIBE_COMPANY = gql`\n  mutation($userId: String!, $companyId: String!) {\n    setSubscribedCompany(userId: $userId, companyId: $companyId)\n  }\n`;\nexport const setSubscribeCompany = async variables => {\n  const response = await graphQLCommon(SUBSCRIBE_COMPANY, variables);\n  return response;\n};\nconst GET_COMPANY_BY_SLUG = gql`\n  query($slug: String!) {\n    getCompanyBySlug(slug: $slug) {\n      _id\n      name\n      code\n      description\n      career {\n        _id\n        name\n      }\n      size\n      phoneNumber\n      contactName\n      location\n      province {\n        name\n      }\n      images {\n        default\n        medium\n        small\n      }\n      logo {\n        small\n        medium\n        default\n      }\n      videos\n      benefits {\n        _id\n        icon {\n          name\n          icon {\n            default\n            medium\n            small\n          }\n          description\n          _id\n        }\n        content\n      }\n      subscribe\n      user {\n        _id\n      }\n    }\n  }\n`;\nexport const getCompanyBySlug = async variables => {\n  const response = await graphQLCommon(GET_COMPANY_BY_SLUG, variables);\n  return response;\n};\nconst UPDATE_COMPANY_PROVINCE = gql`\n  mutation {\n    updateCompanyProvince\n  }\n`;\nexport const updateCompanyProvince = async variables => {\n  const response = await graphQLCommon(UPDATE_COMPANY_PROVINCE, variables);\n  return response;\n};\nconst SET_SEEN_COMPANY = gql`\n  mutation SetSeenCompanyMutation($userId: String!, $companyId: String!) {\n    setSeenCompany(userId: $userId, companyId: $companyId)\n  }\n`;\nexport const setSeenCompany = async variables => {\n  const response = await graphQLCommon(SET_SEEN_COMPANY, variables);\n  return response;\n};","map":null,"metadata":{},"sourceType":"module"}