{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation SetSeenCompanyMutation($userId: String!, $companyId: String!) {\\n    setSeenCompany(userId: $userId, companyId: $companyId)\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation {\\n    updateCompanyProvince\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  query($slug: String!) {\\n    getCompanyBySlug(slug: $slug) {\\n      _id\\n      name\\n      code\\n      description\\n      career {\\n        _id\\n        name\\n      }\\n      size\\n      phoneNumber\\n      contactName\\n      location\\n      province {\\n        name\\n      }\\n      images {\\n        default\\n        medium\\n        small\\n      }\\n      logo {\\n        small\\n        medium\\n        default\\n      }\\n      videos\\n      benefits {\\n        _id\\n        icon {\\n          name\\n          icon {\\n            default\\n            medium\\n            small\\n          }\\n          description\\n          _id\\n        }\\n        content\\n      }\\n      subscribe\\n      user {\\n        _id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($userId: String!, $companyId: String!) {\\n    setSubscribedCompany(userId: $userId, companyId: $companyId)\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: String!, $companyUpdateInput: CompanyUpdateInput) {\\n    updateCompany(id: $id, companyUpdateInput: $companyUpdateInput) {\\n      _id\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query Query($id: String!) {\\n    getCompanyById(id: $id) {\\n      _id\\n      name\\n      code\\n      description\\n      career {\\n        _id\\n        name\\n      }\\n      size\\n      phoneNumber\\n      contactName\\n      location\\n      province {\\n        name\\n      }\\n      images {\\n        default\\n        medium\\n        small\\n      }\\n      logo {\\n        small\\n        medium\\n        default\\n      }\\n      videos\\n      benefits {\\n        _id\\n        icon {\\n          name\\n          icon {\\n            default\\n            medium\\n            small\\n          }\\n          _id\\n        }\\n        content\\n      }\\n      subscribe\\n      user {\\n        _id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query(\\n    $keyword: String\\n    $filterCompany: FilterCompany\\n    $page: Int\\n    $size: Int\\n  ) {\\n    getCompanies(\\n      keyword: $keyword\\n      filterCompany: $filterCompany\\n      page: $page\\n      size: $size\\n    ) {\\n      totalCount\\n      results {\\n        _id\\n        name\\n        code\\n        slug\\n        description\\n        career {\\n          _id\\n          name\\n        }\\n        size\\n        phoneNumber\\n        contactName\\n        location\\n        province {\\n          name\\n        }\\n        images {\\n          default\\n          medium\\n          small\\n        }\\n        logo {\\n          small\\n          medium\\n          default\\n        }\\n        videos\\n        benefits {\\n          _id\\n          icon {\\n            name\\n            icon {\\n              default\\n              medium\\n              small\\n            }\\n            _id\\n          }\\n          content\\n        }\\n        subscribe\\n        user {\\n          _id\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nvar GET_ALL_COMPANY = gql(_templateObject());\nexport var getAllCompany = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLCommon(GET_ALL_COMPANY, variables);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllCompany(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GET_COMPANY = gql(_templateObject2());\nexport var getCompany = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphQLCommon(GET_COMPANY, variables);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCompany(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar UPDATE_COMPANY = gql(_templateObject3());\nexport var updateCompany = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLCommon(UPDATE_COMPANY, variables);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function updateCompany(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar SUBSCRIBE_COMPANY = gql(_templateObject4());\nexport var setSubscribeCompany = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return graphQLCommon(SUBSCRIBE_COMPANY, variables);\n\n          case 2:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function setSubscribeCompany(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar GET_COMPANY_BY_SLUG = gql(_templateObject5());\nexport var getCompanyBySlug = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return graphQLCommon(GET_COMPANY_BY_SLUG, variables);\n\n          case 2:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getCompanyBySlug(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar UPDATE_COMPANY_PROVINCE = gql(_templateObject6());\nexport var updateCompanyProvince = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return graphQLCommon(UPDATE_COMPANY_PROVINCE, variables);\n\n          case 2:\n            response = _context6.sent;\n            return _context6.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function updateCompanyProvince(_x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar SET_SEEN_COMPANY = gql(_templateObject7());\nexport var setSeenCompany = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return graphQLCommon(SET_SEEN_COMPANY, variables);\n\n          case 2:\n            response = _context7.sent;\n            return _context7.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function setSeenCompany(_x7) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}