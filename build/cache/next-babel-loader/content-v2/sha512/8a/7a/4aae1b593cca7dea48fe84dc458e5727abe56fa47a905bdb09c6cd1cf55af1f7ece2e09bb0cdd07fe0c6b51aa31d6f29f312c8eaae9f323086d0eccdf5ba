{"ast":null,"code":"import { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nconst GET_ALL_RECORD = gql`\n  query($filterRecord: FilterRecord, $page: Int, $size: Int) {\n    getAllRecord(filterRecord: $filterRecord, page: $page, size: $size) {\n      totalCount\n      results {\n        _id\n        user {\n          firstName\n          lastName\n          urlAvt {\n            default\n            medium\n            small\n          }\n        }\n        candidateCode\n        workSaved {\n          name\n        }\n        point\n        evaluator {\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n`;\nexport const getAllRecord = async variables => {\n  const response = await graphQLCommon(GET_ALL_RECORD, variables);\n  return response;\n};\nconst GET_RECORD_BY_ID = gql`\n  query($id: String!) {\n    getRecordById(id: $id) {\n      _id\n      user {\n        _id\n        displayName\n        firstName\n        lastName\n        urlAvt {\n          medium\n          default\n          small\n        }\n      }\n      jobType\n      generalInformation\n      workExperience {\n        companyName\n        jobName\n        timeStart\n        timeEnd\n        experience\n        description\n      }\n      education {\n        schoolName\n        major\n        timeStart\n        timeEnd\n        degree\n        description\n      }\n      workPlace {\n        _id\n        name\n        nameEn\n        code\n        countryCode\n      }\n      career {\n        _id\n        icon {\n          default\n          medium\n          small\n        }\n        name\n        categoryLevel1 {\n          name\n        }\n        description\n      }\n      jobLevelWanted\n      salaryWanted\n      benefitsWanted {\n        icon {\n          default\n          small\n          medium\n        }\n        name\n        description\n        keywords\n      }\n      employerSeenRecord {\n        employer {\n          _id\n          username\n          displayName\n        }\n        date\n        views\n      }\n      description\n      urlCV\n      fileNameCV\n      slug\n      keywords\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const getRecordById = async variables => {\n  const response = await graphQLCommon(GET_RECORD_BY_ID, variables);\n  return response;\n};\nconst GET_RECORD_BY_USER_ID = gql`\n  query($userId: String!) {\n    getRecordByUser(userId: $userId) {\n      _id\n      user {\n        displayName\n        firstName\n        lastName\n        urlAvt {\n          medium\n          default\n          small\n        }\n      }\n      jobType\n      generalInformation\n      workExperience {\n        companyName\n        jobName\n        timeStart\n        timeEnd\n        experience\n        description\n      }\n      education {\n        schoolName\n        major\n        timeStart\n        timeEnd\n        degree\n        description\n      }\n      workPlace {\n        _id\n        name\n        nameEn\n        code\n        countryCode\n      }\n      career {\n        _id\n        icon {\n          default\n          medium\n          small\n        }\n        name\n        categoryLevel1 {\n          name\n        }\n        description\n      }\n      jobLevelWanted\n      salaryWanted\n      benefitsWanted {\n        _id\n        icon {\n          default\n          small\n          medium\n        }\n        name\n        description\n        keywords\n      }\n      employerSeenRecord {\n        employer {\n          _id\n          username\n          displayName\n          company {\n            _id\n          }\n        }\n        date\n        views\n      }\n      description\n      urlCV\n      fileNameCV\n      slug\n      keywords\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const getRecordByUserId = async variables => {\n  const response = await graphQLCommon(GET_RECORD_BY_USER_ID, variables);\n  return response;\n};\nconst CHECK_RECORD_USER_EXIST = gql`\n  query {\n    checkRecordUserExist\n  }\n`;\nexport const checkRecordUserExist = async () => {\n  const response = await graphQLCommon(CHECK_RECORD_USER_EXIST, null);\n  return response;\n};","map":null,"metadata":{},"sourceType":"module"}