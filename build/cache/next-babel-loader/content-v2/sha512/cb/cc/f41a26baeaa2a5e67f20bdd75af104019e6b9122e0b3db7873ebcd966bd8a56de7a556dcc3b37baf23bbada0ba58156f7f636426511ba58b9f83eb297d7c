{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import \"firebase/auth\";\nimport { useTranslation } from \"next-i18next\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { phoneRegExp } from \"@constants/validate\";\nimport InputBox from \"@designs/Input\";\nimport { forceTextInputEnterNumber } from \"@common/functions/filter\";\nimport { login, sendOtpVoice, verifyOtpVoice } from \"@redux/actions/auth\";\nimport { PATH } from \"@routes\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport useAuth from \"@common/hooks/useAuth\";\nimport { LoginContainer, Title, AuthenTication, Form, Text, Navigation, EmployerLogin, Button } from \"./styles\";\nimport { getAllUser } from \"@services/user\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport OTPForm from \"@containers/Register/OTPForm\";\n\nconst Login = () => {\n  const {\n    0: inputMode,\n    1: setInputMode\n  } = useState(\"LOG_IN\");\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    t\n  } = useTranslation([\"authen\"]);\n  const redirect = useRedirect();\n  const dispatch = useDispatch();\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    isAuth\n  } = useAuth();\n  useEffect(() => {\n    if (currentUser) {\n      redirect(PATH.JOB_MANAGEMENT_PERSONAL_INFO);\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (isAuth) {\n      redirect(PATH.JOB_MANAGEMENT_PERSONAL_INFO);\n    } else {\n      getAllUserForCheckExist();\n    }\n  }, []);\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n    otp: \"\"\n  };\n  const validationWithPhone = Yup.object({\n    username: Yup.string().required(t(\"login.require-phone-number\")).matches(phoneRegExp, t(\"login.incorrect-phone-number\")).max(10, t(\"login.incorrect-phone-number\")),\n    password: Yup.string().required(t(\"login.require-password\"))\n  });\n  const validateWithOtp = Yup.object({\n    otp: Yup.string().required()\n  });\n  const formValidation = {\n    LOG_IN: validationWithPhone,\n    ACTIVE_ACOUNT: validateWithOtp\n  };\n\n  const handleSubmit = values => {\n    if (inputMode === \"LOG_IN\") {\n      handleLoginPhoneNumber(values);\n    }\n\n    if (inputMode === \"ACTIVE_ACOUNT\") {\n      handleVerifyOtpCode(values);\n    }\n  };\n\n  const handleLoginPhoneNumber = values => {\n    const listPhone = users === null || users === void 0 ? void 0 : users.map(user => user === null || user === void 0 ? void 0 : user.phoneNumber);\n\n    if (values.phoneNumber) {\n      const isExist = listPhone === null || listPhone === void 0 ? void 0 : listPhone.includes(values.phoneNumber);\n\n      if (!isExist) {\n        dispatch(showNotification({\n          type: \"error\",\n          title: t(\"login.have-error\"),\n          message: t(\"login.non-exist-phone\")\n        }));\n        return;\n      }\n    }\n\n    const payload = {\n      user: {\n        username: values.username,\n        password: values.password\n      },\n      permission: \"CANDIDATE\"\n    };\n    dispatch(login(payload));\n    eventManager.addListener(\"activeAccount\", () => {\n      setInputMode(\"ACTIVE_ACOUNT\");\n      const payload_Otp = {\n        phoneNumber: values.username\n      };\n      dispatch(sendOtpVoice(payload_Otp));\n    });\n  };\n\n  const handleVerifyOtpCode = async values => {\n    setLoading(true);\n\n    try {\n      const payload = {\n        input: {\n          otpCode: values === null || values === void 0 ? void 0 : values.otp,\n          phoneNumber: values === null || values === void 0 ? void 0 : values.username,\n          permission: \"CANDIDATE\"\n        }\n      };\n      dispatch(verifyOtpVoice(payload));\n      eventManager.addListener(\"verifyOtpSuccess\", () => {\n        setInputMode(\"LOG_IN\");\n      });\n    } catch (error) {\n      setErrorMessage(error.message);\n      console.error(error);\n      setLoading(false);\n    }\n  };\n\n  const getAllUserForCheckExist = async () => {\n    try {\n      const response = await getAllUser();\n      const {\n        getAllUserHasPermissions: result\n      } = (response === null || response === void 0 ? void 0 : response.data) || {};\n      setUsers(result === null || result === void 0 ? void 0 : result.results);\n    } catch (error) {\n      setUsers([]);\n      console.error(error);\n    }\n  };\n\n  const handleResendOtpCode = values => {\n    const payload = {\n      phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber\n    };\n    dispatch(sendOtpVoice(payload));\n  };\n\n  return /*#__PURE__*/_jsxs(LoginContainer, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      children: t(\"login.form-title\")\n    }), /*#__PURE__*/_jsx(AuthenTication, {\n      children: /*#__PURE__*/_jsx(Formik, {\n        initialValues: initialValues,\n        validationSchema: formValidation[inputMode],\n        onSubmit: handleSubmit,\n        children: formik => {\n          if (inputMode !== \"ACTIVE_ACOUNT\") {\n            return /*#__PURE__*/_jsxs(Form, {\n              children: [inputMode === \"LOG_IN\" && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                  onKeyPress: forceTextInputEnterNumber,\n                  label: t(\"login.phone-number\"),\n                  type: \"tel\",\n                  placeholder: t(\"login.enter-phone-number\")\n                }, formik.getFieldProps(\"username\")), formik.getFieldMeta(\"username\"))), /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                  label: t(\"login.password\"),\n                  placeholder: t(\"login.enter-password\"),\n                  type: \"password\"\n                }, formik.getFieldProps(\"password\")), formik.getFieldMeta(\"password\")))]\n              }), /*#__PURE__*/_jsx(Button, {\n                loading: isLoading,\n                primary: true,\n                type: \"submit\",\n                children: inputMode === \"LOG_IN\" ? t(\"login.login\") : t(\"login.verify\")\n              })]\n            });\n          }\n\n          if (inputMode === \"ACTIVE_ACOUNT\") {\n            return /*#__PURE__*/_jsx(OTPForm, {\n              onClose: () => {\n                setInputMode(\"LOG_IN\");\n                setErrorMessage(\"\");\n              },\n              title: \"Nhập mã xác thực OTP\",\n              loading: loading,\n              formik: formik,\n              errorMessage: errorMessage,\n              onResendOtp: handleResendOtpCode\n            });\n          }\n        }\n      })\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.forgot-password\"), /*#__PURE__*/_jsx(Navigation, {\n        routeName: PATH.FORGOT_PASSWORD,\n        children: t(\"login.reset\")\n      })]\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.dont-have-account\"), /*#__PURE__*/_jsx(Navigation, {\n        routeName: PATH.REGISTER,\n        children: t(\"login.register-here\")\n      })]\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.are-you-recruiter\"), /*#__PURE__*/_jsx(EmployerLogin, {\n        href: \"https://employer.tuyendungvn.com/dang-nhap\",\n        target: \"_blank\",\n        children: t(\"login.login-for-recruiters\")\n      })]\n    })]\n  });\n};\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}