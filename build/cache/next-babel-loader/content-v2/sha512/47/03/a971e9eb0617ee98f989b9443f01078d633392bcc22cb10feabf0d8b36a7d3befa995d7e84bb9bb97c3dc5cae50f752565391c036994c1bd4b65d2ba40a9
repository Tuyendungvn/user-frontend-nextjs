{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar createImage = function createImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.addEventListener(\"load\", function () {\n      return resolve(image);\n    });\n    image.addEventListener(\"error\", function (error) {\n      return reject(error);\n    });\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n    image.src = url;\n  });\n};\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n *\n * @returns {Object} { file, base64File }\n *\n */\n\n\nexport var getCroppedImg = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageSrc, pixelCrop) {\n    var fileType,\n        image,\n        canvas,\n        ctx,\n        maxSize,\n        safeArea,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fileType = _args.length > 2 && _args[2] !== undefined ? _args[2] : \"image/jpeg\";\n            _context.next = 3;\n            return createImage(imageSrc);\n\n          case 3:\n            image = _context.sent;\n            canvas = document.createElement(\"canvas\");\n            ctx = canvas.getContext(\"2d\");\n            maxSize = Math.max(image.width, image.height);\n            safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n            // image to rotate in without being clipped by canvas context\n\n            canvas.width = safeArea;\n            canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n            ctx === null || ctx === void 0 ? void 0 : ctx.translate(safeArea / 2, safeArea / 2);\n            ctx === null || ctx === void 0 ? void 0 : ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n            ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n            data = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n            canvas.width = pixelCrop.width;\n            canvas.height = pixelCrop.height; // paste generated rotate image with correct offsets for x,y crop values.\n\n            ctx === null || ctx === void 0 ? void 0 : ctx.putImageData(data, Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x), Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)); // As Base64 string\n            // As a blob\n\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              canvas.toBlob(function (blob) {\n                try {\n                  var base64File = canvas.toDataURL(fileType);\n                  var file = new File([blob], \"fileName.\".concat(fileType === \"image/jpeg\" ? \"jpg\" : \"png\"), {\n                    type: fileType\n                  });\n                  resolve({\n                    file: file,\n                    base64File: base64File\n                  });\n                } catch (error) {\n                  console.error(error);\n                }\n              }, fileType);\n            }));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCroppedImg(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}