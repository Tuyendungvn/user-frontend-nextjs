{"ast":null,"code":"import { actionSuccess } from \"@redux/actions/common\";\nimport { call, put } from \"redux-saga/effects\";\nimport * as services from \"@services/company\";\nimport { getAllCompanySuccess, getCompanyBySlugSuccess, getCompanySuccess, getMostAppliedCompanySuccess, getMostRecruitingCompanySuccess, getMostViewCompanySuccess, getNewestCompanySuccess } from \"@redux/actions/company\";\nexport function* getAllCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getAllCompany, variables);\n  const {\n    getCompanies: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getAllCompanySuccess(result));\n  }\n}\nexport function* getCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getCompany, variables);\n  const {\n    getCompanyById: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getCompanySuccess(result));\n  }\n}\nexport function* getCompanyBySlugSaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getCompanyBySlug, variables);\n  const {\n    getCompanyBySlug: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getCompanyBySlugSuccess(result));\n  }\n}\nexport function* getNewestCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getAllCompany, variables);\n  const {\n    getCompanies: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getNewestCompanySuccess(result));\n  }\n}\nexport function* getMostViewCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getAllCompany, variables);\n  const {\n    getCompanies: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getMostViewCompanySuccess(result));\n  }\n}\nexport function* getMostAppliedCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getAllCompany, variables);\n  const {\n    getCompanies: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getMostAppliedCompanySuccess(result));\n  }\n}\nexport function* getMostRecruitingCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getAllCompany, variables);\n  const {\n    getCompanies: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getMostRecruitingCompanySuccess(result));\n  }\n}\nexport function* updateCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.updateCompany, variables);\n  const {\n    updateCompany: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}\nexport function* updateCompanyProvinceSaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.updateCompanyProvince, variables);\n  const {\n    updateCompanyProvince: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}\nexport function* setSubscribeCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.setSubscribeCompany, variables);\n  const {\n    setSubscribedCompany: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}\nexport function* setSeenCompanySaga(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.setSeenCompany, variables);\n  const {\n    setSeenCompany: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    return true;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}