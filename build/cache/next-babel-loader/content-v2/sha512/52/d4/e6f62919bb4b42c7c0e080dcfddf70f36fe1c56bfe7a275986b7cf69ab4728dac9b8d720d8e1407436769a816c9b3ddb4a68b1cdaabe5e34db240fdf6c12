{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { i18n } from \"next-i18next\";\nimport { paths } from \"@routes/index\";\nimport path from \"path\";\nexport const useRedirect = () => {\n  const router = useRouter();\n  const currentLanguage = i18n.language;\n  const redirect = useCallback((routeName, params = {}, query = {}, options, // ? For refresh page not use route\n  locale = undefined, shallow = true) => {\n    var _currentPath$locale;\n\n    const currentPath = paths.find(item => item.name === routeName);\n    if (!locale) locale = currentLanguage;\n\n    if (!currentPath) {\n      console.error(`[Link Error] Don't find any route which has name is \"${routeName}\"`);\n    }\n\n    let href = path.join(`/${currentPath === null || currentPath === void 0 ? void 0 : (_currentPath$locale = currentPath.locale) === null || _currentPath$locale === void 0 ? void 0 : _currentPath$locale[locale]}`);\n\n    if (Object.keys(params).length) {\n      for (const key in params) {\n        const value = params[key];\n        href = href.replace(`/:${key}`, `/${value}`);\n      }\n    }\n\n    href = href.replace(/(\\/:)\\w+/g, \"/-\");\n\n    if (Object.keys(query).length) {\n      const queryString = renderQueryStringFromObject(query);\n      href += `?${queryString}`;\n    }\n\n    if (options !== null && options !== void 0 && options.useRefresh) {\n      const aTag = document.createElement(\"a\");\n      aTag.href = href;\n      aTag.click();\n      return;\n    }\n\n    router.push(href, undefined, {\n      shallow\n    });\n  }, []);\n  return redirect;\n};\n\nconst renderQueryStringFromObject = query => {\n  var _URLSearchParams;\n\n  return (_URLSearchParams = new URLSearchParams(query)) === null || _URLSearchParams === void 0 ? void 0 : _URLSearchParams.toString();\n};","map":null,"metadata":{},"sourceType":"module"}