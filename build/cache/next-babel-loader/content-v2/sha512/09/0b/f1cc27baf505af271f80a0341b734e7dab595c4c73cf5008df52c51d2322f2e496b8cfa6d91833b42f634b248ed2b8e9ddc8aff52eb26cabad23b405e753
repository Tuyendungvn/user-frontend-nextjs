{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UpdateWorkLocationMutation(\\n    $id: String!\\n    $workLocationInput: WorkLocationUpdateInput!\\n  ) {\\n    updateWorkLocation(id: $id, workLocationInput: $workLocationInput) {\\n      _id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DeleteWorkLocationMutation($id: String!) {\\n    deleteWorkLocation(id: $id)\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateWorkLocationMutation(\\n    $workLocationInput: WorkLocationCreateInput!\\n  ) {\\n    createWorkLocation(workLocationInput: $workLocationInput) {\\n      _id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query Query($companyId: String) {\\n    getWorkLocationByCompany(companyId: $companyId) {\\n      results {\\n        company {\\n          _id\\n          name\\n        }\\n        _id\\n        name\\n        province {\\n          name\\n          _id\\n        }\\n        location\\n      }\\n      totalCount\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Query {\\n    getAllWorkLocation {\\n      results {\\n        _id\\n        location\\n        province {\\n          name\\n        }\\n      }\\n      totalCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nvar GET_ALL_WORK_LOCATION = gql(_templateObject());\nexport var getAllWorkLocation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLCommon(GET_ALL_WORK_LOCATION, {});\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllWorkLocation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GET_WORK_LOCATION_BY_COMPANY = gql(_templateObject2());\nexport var getWorkLocationByCompany = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphQLCommon(GET_WORK_LOCATION_BY_COMPANY, variables);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getWorkLocationByCompany(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar CREATE_WORK_LOCATION = gql(_templateObject3());\nexport var createWorkLocation = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLCommon(CREATE_WORK_LOCATION, variables);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function createWorkLocation(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar DELETE_WORK_LOCATION = gql(_templateObject4());\nexport var deleteWorkLocation = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return graphQLCommon(DELETE_WORK_LOCATION, variables);\n\n          case 2:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function deleteWorkLocation(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar UPDATE_WORK_LOCATION = gql(_templateObject5());\nexport var updateWorkLocation = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return graphQLCommon(UPDATE_WORK_LOCATION, variables);\n\n          case 2:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function updateWorkLocation(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}