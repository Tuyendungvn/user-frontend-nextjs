{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport _app from \"./_app\";\nimport actions from \"./common\";\nimport ads from \"./ads\";\nimport auth from \"./auth\";\nimport blog from \"./blog\";\nimport company from \"./company\";\nimport contentWebsite from \"./contentWebsite\";\nimport careerCounseling from \"./careerCounseling\";\nimport category from \"./category\";\nimport job from \"./job\";\nimport location from \"./location\";\nimport position from \"./position\";\nimport recruitment from \"./recruitment\";\nimport record from \"./record\";\nimport staticPages from \"./staticPages\";\nimport tag from \"./tag\";\nimport user from \"./user\";\nimport workLocation from \"./workLocation\";\nimport benefit from \"./benefit\";\nimport rating from \"./rating\";\nimport requestReview from \"./requestReview\";\nimport evaluate from \"./evaluate\";\nimport notifications from \"./notifications\";\nimport scheduleInterview from \"./scheduleInterview\";\nimport invitationApply from \"./invitationApply\";\nconst reducers = combineReducers({\n  _app,\n  actions,\n  ads,\n  auth,\n  blog,\n  company,\n  contentWebsite,\n  careerCounseling,\n  category,\n  job,\n  location,\n  position,\n  recruitment,\n  record,\n  staticPages,\n  tag,\n  user,\n  workLocation,\n  benefit,\n  rating,\n  requestReview,\n  evaluate,\n  notifications,\n  scheduleInterview,\n  invitationApply\n});\n\nconst rootReducer = (state, action) => {\n  /**\n   * @description We are using Next-Redux-Wrapper and Saga\n   * so, server will execute the dispatch in server, after dispatch new state will be passed to\n   * client by dispatch the HYDRATE\n   */\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return reducers(state, action);\n  }\n};\n\nexport default rootReducer;\n/**\n * @description Use IRootState to set interface for callback's state\n *  in useSelector\n * @example\n *      const { cat } = useSelector(( state: IRootState ) => state.animal);\n */","map":null,"metadata":{},"sourceType":"module"}