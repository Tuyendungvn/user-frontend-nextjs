{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from \"react\";\nimport { END } from \"redux-saga\";\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\nimport { useTranslation } from \"next-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { wrapper } from \"@redux/store\";\nimport { withRecord } from \"@common/HOC/withRecord\";\nimport { PATH } from \"@routes\";\nimport Job from \"@containers/Job\";\nimport { AdsJobAPICaller, FindJobAPICaller, getAllCategoryLv2API } from \"@containers/Job/helper\";\nimport Meta from \"@components/Meta\";\nimport Main, { getAllBasicAPIForPage } from \"@layouts/Main\";\nimport { getAllMostKeyword } from \"@redux/actions/recruitment\";\nimport { getAllJobLevel, getAllJobType, getAllLevelPrice } from \"@redux/actions/job\";\n\nconst JobPage = props => {\n  const {\n    t\n  } = useTranslation([\"job\"]);\n  const {\n    query\n  } = useRouter();\n  const {\n    categorySelected\n  } = useSelector(state => state.category);\n  const {\n    provinceSelected\n  } = useSelector(state => state.location);\n  const {\n    jobLevelSelected,\n    levelPriceSelected,\n    jobTypeSelected\n  } = useSelector(state => state.job);\n\n  const renderTitle = () => {\n    let title = t(\"title.job\");\n\n    if ((jobTypeSelected === null || jobTypeSelected === void 0 ? void 0 : jobTypeSelected.name) !== undefined) {\n      var _jobTypeSelected$name;\n\n      title += `${jobTypeSelected === null || jobTypeSelected === void 0 ? void 0 : (_jobTypeSelected$name = jobTypeSelected.name) === null || _jobTypeSelected$name === void 0 ? void 0 : _jobTypeSelected$name.toLowerCase()}`;\n    }\n\n    if ((categorySelected === null || categorySelected === void 0 ? void 0 : categorySelected.name) !== undefined) {\n      const career = categorySelected === null || categorySelected === void 0 ? void 0 : categorySelected.name;\n      title += t(\"title.career\").replace(\"$career\", career);\n    }\n\n    if ((levelPriceSelected === null || levelPriceSelected === void 0 ? void 0 : levelPriceSelected.displayName) !== undefined) {\n      const price = levelPriceSelected === null || levelPriceSelected === void 0 ? void 0 : levelPriceSelected.displayName;\n      title += t(\"title.with-price\").replace(\"$price\", price);\n    }\n\n    if ((jobLevelSelected === null || jobLevelSelected === void 0 ? void 0 : jobLevelSelected.name) !== undefined) {\n      const level = jobLevelSelected === null || jobLevelSelected === void 0 ? void 0 : jobLevelSelected.name;\n      title += t(\"title.for-level\").replace(\"$level\", level);\n    }\n\n    if ((provinceSelected === null || provinceSelected === void 0 ? void 0 : provinceSelected.name) !== undefined) {\n      const province = provinceSelected === null || provinceSelected === void 0 ? void 0 : provinceSelected.name;\n      title += t(\"title.location\").replace(\"$location\", province);\n    }\n\n    if (query.k) {\n      let keyword = decodeURIComponent(String(query.k));\n\n      if (keyword.length > 25) {\n        keyword = keyword.slice(0, 25) + \"...\";\n      }\n\n      title += t(\"title.with-keyword\").replace(\"$keyword\", String(keyword));\n    }\n\n    return title;\n  };\n\n  const title = renderTitle();\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: title,\n      routeName: PATH.JOB,\n      description: title\n    }), /*#__PURE__*/_jsx(Main, {\n      type: \"job\",\n      children: /*#__PURE__*/_jsx(Job, {})\n    })]\n  });\n};\n\nexport default withRecord(JobPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const {\n    locale = \"vi\",\n    store: {\n      dispatch,\n      sagaTask\n    },\n    params\n  } = context;\n  dispatch(getAllCategoryLv2API(0));\n  dispatch(getAllJobLevel());\n  dispatch(getAllLevelPrice({}));\n  dispatch(getAllJobType({}));\n  const apiCaller = new FindJobAPICaller({\n    dispatch\n  });\n  await apiCaller.getProvinceAndSelect();\n  await apiCaller.filterAllJobAPI();\n  const apiCallerForAdsJob = new AdsJobAPICaller({\n    dispatch\n  });\n  await apiCallerForAdsJob.getAds1();\n  await apiCallerForAdsJob.getAds2();\n  await apiCallerForAdsJob.getAds3();\n  await apiCallerForAdsJob.getAds4();\n  await apiCallerForAdsJob.getAds5();\n  dispatch(getAllMostKeyword());\n  getAllBasicAPIForPage(locale, dispatch);\n  dispatch(END);\n  await sagaTask.toPromise();\n  return {\n    props: _objectSpread({\n      locale\n    }, await serverSideTranslations(locale, [\"common\", \"job\"]))\n  };\n});","map":null,"metadata":{},"sourceType":"module"}