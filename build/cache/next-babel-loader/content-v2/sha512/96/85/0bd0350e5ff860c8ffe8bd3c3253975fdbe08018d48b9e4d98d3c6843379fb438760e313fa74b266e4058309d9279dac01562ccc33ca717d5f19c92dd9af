{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { createPersistedQueryLink } from \"apollo-link-persisted-queries\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nconst graphqlUrl = process.env.GRAPHQL_URL;\nlet apolloClient;\n\nconst createApolloClient = initialState => {\n  const isBrowser = false;\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: createPersistedQueryLink().concat(new HttpLink({\n      uri: `${graphqlUrl}/graphql`,\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser ? fetch : undefined\n    })),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n\nconst initializeApollo = initialState => {\n  const _apolloClient = apolloClient || createApolloClient(initialState); // If page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    // get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // restore the cache using the data passed from getStaticProps or getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n};\n\nexport const useApollo = initialState => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};","map":null,"metadata":{},"sourceType":"module"}