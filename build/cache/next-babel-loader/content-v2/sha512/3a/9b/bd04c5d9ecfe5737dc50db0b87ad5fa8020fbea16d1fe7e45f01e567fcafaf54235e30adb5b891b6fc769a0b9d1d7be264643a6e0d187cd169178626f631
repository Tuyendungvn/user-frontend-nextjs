{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { formatParams, unShiftArray } from \"@common/functions\";\nimport { getAllCategoryLv2API } from \"@containers/Job/helper\";\nimport { PATH } from \"@routes\";\nimport { BoxOptionsContainer, ListBoxMenu, ListBoxItem } from \"./styles\";\nimport AutoComplete from \"@designs/AutoComplete\";\nimport { SVG } from \"@designs/SVG\";\nimport Select from \"./components/Select\";\nconst PATH_SELF = PATH.JOB;\n\nconst Filter = props => {\n  const {\n    t\n  } = useTranslation([\"job\"]);\n  const redirect = useRedirect();\n  const dispatch = useDispatch();\n  const fullQuery = useRouter().query || {};\n  const query = removeParams(fullQuery);\n  const {\n    career,\n    level,\n    salary,\n    type\n  } = fullQuery;\n  const queryCareer = formatParams(decodeURIComponent(career || \"\"));\n  const queryLevel = formatParams(decodeURIComponent(level || \"\"));\n  const querySalary = formatParams(decodeURIComponent(salary || \"\"));\n  const queryType = formatParams(decodeURIComponent(type || \"\"));\n  const {\n    allJobLevel,\n    allLevelPrice,\n    allJobType\n  } = useSelector(state => state.job);\n  const {\n    categoryLevel2: {\n      results: allCareer = [],\n      totalCount = 0\n    }\n  } = useSelector(state => state.category);\n  const {\n    0: listCareer,\n    1: setListCareer\n  } = useState([]);\n  const {\n    0: listJobLevel,\n    1: setListJobLevel\n  } = useState([]);\n  const {\n    0: listLevelPrice,\n    1: setListLevelPrice\n  } = useState([]);\n  const {\n    0: listJobType,\n    1: setListJobType\n  } = useState([]);\n  const {\n    0: careerSelected,\n    1: setCareerSelected\n  } = useState();\n  const {\n    0: jobLevelSelected,\n    1: setJobLevelSelected\n  } = useState();\n  const {\n    0: levelPriceSelected,\n    1: setLevelPriceSelected\n  } = useState();\n  const {\n    0: jobTypeSelected,\n    1: setJobTypeSelected\n  } = useState();\n  const {\n    0: page,\n    1: setPage\n  } = useState(0);\n  const {\n    0: careers,\n    1: setCareers\n  } = useState([]);\n  useEffect(() => {\n    if (page !== 0) {\n      dispatch(getAllCategoryLv2API(page));\n    }\n  }, [page]);\n  useEffect(() => {\n    if ((allCareer === null || allCareer === void 0 ? void 0 : allCareer.length) > 0) {\n      if ((careers === null || careers === void 0 ? void 0 : careers.length) < totalCount) {\n        const newPage = page + 1;\n        setPage(newPage);\n        setCareers(state => [...careers, ...allCareer]);\n      }\n    }\n  }, [allCareer]);\n  useEffect(() => {\n    addOptionToCareers();\n    addOptionToJobLevels();\n    addOptionToLevelPrices();\n    addOptionToJobTypes();\n  }, [careers, allJobLevel, allLevelPrice, allJobType]);\n  useEffect(() => {\n    setCareerInitial();\n    setLevelInitial();\n    setSalaryInitial();\n    setTypeInitial();\n  }, [listCareer, listJobLevel, listLevelPrice, listJobType, fullQuery]);\n\n  const handleSelectedCareer = option => {\n    setCareerSelected(option);\n    redirect(PATH_SELF, fullQuery, _objectSpread(_objectSpread({}, query), {}, {\n      career: encodeURIComponent(option === null || option === void 0 ? void 0 : option.slug)\n    }));\n  };\n\n  const handleSelectedJobLevel = option => {\n    setJobLevelSelected(option);\n    redirect(PATH_SELF, fullQuery, _objectSpread(_objectSpread({}, query), {}, {\n      level: encodeURIComponent(option === null || option === void 0 ? void 0 : option.slug)\n    }));\n  };\n\n  const handleSelectedLevelPrice = option => {\n    setLevelPriceSelected(option);\n    redirect(PATH_SELF, fullQuery, _objectSpread(_objectSpread({}, query), {}, {\n      salary: encodeURIComponent(option === null || option === void 0 ? void 0 : option.customSlug)\n    }));\n  };\n\n  const handleSelectedJobType = option => {\n    setJobTypeSelected(option);\n    redirect(PATH_SELF, fullQuery, _objectSpread(_objectSpread({}, query), {}, {\n      type: encodeURIComponent(option === null || option === void 0 ? void 0 : option.slug)\n    }));\n  };\n\n  const setCareerInitial = () => {\n    if (queryCareer) {\n      const careerSelected = listCareer === null || listCareer === void 0 ? void 0 : listCareer.find(item => (item === null || item === void 0 ? void 0 : item.slug) === queryCareer);\n      setCareerSelected(careerSelected);\n    } else {\n      setCareerSelected(listCareer[0]);\n    }\n  };\n\n  const setLevelInitial = () => {\n    if (queryLevel) {\n      const levelSelected = listJobLevel === null || listJobLevel === void 0 ? void 0 : listJobLevel.find(item => (item === null || item === void 0 ? void 0 : item.slug) === queryLevel);\n      setJobLevelSelected(levelSelected);\n    } else {\n      setJobLevelSelected(listJobLevel[0]);\n    }\n  };\n\n  const setSalaryInitial = () => {\n    if (querySalary) {\n      const salarySelected = listLevelPrice === null || listLevelPrice === void 0 ? void 0 : listLevelPrice.find(item => (item === null || item === void 0 ? void 0 : item.customSlug) === querySalary);\n      setLevelPriceSelected(salarySelected);\n    } else {\n      setLevelPriceSelected(listLevelPrice[0]);\n    }\n  };\n\n  const setTypeInitial = () => {\n    if (queryType) {\n      const typeSelected = listJobType === null || listJobType === void 0 ? void 0 : listJobType.find(item => (item === null || item === void 0 ? void 0 : item.slug) === queryType);\n      setJobTypeSelected(typeSelected);\n    } else {\n      setJobTypeSelected(listJobType[0]);\n    }\n  };\n\n  const addOptionToCareers = () => {\n    let draftArray = [...careers];\n    unShiftArray(t(\"filter.all-career\"), draftArray);\n    setListCareer(draftArray);\n  };\n\n  const addOptionToJobLevels = () => {\n    let draftArray = [...allJobLevel];\n    unShiftArray(t(\"filter.all-level\"), draftArray);\n    setListJobLevel(draftArray);\n  };\n\n  const addOptionToLevelPrices = () => {\n    let draftArray = [...allLevelPrice];\n    unShiftArray(t(\"filter.all-level-price\"), draftArray);\n    setListLevelPrice(draftArray);\n  };\n\n  const addOptionToJobTypes = () => {\n    let draftArray = [...allJobType];\n    unShiftArray(t(\"filter.all-type\"), draftArray);\n    setListJobType(draftArray);\n  };\n\n  return /*#__PURE__*/_jsxs(BoxOptionsContainer, {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsx(AutoComplete, {\n      className: \"w-full\",\n      MenuButton: /*#__PURE__*/_jsxs(ListBoxMenu, {\n        className: \"justify-between\",\n        children: [careerSelected === null || careerSelected === void 0 ? void 0 : careerSelected.name, /*#__PURE__*/_jsx(SVG, {\n          name: \"common/arrow-down\",\n          width: \"16\",\n          height: \"16\"\n        })]\n      }),\n      fieldToSearch: [\"name\", \"nameEn\"],\n      onChange: handleSelectedCareer,\n      optionSelected: careerSelected,\n      options: listCareer,\n      renderItem: option => /*#__PURE__*/_jsx(ListBoxItem, {\n        children: option === null || option === void 0 ? void 0 : option.name\n      })\n    }), /*#__PURE__*/_jsx(Select, {\n      optionSelected: jobLevelSelected,\n      onSelect: option => handleSelectedJobLevel(option),\n      options: listJobLevel\n    }), /*#__PURE__*/_jsx(Select, {\n      optionSelected: levelPriceSelected,\n      onSelect: option => handleSelectedLevelPrice(option),\n      options: listLevelPrice\n    }), /*#__PURE__*/_jsx(Select, {\n      optionSelected: jobTypeSelected,\n      onSelect: option => handleSelectedJobType(option),\n      options: listJobType\n    })]\n  });\n};\n\nexport default Filter;\n\nconst removeParams = _query => {\n  const newQuery = _objectSpread({}, _query);\n\n  return newQuery || {};\n};","map":null,"metadata":{},"sourceType":"module"}