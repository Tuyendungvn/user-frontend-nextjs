{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useTranslation } from \"next-i18next\";\nimport { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport Button from \"@designs/Button\";\nimport Input from \"@designs/Input\";\nimport TextArea from \"@designs/TextArea\";\nimport { createRecord, updateRecord } from \"@redux/actions/record\";\nimport { ButtonWrapper, Container, DialogButton, Title, Wrapper, Form, DateWrapper } from \"./styles\";\n\nconst AddExperienceDialog = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    userId,\n    recordId,\n    experienceList = []\n  } = props;\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const initialValues = {\n    title: \"\",\n    company: \"\",\n    begin: \"\",\n    to: \"\",\n    describeWorkingProcess: \"\"\n  };\n  const validationSchema = Yup.object({\n    title: Yup.string().required(t(\"personal-info.experience.title-validation\")),\n    company: Yup.string().required(t(\"personal-info.experience.company-validation\"))\n  });\n\n  const handleSubmit = values => {\n    if (!recordId && !!userId) {\n      const payload = {\n        recordCreateInput: {\n          user: userId,\n          workExperience: [{\n            companyName: values.company,\n            jobName: values.title,\n            timeStart: values.begin,\n            timeEnd: values.to,\n            description: values.describeWorkingProcess\n          }]\n        }\n      };\n      dispatch(createRecord(payload));\n    }\n\n    if (!!recordId && !!userId) {\n      const clearFieldExperienceList = experienceList.map(experience => ({\n        companyName: experience.companyName,\n        jobName: experience.jobName,\n        timeStart: experience.timeStart,\n        timeEnd: experience.timeEnd,\n        description: experience.description\n      }));\n      const payload = {\n        id: recordId,\n        recordUpdateInput: {\n          workExperience: [...clearFieldExperienceList, {\n            companyName: values.company,\n            jobName: values.title,\n            timeStart: values.begin,\n            timeEnd: values.to,\n            description: values.describeWorkingProcess\n          }]\n        }\n      };\n      dispatch(updateRecord(payload));\n    }\n\n    handleCloseDialog();\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.experience.add-experience\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          onSubmit: handleSubmit,\n          validationSchema: validationSchema,\n          children: formik => /*#__PURE__*/_jsxs(Form, {\n            children: [/*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n              label: t(\"personal-info.experience.company\"),\n              placeholder: t(\"personal-info.experience.company-placeholder\"),\n              type: \"text\",\n              required: true\n            }, formik.getFieldProps(\"company\")), formik.getFieldMeta(\"company\"))), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n              label: t(\"personal-info.experience.title\"),\n              placeholder: t(\"personal-info.experience.title-placeholder\"),\n              type: \"text\",\n              required: true\n            }, formik.getFieldProps(\"title\")), formik.getFieldMeta(\"title\"))), /*#__PURE__*/_jsxs(DateWrapper, {\n              children: [/*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                label: t(\"personal-info.experience.begin\"),\n                placeholder: t(\"personal-info.education.date-placeholder\"),\n                className: \"w-full\",\n                type: \"date\"\n              }, formik.getFieldProps(\"begin\")), formik.getFieldMeta(\"begin\"))), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                label: t(\"personal-info.experience.to\"),\n                placeholder: t(\"personal-info.education.date-placeholder\"),\n                className: \"w-full\",\n                type: \"date\"\n              }, formik.getFieldProps(\"to\")), formik.getFieldMeta(\"to\")))]\n            }), /*#__PURE__*/_jsx(TextArea, _objectSpread(_objectSpread({\n              label: t(\"personal-info.experience.describe-working-process-placeholder\"),\n              placeholder: t(\"personal-info.experience.describe-working-process\"),\n              type: \"text\",\n              rows: 5\n            }, formik.getFieldProps(\"describeWorkingProcess\")), formik.getFieldMeta(\"describeWorkingProcess\"))), /*#__PURE__*/_jsxs(ButtonWrapper, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                type: \"button\",\n                onClick: handleCloseDialog,\n                className: \"w-1/2 border border-solid border-primary\",\n                children: t(\"common:dialog.cancel\")\n              }), /*#__PURE__*/_jsx(Button, {\n                loading: isLoading,\n                primary: true,\n                type: \"submit\",\n                className: \"w-1/2\",\n                children: !isLoading && t(\"common:dialog.save\")\n              })]\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default AddExperienceDialog;","map":null,"metadata":{},"sourceType":"module"}