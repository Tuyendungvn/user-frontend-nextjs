{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport RelatedJobCard from \"@designs/Card/RelatedJobCard\";\nimport { Link, ListCardContainer, RelateJobContainer, Title, LinkWrapper } from \"./styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllRecruitment } from \"@redux/actions/recruitment\";\nimport useAuth from \"@common/hooks/useAuth\";\nimport { setSeenRecruitment } from \"@redux/actions/recruitment\";\nimport { PATH } from \"@routes\";\n\nconst RelatedJob = ({\n  recruitment,\n  title,\n  bestRecruitment\n}) => {\n  var _accountInfo$userInfo;\n\n  const dispatch = useDispatch();\n  const {\n    accountInfo\n  } = useAuth();\n  const userId = accountInfo === null || accountInfo === void 0 ? void 0 : (_accountInfo$userInfo = accountInfo.userInfo) === null || _accountInfo$userInfo === void 0 ? void 0 : _accountInfo$userInfo._id;\n  const {\n    0: newBestRecruitment,\n    1: setNewBestRecruitment\n  } = useState([]);\n  const {\n    allRecruitment: {\n      results: allRecruitment\n    }\n  } = useSelector(state => state.recruitment);\n  useEffect(() => {\n    sliceBestRecruitment();\n  }, [bestRecruitment]);\n  useEffect(() => {\n    if (recruitment) {\n      var _recruitment$company;\n\n      getRelatedRecruitmentAPI((_recruitment$company = recruitment.company) === null || _recruitment$company === void 0 ? void 0 : _recruitment$company.code);\n    }\n  }, [recruitment]);\n\n  const getRelatedRecruitmentAPI = code => {\n    const payload = {\n      filterRecruitment: {\n        companyCode: code || \"\"\n      },\n      page: 0,\n      size: 6\n    };\n    dispatch(getAllRecruitment(payload));\n  };\n\n  const sliceBestRecruitment = () => {\n    let newArray = [];\n\n    if ((bestRecruitment === null || bestRecruitment === void 0 ? void 0 : bestRecruitment.length) >= 6) {\n      newArray = bestRecruitment === null || bestRecruitment === void 0 ? void 0 : bestRecruitment.slice(0, 6);\n    } else {\n      newArray = bestRecruitment;\n    }\n\n    setNewBestRecruitment(newArray);\n  };\n\n  const handleClickJob = recruitmentId => {\n    dispatch(setSeenRecruitment({\n      userId: userId,\n      recruitmentId: recruitmentId\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(RelateJobContainer, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      children: title\n    }), /*#__PURE__*/_jsx(ListCardContainer, {\n      children: bestRecruitment ? newBestRecruitment === null || newBestRecruitment === void 0 ? void 0 : newBestRecruitment.map((job, index) => /*#__PURE__*/_jsx(LinkWrapper, {\n        onClick: () => handleClickJob(job === null || job === void 0 ? void 0 : job._id),\n        children: /*#__PURE__*/_jsx(Link, {\n          routeName: PATH.JOB_DETAIL,\n          params: {\n            slug: job === null || job === void 0 ? void 0 : job.slug\n          },\n          children: /*#__PURE__*/_jsx(RelatedJobCard, {\n            job: job\n          })\n        }, index)\n      })) : allRecruitment && (allRecruitment === null || allRecruitment === void 0 ? void 0 : allRecruitment.map((job, index) => /*#__PURE__*/_jsx(LinkWrapper, {\n        onClick: () => handleClickJob(job === null || job === void 0 ? void 0 : job._id),\n        children: /*#__PURE__*/_jsx(Link, {\n          routeName: PATH.JOB_DETAIL,\n          params: {\n            slug: job === null || job === void 0 ? void 0 : job.slug\n          },\n          children: /*#__PURE__*/_jsx(RelatedJobCard, {\n            job: job\n          })\n        }, index)\n      })))\n    })]\n  });\n};\n\nexport default RelatedJob;","map":null,"metadata":{},"sourceType":"module"}