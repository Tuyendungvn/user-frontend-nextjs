{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from \"react\";\nimport { END } from \"redux-saga\";\nimport { useSelector } from \"react-redux\";\nimport { wrapper } from \"@redux/store\";\nimport { LocalBusinessJsonLd, NextSeo } from \"next-seo\";\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\nimport { removeHtmlTagFromString } from \"@common/functions/filter\";\nimport { withRecord } from \"@common/HOC/withRecord\";\nimport { renderPrice } from \"@common/functions\";\nimport Meta from \"@components/Meta\";\nimport { ROOT_URL } from \"@constants/app\";\nimport JobDetail from \"@containers/JobDetail\";\nimport { PATH } from \"@routes\";\nimport { getRecruitmentBySlug } from \"@redux/actions/recruitment\";\nimport Main, { getAllBasicAPIForPage } from \"@layouts/Main\";\n\nconst JobDetailPage = props => {\n  var _renderImages;\n\n  const {\n    recruitmentDetail\n  } = useSelector(state => state.recruitment);\n  const {\n    name,\n    companyImages = [],\n    description,\n    salaryMin,\n    slug,\n    companyLocation\n  } = recruitmentDetail;\n  const {\n    seoData: {\n      seoTitle\n    }\n  } = useSelector(state => state.contentWebsite);\n  const seoDescription = removeHtmlTagFromString(description).slice(0, 157) + \"...\";\n  const url = `${ROOT_URL}/viec-lam/${slug}`;\n\n  const renderImages = () => {\n    const otherImagesInfo = companyImages.map(item => ({\n      url: item === null || item === void 0 ? void 0 : item.small,\n      width: 500,\n      height: 346,\n      alt: `${name} | ${seoTitle}`\n    }));\n    return otherImagesInfo || [];\n  };\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: name,\n      routeName: PATH.JOB_DETAIL,\n      description: seoDescription\n    }), /*#__PURE__*/_jsx(NextSeo, {\n      openGraph: {\n        images: renderImages()\n      }\n    }), /*#__PURE__*/_jsx(LocalBusinessJsonLd, {\n      type: \"job\",\n      name: name,\n      description: seoDescription,\n      id: url,\n      url: url,\n      priceRange: renderPrice(salaryMin),\n      address: {\n        streetAddress: companyLocation,\n        addressLocality: companyLocation,\n        addressCountry: \"VN\",\n        addressRegion: \"vi\",\n        postalCode: \"\"\n      },\n      images: (_renderImages = renderImages()) === null || _renderImages === void 0 ? void 0 : _renderImages.map(({\n        url\n      }) => url)\n    }), /*#__PURE__*/_jsx(Main, {\n      children: /*#__PURE__*/_jsx(JobDetail, {})\n    })]\n  });\n};\n\nexport default withRecord(JobDetailPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const {\n    locale,\n    params,\n    res,\n    store: {\n      dispatch,\n      sagaTask,\n      getState\n    }\n  } = context;\n  const {\n    slug = \"\"\n  } = params;\n  getAllBasicAPIForPage(locale, dispatch);\n  dispatch(getRecruitmentBySlug({\n    slug: String(slug)\n  }));\n  dispatch(END);\n  await sagaTask.toPromise();\n  const {\n    recruitment: {\n      recruitmentDetail\n    }\n  } = getState();\n\n  if (!Object.keys(recruitmentDetail).length) {\n    res.statusCode = 404;\n    return {\n      notFound: true,\n      props: {}\n    };\n  }\n\n  return {\n    props: _objectSpread({\n      locale\n    }, await serverSideTranslations(locale, [\"common\", \"job\"]))\n  };\n});","map":null,"metadata":{},"sourceType":"module"}