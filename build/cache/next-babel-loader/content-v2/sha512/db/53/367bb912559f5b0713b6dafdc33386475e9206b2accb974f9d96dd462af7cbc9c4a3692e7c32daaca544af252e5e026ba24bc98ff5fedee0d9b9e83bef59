{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    checkRecordUserExist\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query($userId: String!) {\\n    getRecordByUser(userId: $userId) {\\n      _id\\n      user {\\n        displayName\\n        firstName\\n        lastName\\n        urlAvt {\\n          medium\\n          default\\n          small\\n        }\\n      }\\n      jobType\\n      generalInformation\\n      workExperience {\\n        companyName\\n        jobName\\n        timeStart\\n        timeEnd\\n        experience\\n        description\\n      }\\n      education {\\n        schoolName\\n        major\\n        timeStart\\n        timeEnd\\n        degree\\n        description\\n      }\\n      workPlace {\\n        _id\\n        name\\n        nameEn\\n        code\\n        countryCode\\n      }\\n      career {\\n        _id\\n        icon {\\n          default\\n          medium\\n          small\\n        }\\n        name\\n        categoryLevel1 {\\n          name\\n        }\\n        description\\n      }\\n      jobLevelWanted\\n      salaryWanted\\n      benefitsWanted {\\n        _id\\n        icon {\\n          default\\n          small\\n          medium\\n        }\\n        name\\n        description\\n        keywords\\n      }\\n      employerSeenRecord {\\n        employer {\\n          _id\\n          username\\n          displayName\\n          company {\\n            _id\\n          }\\n        }\\n        date\\n        views\\n      }\\n      description\\n      urlCV\\n      fileNameCV\\n      slug\\n      keywords\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: String!) {\\n    getRecordById(id: $id) {\\n      _id\\n      user {\\n        _id\\n        displayName\\n        firstName\\n        lastName\\n        urlAvt {\\n          medium\\n          default\\n          small\\n        }\\n      }\\n      jobType\\n      generalInformation\\n      workExperience {\\n        companyName\\n        jobName\\n        timeStart\\n        timeEnd\\n        experience\\n        description\\n      }\\n      education {\\n        schoolName\\n        major\\n        timeStart\\n        timeEnd\\n        degree\\n        description\\n      }\\n      workPlace {\\n        _id\\n        name\\n        nameEn\\n        code\\n        countryCode\\n      }\\n      career {\\n        _id\\n        icon {\\n          default\\n          medium\\n          small\\n        }\\n        name\\n        categoryLevel1 {\\n          name\\n        }\\n        description\\n      }\\n      jobLevelWanted\\n      salaryWanted\\n      benefitsWanted {\\n        icon {\\n          default\\n          small\\n          medium\\n        }\\n        name\\n        description\\n        keywords\\n      }\\n      employerSeenRecord {\\n        employer {\\n          _id\\n          username\\n          displayName\\n        }\\n        date\\n        views\\n      }\\n      description\\n      urlCV\\n      fileNameCV\\n      slug\\n      keywords\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($filterRecord: FilterRecord, $page: Int, $size: Int) {\\n    getAllRecord(filterRecord: $filterRecord, page: $page, size: $size) {\\n      totalCount\\n      results {\\n        _id\\n        user {\\n          firstName\\n          lastName\\n          urlAvt {\\n            default\\n            medium\\n            small\\n          }\\n        }\\n        candidateCode\\n        workSaved {\\n          name\\n        }\\n        point\\n        evaluator {\\n          firstName\\n          lastName\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nvar GET_ALL_RECORD = gql(_templateObject());\nexport var getAllRecord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLCommon(GET_ALL_RECORD, variables);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllRecord(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GET_RECORD_BY_ID = gql(_templateObject2());\nexport var getRecordById = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphQLCommon(GET_RECORD_BY_ID, variables);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRecordById(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar GET_RECORD_BY_USER_ID = gql(_templateObject3());\nexport var getRecordByUserId = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLCommon(GET_RECORD_BY_USER_ID, variables);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getRecordByUserId(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar CHECK_RECORD_USER_EXIST = gql(_templateObject4());\nexport var checkRecordUserExist = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return graphQLCommon(CHECK_RECORD_USER_EXIST, null);\n\n          case 2:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function checkRecordUserExist() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}