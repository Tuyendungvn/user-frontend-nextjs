{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * This is component which will prevent your app is cracked when something wrong\n * with typescript.\n * This component is similar with try-catch wrapper\n */\nimport React, { Component, isValidElement } from \"react\";\nimport { ErrorBoundaryContainer, Title, Details } from \"./styles\";\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return /*#__PURE__*/isValidElement(this.props.fallback) ? this.props.fallback : /*#__PURE__*/_jsxs(ErrorBoundaryContainer, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: \"C\\xF3 l\\u1ED7i x\\u1EA9y ra\"\n        }), /*#__PURE__*/_jsxs(Details, {\n          children: [this.state.error && this.state.error.toString(), /*#__PURE__*/_jsx(\"br\", {}), this.state.errorInfo.componentStack]\n        })]\n      });\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}