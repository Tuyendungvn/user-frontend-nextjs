{"ast":null,"code":"import _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { SVG } from \"@designs/SVG\";\nimport { Container, TextArea as TextAreaStyled, Label, Required, Error } from \"./styles\";\n\nvar TextArea = function TextArea(props) {\n  var _props$className = props.className,\n      className = _props$className === void 0 ? \"\" : _props$className,\n      _props$classNameInput = props.classNameInput,\n      classNameInput = _props$classNameInput === void 0 ? \"\" : _props$classNameInput,\n      error = props.error,\n      ref = props.ref,\n      _props$rows = props.rows,\n      rows = _props$rows === void 0 ? 4 : _props$rows,\n      onChangeValue = props.onChangeValue,\n      onChange = props.onChange,\n      _props$label = props.label,\n      label = _props$label === void 0 ? \"\" : _props$label,\n      required = props.required,\n      touched = props.touched,\n      placeholder = props.placeholder,\n      restProps = _objectWithoutProperties(props, [\"className\", \"classNameInput\", \"error\", \"ref\", \"rows\", \"onChangeValue\", \"onChange\", \"label\", \"required\", \"touched\", \"placeholder\"]);\n\n  var _useState = useState(false),\n      isError = _useState[0],\n      setIsError = _useState[1];\n\n  useEffect(function () {\n    if (touched && error) {\n      !isError && setIsError(true);\n    } else {\n      isError && setIsError(false);\n    }\n  }, [touched, error]);\n\n  var handleChange = function handleChange(e) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(e);\n    var currentValue = e.target.value || \"\";\n    var containValue = currentValue.split(\"\\n\").join(\"<br>\");\n    onChangeValue && onChangeValue(containValue);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [label && /*#__PURE__*/_jsxs(Label, {\n      children: [label, required && /*#__PURE__*/_jsx(Required, {\n        children: \"(*)\"\n      })]\n    }), /*#__PURE__*/_jsx(TextAreaStyled, _objectSpread({\n      className: classNameInput,\n      error: isError,\n      rows: rows,\n      ref: ref,\n      onChange: handleChange,\n      placeholder: placeholder\n    }, restProps)), error && touched && /*#__PURE__*/_jsxs(Error, {\n      children: [/*#__PURE__*/_jsx(SVG, {\n        name: \"common/error\",\n        width: 16,\n        height: 16,\n        className: \"mr-0.5 inline-block\"\n      }), error]\n    })]\n  });\n};\n\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}