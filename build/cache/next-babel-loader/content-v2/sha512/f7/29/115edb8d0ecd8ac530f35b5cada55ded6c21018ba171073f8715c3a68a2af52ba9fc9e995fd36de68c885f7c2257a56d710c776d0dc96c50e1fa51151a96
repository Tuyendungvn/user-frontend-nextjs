{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// import \"firebase/auth\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport RegisterForm from \"./RegisterForm\";\nimport OTPForm from \"./OTPForm\";\nimport { phoneRegExp, emailRegExp } from \"@constants/validate\";\nimport { useTranslation } from \"next-i18next\";\nimport { registerOtpVoice, sendOtpVoice, verifyOtpVoice } from \"@redux/actions/auth\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { PATH } from \"@routes\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { RegisterContainer } from \"./styles\";\nimport { getAllUser } from \"@services/user\";\nimport { resetAction } from \"@redux/actions/common\";\n\nconst Register = () => {\n  const {\n    t\n  } = useTranslation([\"authen\"]);\n  const dispatch = useDispatch();\n  const redirect = useRedirect();\n  const {\n    0: inputMode,\n    1: setInputMode\n  } = useState(\"PHONE_NUMBER\");\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(\"\");\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    actionSuccess\n  } = useSelector(state => state.actions);\n  useEffect(() => {\n    getAllUserForCheckExist();\n  }, []);\n  useEffect(() => {\n    if (actionSuccess) {\n      dispatch(resetAction());\n      showNotification({\n        type: \"success\",\n        title: t(\"register.create-successful\")\n      });\n      redirect(PATH.LOGIN);\n    }\n  }, [actionSuccess]);\n  const initialValues = {\n    phoneNumber: \"\",\n    email: \"\",\n    password: \"\",\n    otp: \"\"\n  };\n  const validateWithPhone = Yup.object({\n    phoneNumber: Yup.string().required(t(\"register.require-phone-number\")).matches(phoneRegExp, t(\"register.phone-not-valid\")).max(10, t(\"register.phone-not-valid\")),\n    email: Yup.string().required(t(\"register.require-email\")).matches(emailRegExp, t(\"register.email-not-valid\")),\n    password: Yup.string().required(t(\"login.require-password\"))\n  });\n  const validateWithOtp = Yup.object({\n    otp: Yup.string().required()\n  });\n\n  const handleSubmit = values => {\n    if (inputMode === \"PHONE_NUMBER\") {\n      const listPhoneNumber = users === null || users === void 0 ? void 0 : users.map(user => user === null || user === void 0 ? void 0 : user.phoneNumber);\n      const listEmail = users === null || users === void 0 ? void 0 : users.map(user => user === null || user === void 0 ? void 0 : user.email);\n\n      if (values.phoneNumber) {\n        const exist = listPhoneNumber === null || listPhoneNumber === void 0 ? void 0 : listPhoneNumber.includes(values.phoneNumber);\n\n        if (exist) {\n          dispatch(showNotification({\n            type: \"error\",\n            message: t(\"register.exist-phone-number\"),\n            title: t(\"register.have-error\")\n          }));\n          return;\n        }\n      }\n\n      if (values.email) {\n        const exist = listEmail.includes(values.email);\n\n        if (exist) {\n          dispatch(showNotification({\n            type: \"error\",\n            message: t(\"register.exist-email\"),\n            title: t(\"register.have-error\")\n          }));\n          return;\n        }\n      }\n\n      handleVerifyPhoneNumber(values);\n    }\n\n    if (inputMode === \"OTP\") {\n      handleVerifyOtpCode(values);\n    }\n  };\n\n  const getAllUserForCheckExist = async () => {\n    try {\n      const response = await getAllUser();\n      const {\n        getAllUserHasPermissions: result\n      } = (response === null || response === void 0 ? void 0 : response.data) || {};\n      setUsers(result === null || result === void 0 ? void 0 : result.results);\n    } catch (error) {\n      setUsers([]);\n      console.error(error);\n    }\n  };\n\n  const handleResendOtpCode = values => {\n    const text = values.phoneNumber;\n    const phoneNumber = `+84${text.slice(1, text.length)}`;\n    const payload = {\n      phoneNumber: phoneNumber\n    };\n    dispatch(sendOtpVoice(payload));\n  };\n\n  const handleVerifyPhoneNumber = async values => {\n    setLoading(true);\n\n    try {\n      const payload = {\n        input: {\n          permission: \"CANDIDATE\",\n          phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber,\n          password: values === null || values === void 0 ? void 0 : values.password,\n          email: values === null || values === void 0 ? void 0 : values.email\n        }\n      };\n      dispatch(registerOtpVoice(payload));\n      setErrorMessage(\"\");\n      setLoading(false);\n      setInputMode(\"OTP\");\n    } catch (error) {\n      console.error(error);\n      setLoading(false);\n      setErrorMessage(error === null || error === void 0 ? void 0 : error.message);\n    }\n  };\n\n  const handleVerifyOtpCode = async values => {\n    setLoading(true);\n\n    try {\n      const payload = {\n        input: {\n          otpCode: values === null || values === void 0 ? void 0 : values.otp,\n          phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber,\n          permission: \"CANDIDATE\"\n        }\n      };\n      dispatch(verifyOtpVoice(payload));\n      eventManager.addListener(\"verifyOtpSuccess\", () => {\n        redirect(PATH.LOGIN);\n      });\n    } catch (error) {\n      setErrorMessage(error.message);\n      console.error(error);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(RegisterContainer, {\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: initialValues,\n      validationSchema: inputMode === \"PHONE_NUMBER\" ? validateWithPhone : validateWithOtp,\n      onSubmit: handleSubmit,\n      children: formik => {\n        if (inputMode === \"PHONE_NUMBER\") {\n          return /*#__PURE__*/_jsx(RegisterForm, {\n            loading: loading,\n            formik: formik,\n            errorMessage: errorMessage\n          });\n        } else {\n          return /*#__PURE__*/_jsx(OTPForm, {\n            title: t(\"register.form-title\"),\n            loading: loading,\n            formik: formik,\n            errorMessage: errorMessage,\n            onResendOtp: handleResendOtpCode,\n            onClose: () => {\n              setInputMode(\"PHONE_NUMBER\");\n            }\n          });\n        }\n      }\n    })\n  });\n};\n\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}