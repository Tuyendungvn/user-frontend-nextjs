{"ast":null,"code":"import { useState } from \"react\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport { useAsync } from \"react-async-hook\";\nimport useConstant from \"use-constant\"; // Generic reusable hook\n\nexport const useDebouncedSearch = (searchFunction, timeDebounced = 300) => {\n  // Handle the input text state\n  const {\n    0: inputText,\n    1: setInputText\n  } = useState(\"\"); // Debounce the original search async function\n\n  const debouncedSearchFunction = useConstant(() => AwesomeDebouncePromise(searchFunction, timeDebounced)); // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n\n  const searchResults = useAsync(async () => {\n    if (inputText.length < 2) {\n      return [];\n    } else {\n      return debouncedSearchFunction(inputText);\n    }\n  }, [debouncedSearchFunction, inputText]); // Return everything needed for the hook consumer\n\n  return {\n    inputText,\n    setInputText,\n    searchResults\n  };\n};","map":null,"metadata":{},"sourceType":"module"}