{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\n/**\n * @description Handle element state when click outside\n * @usage\n *   Put elementRef in ref of div element you want to handle click outside\n *\n *   const {elementRef,  isVisible, setElementVisible} = useClickOutSide(initState);\n *\n *   <div ref={elementRef}>\n *     ... your code here ...\n *   </div>\n *\n *   Use isVisible, setElementVisible instead of useState\n * */\n\nexport var useClickOutSide = function useClickOutSide(initState) {\n  var _useState = useState(initState),\n      isVisible = _useState[0],\n      setElementVisible = _useState[1];\n\n  var elementRef = useRef(null);\n\n  var handleKeyDropdown = function handleKeyDropdown(e) {\n    if (e.key === \"Escape\") {\n      setElementVisible(false);\n    }\n  };\n\n  var handleClickOutSide = function handleClickOutSide(e) {\n    if (elementRef.current && !elementRef.current.contains(e.target)) {\n      setElementVisible(false);\n    }\n  };\n\n  useEffect(function () {\n    document.addEventListener(\"keydown\", handleKeyDropdown);\n    document.addEventListener(\"click\", handleClickOutSide);\n    return function () {\n      document.removeEventListener(\"keydown\", handleKeyDropdown);\n      document.removeEventListener(\"click\", handleClickOutSide);\n    };\n  }, [isVisible]);\n  return {\n    elementRef: elementRef,\n    isVisible: isVisible,\n    setElementVisible: setElementVisible\n  };\n};","map":null,"metadata":{},"sourceType":"module"}