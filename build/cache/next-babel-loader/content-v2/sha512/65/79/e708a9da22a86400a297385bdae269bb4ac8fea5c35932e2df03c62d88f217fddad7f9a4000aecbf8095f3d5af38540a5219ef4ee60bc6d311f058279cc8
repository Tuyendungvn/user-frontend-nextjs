{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"next-i18next\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport { splitStringToWordsArray } from \"@common/functions/filterString\";\nimport Button from \"@designs/Button\";\nimport InputBox from \"@designs/Input\";\nimport TextArea from \"@designs/TextArea\";\nimport GroupSelect from \"@designs/GroupSelect\";\nimport { updateUserProfile } from \"@redux/actions/user\";\nimport { ButtonWrapper, Container, DialogButton, Title, Wrapper, Form } from \"./styles\";\n\nconst EditGeneralInfoDialog = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    code,\n    description,\n    displayName,\n    title,\n    career\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const {\n    categoryLevel1,\n    categoryLevel2: {\n      results: listCareers = [],\n      totalCount = 0\n    }\n  } = useSelector(state => state.category);\n  const {\n    0: page,\n    1: setPage\n  } = useState(0);\n  const {\n    0: allCareers,\n    1: setAllCareers\n  } = useState([]);\n  useEffect(() => {\n    if ((listCareers === null || listCareers === void 0 ? void 0 : listCareers.length) > 0) {\n      const newPage = page + 1;\n      setPage(newPage);\n      setAllCareers([...allCareers, ...listCareers]);\n    }\n  }, [listCareers]);\n  const initialValues = {\n    fullName: displayName || \"\",\n    code: code || \"\",\n    title: title || \"\",\n    bio: description || \"\",\n    career: career || []\n  };\n  const validationSchema = Yup.object({\n    fullName: Yup.string().required(t(\"personal-info.general-info.fullName-validation\")).test(\"Full name\", t(\"personal-info.general-info.fullName-regex\"), values => {\n      var _splitStringToWordsAr;\n\n      return ((_splitStringToWordsAr = splitStringToWordsArray(values, \" \")) === null || _splitStringToWordsAr === void 0 ? void 0 : _splitStringToWordsAr.length) > 1;\n    }),\n    title: Yup.string().required(t(\"personal-info.general-info.title-validation\"))\n  });\n\n  const handleSubmit = values => {\n    const updateUserPayload = {\n      updateUserInput: {\n        displayName: values.fullName,\n        title: values.title,\n        history: values.bio,\n        career: values === null || values === void 0 ? void 0 : values.career.map(item => item === null || item === void 0 ? void 0 : item._id)\n      }\n    };\n    dispatch(updateUserProfile(updateUserPayload));\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: () => null,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.general-info.edit-general-info\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          validationSchema: validationSchema,\n          onSubmit: handleSubmit,\n          children: formik => {\n            return /*#__PURE__*/_jsxs(Form, {\n              children: [/*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                label: t(\"personal-info.general-info.fullName\"),\n                placeholder: t(\"personal-info.general-info.fullName-placeholder\"),\n                type: \"text\",\n                required: true\n              }, formik.getFieldProps(\"fullName\")), formik.getFieldMeta(\"fullName\"))), /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                label: t(\"personal-info.general-info.candidate-code\"),\n                placeholder: t(\"personal-info.general-info.candidate-code-placeholder\"),\n                type: \"text\",\n                value: initialValues.code,\n                required: true,\n                disabled: true\n              }, formik.getFieldProps(\"code\")), formik.getFieldMeta(\"code\"))), /*#__PURE__*/_jsx(GroupSelect, {\n                initValue: initialValues.career,\n                limit: 3,\n                instanceId: \"career\",\n                groupLabel: categoryLevel1 === null || categoryLevel1 === void 0 ? void 0 : categoryLevel1.results,\n                groupOption: allCareers,\n                label: t(\"personal-info.general-info.job\"),\n                isMulti: true,\n                required: true,\n                placeholder: t(\"personal-info.general-info.job\"),\n                onChangeSelect: value => {\n                  formik.setFieldValue(\"career\", value.map(item => item));\n                }\n              }), /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                label: t(\"personal-info.general-info.title\"),\n                placeholder: t(\"personal-info.general-info.title-placeholder\"),\n                type: \"text\",\n                required: true\n              }, formik.getFieldProps(\"title\")), formik.getFieldMeta(\"title\"))), /*#__PURE__*/_jsx(TextArea, _objectSpread(_objectSpread({\n                label: t(\"personal-info.general-info.bio\"),\n                placeholder: t(\"personal-info.general-info.bio-placeholder\"),\n                type: \"text\",\n                rows: 5\n              }, formik.getFieldProps(\"bio\")), formik.getFieldMeta(\"bio\"))), /*#__PURE__*/_jsxs(ButtonWrapper, {\n                children: [/*#__PURE__*/_jsx(Button, {\n                  type: \"button\",\n                  onClick: handleCloseDialog,\n                  className: \"w-1/2 border border-solid border-primary\",\n                  children: t(\"common:dialog.cancel\")\n                }), /*#__PURE__*/_jsx(Button, {\n                  loading: isLoading,\n                  primary: true,\n                  type: \"submit\",\n                  className: \"w-1/2\",\n                  children: !isLoading && t(\"common:dialog.save\")\n                })]\n              })]\n            });\n          }\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditGeneralInfoDialog;","map":null,"metadata":{},"sourceType":"module"}