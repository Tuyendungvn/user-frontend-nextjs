{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport * as services from \"@services/scheduleInterview\";\nimport { actionSuccess, setLoading } from \"@redux/actions/common\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { getAllScheduleInterviewSuccess, getScheduleInterviewByIdSuccess } from \"@redux/actions/scheduleInterview\";\nexport function* getAllScheduleInterviewSaga(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.getAllScheduleInterview, variables);\n  yield put(setLoading(false));\n  const {\n    getAllScheduleInterview: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getAllScheduleInterviewSuccess(result));\n  }\n}\nexport function* getScheduleInterviewById(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.getScheduleInterviewById, variables);\n  yield put(setLoading(false));\n  const {\n    getScheduleInterviewById: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getScheduleInterviewByIdSuccess(result));\n  }\n}\nexport function* updateScheduleInterview(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.updateScheduleInterview, variables);\n  yield put(setLoading(false));\n  const {\n    updateScheduleInterview: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n    showNotification({\n      type: \"success\",\n      title: \"Thông báo\",\n      message: \"Cập nhật lịch phỏng vấn thành công\"\n    });\n  } else {\n    showNotification({\n      type: \"error\",\n      title: \"Thông báo\",\n      message: \"Cập nhật thất bại\"\n    });\n  }\n}\nexport function* createScheduleInterview(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.createScheduleInterview, variables);\n  const {\n    createScheduleInterview: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(actionSuccess());\n    showNotification({\n      type: \"success\",\n      title: \"Thông báo\",\n      message: \"Tạo lịch phỏng vấn thành công\"\n    });\n  } else {\n    showNotification({\n      type: \"error\",\n      title: \"Thông báo\",\n      message: \"Tạo lịch phỏng vấn thất bại\"\n    });\n  }\n}\nexport function* confirmTheScheduleInterview(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.confirmTheScheduleInterview, variables);\n  yield put(setLoading(false));\n  const {\n    confirmTheScheduleInterview: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n    showNotification({\n      type: \"success\",\n      title: \"Thông báo\",\n      message: \"Xác nhận tham gia phỏng vấn thành công!\"\n    });\n  }\n}\nexport function* cancelTheScheduleInterview(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.cancelTheScheduleInterview, variables);\n  yield put(setLoading(false));\n  const {\n    cancelTheScheduleInterview: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n    showNotification({\n      type: \"success\",\n      title: \"Thông báo\",\n      message: \"Bạn đã từ chối lịch mời tham gia phỏng vấn!\"\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}