{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useTranslation } from \"react-i18next\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { isEmpty } from \"lodash\";\nimport Button from \"@designs/Button\";\nimport InputBox from \"@designs/Input\";\nimport { Container, Form, Title, Wrapper } from \"./style\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLoading } from \"@redux/actions/common\";\nimport { PATH } from \"@routes\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { updateUserPassword } from \"@services/auth\";\nimport { removeCurrentUser } from \"@redux/actions/auth\";\nimport { errorMessageGraphql } from \"@common/functions/printError\";\nimport { useEffect, useState } from \"react\";\n\nconst ChangePassword = () => {\n  const dispatch = useDispatch();\n  const {\n    t\n  } = useTranslation([\"common\", \"job-management\"]);\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    0: enableChange,\n    1: setEnableChange\n  } = useState(true);\n  const redirect = useRedirect();\n  const userInfo = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userInfo) || {};\n  useEffect(() => {\n    if (!isEmpty(userInfo)) {\n      const provider = userInfo === null || userInfo === void 0 ? void 0 : userInfo.provider;\n\n      if (provider === \"facebook\" || provider === \"google\") {\n        setEnableChange(false);\n      }\n    }\n  }, [userInfo]);\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: Yup.object({\n      oldPassword: Yup.string().required(t(\"password.required\")),\n      newPassword: Yup.string().required(t(\"password.required\")),\n      confirmPassword: Yup.string().required(t(\"password.required\"))\n    }),\n    onSubmit: values => {\n      const newPass = values.newPassword;\n      const confirmPass = values.confirmPassword;\n\n      if (newPass === confirmPass) {\n        const payload = {\n          updatePasswordInput: {\n            id: userInfo === null || userInfo === void 0 ? void 0 : userInfo._id,\n            oldPassword: values.oldPassword,\n            newPassword: values.newPassword\n          }\n        };\n        updateUserPasswordAPI(payload);\n      } else {\n        showNotification({\n          type: \"error\",\n          title: t(\"common:notification.password-not-match\")\n        });\n      }\n    }\n  });\n\n  const updateUserPasswordAPI = async payload => {\n    try {\n      dispatch(setLoading(true));\n      const response = await updateUserPassword(payload);\n      dispatch(setLoading(false));\n      const {\n        updateUserPassword: result\n      } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n      if (result) {\n        const redirectPath = PATH.LOGIN;\n        showNotification({\n          type: \"success\",\n          title: t(\"common:notification.update-password-success\")\n        });\n        redirect(redirectPath);\n        dispatch(removeCurrentUser());\n      } else {\n        const errorMessage = errorMessageGraphql(response);\n        showNotification({\n          type: \"error\",\n          title: t(\"common:notification.update-password-failed\"),\n          message: errorMessage\n        });\n      }\n    } catch (error) {\n      showNotification({\n        type: \"error\",\n        title: t(\"common:notification.update-password-failed\"),\n        message: error\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      children: t(\"header.change-password\")\n    }), /*#__PURE__*/_jsxs(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.old-password\"),\n          id: \"oldPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"oldPassword\")), formik.getFieldMeta(\"oldPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.new-password\"),\n          id: \"newPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"newPassword\")), formik.getFieldMeta(\"newPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.re-enter-newpassword\"),\n          id: \"confirmPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"confirmPassword\")), formik.getFieldMeta(\"confirmPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(Button, {\n          className: \"px-5 py-1.5\",\n          primary: true,\n          type: \"submit\",\n          children: t(\"common:update\")\n        })\n      })]\n    })]\n  });\n};\n\nexport default ChangePassword;","map":null,"metadata":{},"sourceType":"module"}