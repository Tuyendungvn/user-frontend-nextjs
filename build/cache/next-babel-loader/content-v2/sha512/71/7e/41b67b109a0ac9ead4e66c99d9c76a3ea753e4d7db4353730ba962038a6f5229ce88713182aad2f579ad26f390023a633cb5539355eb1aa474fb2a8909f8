{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport RelatedJob from \"@components/RelatedJob\";\nimport Table from \"@designs/Table\";\nimport { SVG } from \"@designs/SVG\";\nimport { Container, EmptyJob, Detail, Text, Title, WrapTable } from \"./style\";\nimport { getBestRecruitment } from \"@redux/actions/recruitment\";\nimport { getRecordByUserId } from \"@redux/actions/record\";\nimport { getAllCompany } from \"@redux/actions/company\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { PATH } from \"@routes\";\nconst SIZE_PER_PAGE = 5;\n\nconst EmployerViewProfile = () => {\n  const redirect = useRedirect();\n  const {\n    record\n  } = useSelector(state => state.record);\n  const {\n    bestRecruitment: {\n      results: bestRecruitment\n    }\n  } = useSelector(state => state.recruitment);\n  const {\n    allCompany: {\n      results = [],\n      loading = true\n    }\n  } = useSelector(state => state.company);\n  const employerSeenRecord = (record === null || record === void 0 ? void 0 : record.employerSeenRecord) || [];\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    t\n  } = useTranslation([\"job-management\"]);\n  const dispatch = useDispatch();\n  const query = useRouter().query;\n  const {\n    page: _page = 1\n  } = query;\n  const {\n    0: companyId,\n    1: setCompanyId\n  } = useState();\n  const page = Number(_page);\n  useEffect(() => {\n    getBestRecruitmentAPI();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(currentUser)) {\n      getAllCompanyAPI();\n      getRecordByUserIdAPI();\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (companyId) {\n      let slug = \"\";\n      results === null || results === void 0 ? void 0 : results.map(company => {\n        if ((company === null || company === void 0 ? void 0 : company._id) === companyId) {\n          slug = company === null || company === void 0 ? void 0 : company.slug;\n        }\n      });\n\n      if (slug) {\n        redirect(PATH.COMPANY_DETAIL, {\n          slug\n        });\n      }\n    }\n  }, [companyId]);\n\n  const getAllCompanyAPI = () => {\n    dispatch(getAllCompany({}));\n  };\n\n  const getRecordByUserIdAPI = () => {\n    var _currentUser$userInfo;\n\n    const payload = {\n      userId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$userInfo = currentUser.userInfo) === null || _currentUser$userInfo === void 0 ? void 0 : _currentUser$userInfo._id\n    };\n    dispatch(getRecordByUserId(payload));\n  };\n\n  const getBestRecruitmentAPI = () => {\n    const payload = {\n      size: 6\n    };\n    dispatch(getBestRecruitment(payload));\n  };\n\n  const renderDetail = record => {\n    return /*#__PURE__*/_jsx(Detail, {\n      onClick: () => {\n        var _record$employer, _record$employer$comp;\n\n        return setCompanyId(record === null || record === void 0 ? void 0 : (_record$employer = record.employer) === null || _record$employer === void 0 ? void 0 : (_record$employer$comp = _record$employer.company) === null || _record$employer$comp === void 0 ? void 0 : _record$employer$comp._id);\n      },\n      children: t(\"view-detail\")\n    });\n  };\n\n  const handleChangePage = newPage => {\n    redirect(PATH.JOB_MANAGEMENT_EMPLOYER_VIEW_PROFILE, undefined, {\n      page: newPage\n    });\n  };\n\n  const Column = useMemo(() => [{\n    text: \"STT\",\n    formatter: (_, record, index) => index\n  }, {\n    text: t(\"name-of-employer\"),\n    dataField: \"employer.displayName\"\n  }, {\n    text: t(\"day-seen\"),\n    dataField: \"daySeen\",\n    formatter: (_, record) => dayjs(record.date).format(\"DD-MM-YYYY\")\n  }, {\n    text: t(\"time-seen\"),\n    dataField: \"views\"\n  }, {\n    text: t(\"infomation-of-employer\"),\n    formatter: (_, record) => renderDetail(record)\n  }], [page]);\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsxs(WrapTable, {\n      children: [/*#__PURE__*/_jsx(Title, {\n        children: t(\"employer-view-profile\")\n      }), employerSeenRecord.length > 0 ? /*#__PURE__*/_jsx(Table, {\n        columns: Column,\n        data: employerSeenRecord,\n        page: page,\n        totalSize: employerSeenRecord === null || employerSeenRecord === void 0 ? void 0 : employerSeenRecord.length,\n        sizePerPage: SIZE_PER_PAGE,\n        className: \"mb-2\",\n        onPageChange: handleChangePage\n      }) : /*#__PURE__*/_jsxs(EmptyJob, {\n        children: [/*#__PURE__*/_jsx(SVG, {\n          name: \"job-management/manager-image\",\n          width: 148,\n          height: 148\n        }), /*#__PURE__*/_jsx(Text, {\n          children: t(\"notification-empty-seen\")\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(RelatedJob, {\n      bestRecruitment: bestRecruitment,\n      title: t(\"favorite-job\")\n    })]\n  });\n};\n\nexport default EmployerViewProfile;","map":null,"metadata":{},"sourceType":"module"}