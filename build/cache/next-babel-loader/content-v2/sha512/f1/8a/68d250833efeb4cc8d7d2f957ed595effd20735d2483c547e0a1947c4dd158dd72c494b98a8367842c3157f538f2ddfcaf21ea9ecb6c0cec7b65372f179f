{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { PATH } from \"@routes\";\nimport SearchBox from \"@components/SearchBox\";\nimport { Container, Wrapper } from \"./styles\";\nimport { getAllCompany } from \"@services/company\";\nimport Link from \"@designs/Link\";\n\nconst SearchWithProvince = props => {\n  const redirect = useRedirect();\n  const fullQuery = useRouter().query;\n  const query = removeParams(fullQuery);\n  const {\n    k = \"\"\n  } = query;\n\n  const handleSearch = (text, province) => {\n    if (text && !province) {\n      redirect(PATH.COMPANY_RESULT, fullQuery, {\n        k: encodeURIComponent(text)\n      });\n    } else if (text === \"\" && province) {\n      redirect(PATH.COMPANY_RESULT, fullQuery, {\n        p: encodeURIComponent(province)\n      });\n    } else if (text && province) {\n      redirect(PATH.COMPANY_RESULT, fullQuery, {\n        k: encodeURIComponent(text),\n        p: encodeURIComponent(province)\n      });\n    } else {\n      redirect(PATH.COMPANY_RESULT, fullQuery);\n    }\n  };\n\n  const fetchAPiSearch = async (searchKeywords) => {\n    const payload = {\n      keyword: searchKeywords\n    };\n    const response = await getAllCompany(payload);\n    const {\n      getCompanies: result\n    } = (response === null || response === void 0 ? void 0 : response.data) || {};\n    return (result === null || result === void 0 ? void 0 : result.results) || [];\n  };\n\n  const renderDropdownItem = company => {\n    return /*#__PURE__*/_jsx(Link, {\n      routeName: PATH.COMPANY_DETAIL,\n      params: {\n        slug: company === null || company === void 0 ? void 0 : company.slug\n      },\n      className: \"p-1\",\n      children: company === null || company === void 0 ? void 0 : company.name\n    });\n  };\n\n  const handleSelect = company => {\n    redirect(PATH.COMPANY_DETAIL, {\n      slug: company === null || company === void 0 ? void 0 : company.slug\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Wrapper, {\n    children: /*#__PURE__*/_jsx(Container, {\n      className: \"container\",\n      children: /*#__PURE__*/_jsx(SearchBox, {\n        onFetchData: fetchAPiSearch,\n        onSubmit: handleSearch,\n        renderDropdownItem: renderDropdownItem,\n        onSelect: handleSelect,\n        value: decodeURIComponent(k)\n      })\n    })\n  });\n};\n\nexport default SearchWithProvince;\n\nconst removeParams = _query => {\n  const newQuery = _objectSpread({}, _query);\n\n  return newQuery || {};\n};","map":null,"metadata":{},"sourceType":"module"}