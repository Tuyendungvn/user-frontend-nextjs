{"ast":null,"code":"import propertyApi from \"@common/config/graphql\";\nimport axios from \"axios\";\nimport { getToken } from \"./auth\";\n\nconst printErrorOfGraphQLFromServer = error => {\n  var _error$networkError, _error$networkError$r, _error$networkError$r2;\n\n  let errorMessage = error === null || error === void 0 ? void 0 : (_error$networkError = error.networkError) === null || _error$networkError === void 0 ? void 0 : (_error$networkError$r = _error$networkError.result) === null || _error$networkError$r === void 0 ? void 0 : (_error$networkError$r2 = _error$networkError$r.errors[0]) === null || _error$networkError$r2 === void 0 ? void 0 : _error$networkError$r2.message;\n\n  if (!errorMessage) {\n    errorMessage = error === null || error === void 0 ? void 0 : error.message;\n  }\n\n  console.error(\"\\x1b[31m\", `⚠️ [GraphQL Error] ${errorMessage}`, \"\\x1b[37m\");\n};\n\nconst graphQLCommon = async (query, variables) => {\n  try {\n    const response = await propertyApi.query({\n      query,\n      variables,\n      context: {\n        headers: {\n          Authorization: `Bearer ${getToken()}`\n        }\n      }\n    });\n    const errors = (response === null || response === void 0 ? void 0 : response.errors) || [];\n    if (errors.length > 0) printErrorOfGraphQLFromServer(errors[0]);\n    return response;\n  } catch (error) {\n    printErrorOfGraphQLFromServer(error);\n    return error;\n  }\n};\n\nconst axiosJSON = options => {\n  return axios(options).then(res => res).catch(error => error);\n};\n\nexport { graphQLCommon, axiosJSON };","map":null,"metadata":{},"sourceType":"module"}