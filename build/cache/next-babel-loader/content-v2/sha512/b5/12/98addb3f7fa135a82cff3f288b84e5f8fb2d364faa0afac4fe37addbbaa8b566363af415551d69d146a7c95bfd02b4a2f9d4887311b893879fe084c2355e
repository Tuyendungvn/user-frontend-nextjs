{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @note read the document in /src/docs/designs/Table.md.\n * You should read it in gitlab.\n */\nimport React, { memo } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport Pagination from \"@components/Pagination\";\n\nconst TableCustom = ({\n  className = \"\",\n  data,\n  columns,\n  headerElement,\n  sizePerPage = 10,\n  onPageChange,\n  page = 1,\n  isRemote = false,\n  totalSize = 0,\n  onClickRow,\n  onTableChange\n}) => {\n  const handleChangePage = nextPage => {\n    onPageChange && onPageChange(nextPage + 1);\n  };\n\n  const handleTableChange = (type, {\n    page,\n    sizePerPage\n  }) => {\n    const newPage = page - 1;\n    onTableChange && onTableChange(newPage);\n  };\n\n  const handleEmptyData = () => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"empty-data\"\n    });\n  };\n\n  const rowEvents = {\n    onClick: rowIndex => {\n      onClickRow && onClickRow(rowIndex);\n    }\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: `custom-table__container ${className}`,\n      children: /*#__PURE__*/_jsx(ToolkitProvider, {\n        bootstrap4: true,\n        keyField: \"id\",\n        data: data,\n        columns: columns,\n        search: true,\n        children: props => {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              children: headerElement\n            }), /*#__PURE__*/_jsx(BootstrapTable, _objectSpread(_objectSpread({}, props.baseProps), {}, {\n              bordered: false,\n              wrapperClasses: \"table-responsive col-span-12 overflow-auto lg:overflow-visible\",\n              noDataIndication: handleEmptyData,\n              rowEvents: rowEvents,\n              remote: isRemote && {\n                pagination: true,\n                filter: false,\n                sort: false\n              },\n              pagination: paginationFactory({\n                hideSizePerPage: true,\n                custom: true,\n                totalSize,\n                sizePerPage,\n                page\n              }),\n              onTableChange: handleTableChange\n            }))]\n          });\n        }\n      })\n    }), /*#__PURE__*/_jsx(Pagination, {\n      page: page - 1,\n      totalSize: totalSize,\n      sizePerPage: sizePerPage,\n      onPageChange: handleChangePage\n    })]\n  });\n};\n\nexport default /*#__PURE__*/memo(TableCustom);","map":null,"metadata":{},"sourceType":"module"}