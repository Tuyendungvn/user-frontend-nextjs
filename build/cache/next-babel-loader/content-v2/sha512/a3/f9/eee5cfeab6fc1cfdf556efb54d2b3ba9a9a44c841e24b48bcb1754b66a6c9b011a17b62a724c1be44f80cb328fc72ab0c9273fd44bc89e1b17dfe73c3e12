{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useTranslation } from \"next-i18next\";\nimport { paths } from \"@routes/index\";\nimport path from \"path\";\nimport { useEffect, useRef } from \"react\";\n\nvar Link = function Link(props) {\n  var _currentPath$locale;\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n;\n\n  var currentLanguage = i18n.language;\n  var routeName = props.routeName,\n      _props$disableShadow = props.disableShadow,\n      disableShadow = _props$disableShadow === void 0 ? false : _props$disableShadow,\n      _props$locale = props.locale,\n      locale = _props$locale === void 0 ? currentLanguage : _props$locale,\n      children = props.children,\n      _props$className = props.className,\n      className = _props$className === void 0 ? \"\" : _props$className,\n      _props$query = props.query,\n      query = _props$query === void 0 ? {} : _props$query,\n      _props$params = props.params,\n      params = _props$params === void 0 ? {} : _props$params;\n  var linkRef = useRef(null);\n  var currentPath = paths.find(function (item) {\n    return item.name === routeName;\n  });\n\n  if (!currentPath) {\n    console.error(\"[Link Error] Don't find any route which has name is \\\"\".concat(routeName, \"\\\"\"));\n  }\n\n  var href = path.join(\"/\".concat(currentPath === null || currentPath === void 0 ? void 0 : (_currentPath$locale = currentPath.locale) === null || _currentPath$locale === void 0 ? void 0 : _currentPath$locale[locale]));\n\n  if (Object.keys(params).length) {\n    for (var key in params) {\n      var value = params[key];\n      href = href.replace(\"/:\".concat(key), \"/\".concat(value));\n    }\n  } // incase we replace all params but it still has /:abc in url,\n  // replace it by -.\n\n\n  href = href.replace(/(\\/:)\\w+/g, \"/-\");\n\n  if (Object.keys(query).length) {\n    var queryString = renderQueryStringFromObject(query);\n    href += \"?\".concat(queryString);\n  }\n\n  useEffect(function () {\n    if (href) {\n      linkRef.current.href = href;\n    }\n  }, [href]);\n  return /*#__PURE__*/_jsx(\"a\", {\n    ref: linkRef,\n    href: href,\n    className: \"block cursor-pointer \".concat(className),\n    children: children\n  });\n};\n\nexport default Link;\n\nvar renderQueryStringFromObject = function renderQueryStringFromObject(query) {\n  var _URLSearchParams;\n\n  return (_URLSearchParams = new URLSearchParams(query)) === null || _URLSearchParams === void 0 ? void 0 : _URLSearchParams.toString();\n};","map":null,"metadata":{},"sourceType":"module"}