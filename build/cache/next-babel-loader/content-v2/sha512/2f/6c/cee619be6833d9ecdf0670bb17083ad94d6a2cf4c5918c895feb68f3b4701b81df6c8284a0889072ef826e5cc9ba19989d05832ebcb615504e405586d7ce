{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Select, { components } from \"react-select\";\nimport { SVG } from \"@designs/SVG\";\nimport { customStyles, Container, SelectWrapper, Label, Required, Error, LimitSelected } from \"./styles\";\n\nconst MultiSelect = props => {\n  const {\n    label,\n    touched,\n    required,\n    error,\n    onChangeSelect,\n    options,\n    placeholder = \"\",\n    id,\n    instanceId,\n    isMulti,\n    initValue,\n    defaultValue,\n    onBlurInput,\n    optionLabel = \"name\",\n    optionValue = \"_id\",\n    limit,\n    limitText = \"\"\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"label\", \"touched\", \"required\", \"error\", \"onChangeSelect\", \"options\", \"placeholder\", \"id\", \"instanceId\", \"isMulti\", \"initValue\", \"defaultValue\", \"onBlurInput\", \"optionLabel\", \"optionValue\", \"limit\", \"limitText\"]);\n\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  useEffect(() => {\n    if (touched && error) {\n      !isError && setIsError(true);\n    } else {\n      isError && setIsError(false);\n    }\n  }, [touched, error]);\n\n  const handleChange = value => {\n    onChangeSelect && onChangeSelect(value);\n  };\n\n  const Menu = props => {\n    const optionSelectedLength = props.getValue().length || 0;\n\n    if (limit) {\n      return /*#__PURE__*/_jsx(components.Menu, _objectSpread(_objectSpread({}, props), {}, {\n        children: optionSelectedLength < limit ? props.children : /*#__PURE__*/_jsx(LimitSelected, {\n          children: limitText\n        })\n      }));\n    }\n\n    return /*#__PURE__*/_jsx(components.Menu, _objectSpread(_objectSpread({}, props), {}, {\n      children: props.children\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [label ? /*#__PURE__*/_jsxs(Label, {\n      children: [label, required && /*#__PURE__*/_jsx(Required, {\n        children: \"(*)\"\n      })]\n    }) : null, /*#__PURE__*/_jsx(SelectWrapper, {\n      children: /*#__PURE__*/_jsx(Select, _objectSpread({\n        error: isError,\n        styles: customStyles,\n        id: id,\n        instanceId: instanceId,\n        options: options,\n        placeholder: placeholder,\n        isMulti: isMulti,\n        onChange: handleChange,\n        value: initValue,\n        defaultValue: defaultValue,\n        components: {\n          Menu\n        },\n        getOptionLabel: x => x[optionLabel],\n        getOptionValue: x => x[optionValue]\n      }, restProps))\n    }), error && touched && /*#__PURE__*/_jsxs(Error, {\n      children: [/*#__PURE__*/_jsx(SVG, {\n        name: \"common/error\",\n        width: 16,\n        height: 16,\n        className: \"mr-0.5 inline-block\"\n      }), error]\n    })]\n  });\n};\n\nexport default MultiSelect;","map":null,"metadata":{},"sourceType":"module"}