{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isEmpty } from \"lodash\";\nimport Dialog from \"@components/Dialog\";\nimport { renderCareer } from \"@common/functions\";\nimport { Button, ButtonWrapper, ButtonDialog, ButtonDialogWrapper, Career, CompanyCardContainer, CompanyCardWrapper, Content, DialogContainer, DialogContent, DialogTitle, Img, Link, Location, Logo, Title } from \"./styles\";\nimport { PATH } from \"@routes\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createRequestReview, getAllRequestReview } from \"@redux/actions/requestReview\";\nimport { refreshToken } from \"@redux/actions/auth\";\nimport { resetAction } from \"@redux/actions/common\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { createNotify } from \"@redux/actions/notification\";\nvar skeletonImage = \"/img/skeleton/default-small.jpg\";\n\nvar CompanyCard = function CompanyCard(_ref) {\n  var company = _ref.company,\n      _ref$request = _ref.request,\n      request = _ref$request === void 0 ? true : _ref$request,\n      _ref$companyLocation = _ref.companyLocation,\n      companyLocation = _ref$companyLocation === void 0 ? \"\" : _ref$companyLocation;\n\n  var _useTranslation = useTranslation([\"company\"]),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var redirect = useRedirect();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      isRequest = _useState2[0],\n      setIsRequest = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      currentUser = _useSelector.currentUser;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.actions;\n  }),\n      actionSuccess = _useSelector2.actionSuccess;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.requestReview;\n  }),\n      _useSelector3$request = _useSelector3.requestReviewList.results,\n      requestReviewList = _useSelector3$request === void 0 ? [] : _useSelector3$request;\n\n  var userInfo = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userInfo) || {};\n  var logo = company.logo,\n      name = company.name,\n      career = company.career,\n      province = company.province;\n  var careerArray = career === null || career === void 0 ? void 0 : career.map(function (item) {\n    return item === null || item === void 0 ? void 0 : item.name;\n  });\n  var careerString = renderCareer(careerArray);\n  var locationArray = province === null || province === void 0 ? void 0 : province.map(function (item) {\n    return item === null || item === void 0 ? void 0 : item.name;\n  });\n  var locationString = renderCareer(locationArray);\n  useEffect(function () {\n    if (!isEmpty(currentUser)) {\n      getRequestedAPI();\n    }\n  }, [currentUser]);\n  useEffect(function () {\n    if ((requestReviewList === null || requestReviewList === void 0 ? void 0 : requestReviewList.length) > 0) {\n      checkRequested();\n    }\n  }, [requestReviewList]);\n  useEffect(function () {\n    if (actionSuccess) {\n      dispatch(resetAction());\n      dispatch(refreshToken());\n      checkRequested();\n    }\n  }, [actionSuccess]);\n\n  var handleRequest = function handleRequest() {\n    var _company$user2;\n\n    if (isEmpty(currentUser)) {\n      redirect(PATH.LOGIN);\n    } else {\n      if (company !== null && company !== void 0 && company._id) {\n        var _company$user;\n\n        dispatch(createRequestReview({\n          createRequestReviewInput: {\n            candidate: userInfo === null || userInfo === void 0 ? void 0 : userInfo._id,\n            employer: company === null || company === void 0 ? void 0 : (_company$user = company.user) === null || _company$user === void 0 ? void 0 : _company$user._id,\n            status: \"waiting_for_review\"\n          }\n        }));\n      }\n    }\n\n    setOpen(false);\n    var payload = {\n      notifyCreateInput: {\n        user: company === null || company === void 0 ? void 0 : (_company$user2 = company.user) === null || _company$user2 === void 0 ? void 0 : _company$user2._id,\n        name: \"Required\",\n        company: company === null || company === void 0 ? void 0 : company._id,\n        description: \"\".concat(userInfo === null || userInfo === void 0 ? void 0 : userInfo.displayName, \" \\u0111\\xE3 y\\xEAu c\\u1EA7u b\\u1EA1n \\u0111\\xE1nh gi\\xE1 h\\u1ED3 s\\u01A1 c\\u1EE7a h\\u1ECD.\")\n      }\n    };\n    dispatch(createNotify(payload));\n  };\n\n  var getRequestedAPI = function getRequestedAPI() {\n    var _company$user3;\n\n    var payload = {\n      filterRequestReview: {\n        candidate: userInfo === null || userInfo === void 0 ? void 0 : userInfo._id,\n        employer: company === null || company === void 0 ? void 0 : (_company$user3 = company.user) === null || _company$user3 === void 0 ? void 0 : _company$user3._id\n      }\n    };\n    dispatch(getAllRequestReview(payload));\n  };\n\n  var checkRequested = function checkRequested() {\n    var listRequestId = requestReviewList === null || requestReviewList === void 0 ? void 0 : requestReviewList.map(function (item) {\n      var _item$candidate;\n\n      return item === null || item === void 0 ? void 0 : (_item$candidate = item.candidate) === null || _item$candidate === void 0 ? void 0 : _item$candidate._id;\n    });\n    var listCompanyRequestId = requestReviewList === null || requestReviewList === void 0 ? void 0 : requestReviewList.map(function (item) {\n      var _item$employer, _item$employer$compan;\n\n      return item === null || item === void 0 ? void 0 : (_item$employer = item.employer) === null || _item$employer === void 0 ? void 0 : (_item$employer$compan = _item$employer.company) === null || _item$employer$compan === void 0 ? void 0 : _item$employer$compan._id;\n    });\n\n    if (listRequestId.includes(userInfo === null || userInfo === void 0 ? void 0 : userInfo._id) && listCompanyRequestId.includes(company === null || company === void 0 ? void 0 : company._id)) {\n      setIsRequest(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(CompanyCardWrapper, {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxs(CompanyCardContainer, {\n      children: [/*#__PURE__*/_jsx(Logo, {\n        children: /*#__PURE__*/_jsx(Img, {\n          src: (logo === null || logo === void 0 ? void 0 : logo.small) || (logo === null || logo === void 0 ? void 0 : logo[\"default\"]) || (logo === null || logo === void 0 ? void 0 : logo.medium) || skeletonImage,\n          alt: name,\n          loading: \"lazy\"\n        })\n      }), /*#__PURE__*/_jsxs(Content, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: name\n        }), companyLocation && /*#__PURE__*/_jsx(Location, {\n          children: companyLocation\n        }), !companyLocation && (province === null || province === void 0 ? void 0 : province.length) > 0 && /*#__PURE__*/_jsx(Location, {\n          children: locationString\n        }), (career === null || career === void 0 ? void 0 : career.length) > 0 && /*#__PURE__*/_jsx(Career, {\n          children: careerString\n        })]\n      }), request && /*#__PURE__*/_jsxs(ButtonWrapper, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: function onClick() {\n            return setOpen(true);\n          },\n          style: {\n            opacity: isRequest ? 0.5 : 1,\n            pointerEvents: isRequest ? \"none\" : \"initial\"\n          },\n          children: isEmpty(currentUser) ? t(\"required-rating-title\") : isRequest ? t(\"requested\") : t(\"required-rating-title\")\n        }), /*#__PURE__*/_jsx(Dialog, {\n          isOpen: open,\n          onClose: function onClose() {\n            return setOpen(false);\n          },\n          className: \"z-50 rounded-none w-max\",\n          children: /*#__PURE__*/_jsxs(DialogContainer, {\n            children: [/*#__PURE__*/_jsx(DialogTitle, {\n              children: t(\"required-rating-title\")\n            }), /*#__PURE__*/_jsx(DialogContent, {\n              children: !isEmpty(currentUser) ? t(\"required-rating-content\").replace(\"$companyName\", String(name)) : t(\"no-login\")\n            }), /*#__PURE__*/_jsxs(ButtonDialogWrapper, {\n              children: [/*#__PURE__*/_jsx(ButtonDialog, {\n                onClick: function onClick() {\n                  return setOpen(false);\n                },\n                children: t(\"cancel\")\n              }), Object.keys(userInfo).length > 0 ? /*#__PURE__*/_jsx(ButtonDialog, {\n                isAccept: true,\n                onClick: handleRequest,\n                children: t(\"accept\")\n              }) : /*#__PURE__*/_jsx(Link, {\n                routeName: PATH.LOGIN,\n                children: t(\"accept\")\n              })]\n            })]\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default CompanyCard;","map":null,"metadata":{},"sourceType":"module"}