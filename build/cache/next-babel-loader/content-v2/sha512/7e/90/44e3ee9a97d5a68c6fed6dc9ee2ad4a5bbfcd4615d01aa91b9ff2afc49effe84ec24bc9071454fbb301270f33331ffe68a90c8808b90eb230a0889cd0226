{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { PATH } from \"@routes\";\nimport SearchBox from \"@components/SearchBoxV2\";\nimport { Container, Wrapper } from \"./styles\";\n\nconst SearchWithProvince = props => {\n  const {\n    0: historySearch,\n    1: setHistorySearch\n  } = useState([]);\n  const redirect = useRedirect();\n  const fullQuery = useRouter().query;\n  const query = removeParams(fullQuery);\n  const {\n    k = \"\"\n  } = query;\n\n  const handleSubmitSearch = (text, province) => {\n    //add local storage\n    if (text) {\n      var _newList$map;\n\n      const newList = JSON.parse(localStorage.getItem(\"historySearch\")) || [];\n      const isExit = newList === null || newList === void 0 ? void 0 : (_newList$map = newList.map(text => text.toLowerCase())) === null || _newList$map === void 0 ? void 0 : _newList$map.includes(text.toLowerCase());\n\n      if (!isExit) {\n        newList.push(text);\n        localStorage.setItem(\"historySearch\", JSON.stringify(newList));\n        setHistorySearch(newList);\n      }\n    }\n\n    if (text !== \"\" && !province) {\n      redirect(PATH.JOB, fullQuery, {\n        k: encodeURIComponent(text)\n      });\n    } else if (text === \"\" && province) {\n      redirect(PATH.JOB, fullQuery, {\n        province: encodeURIComponent(province)\n      });\n    } else if (text !== \"\" && province) {\n      redirect(PATH.JOB, fullQuery, {\n        k: encodeURIComponent(text),\n        province: encodeURIComponent(province)\n      });\n    } else {\n      redirect(PATH.JOB);\n    }\n  };\n\n  useEffect(() => {\n    if (true) return;\n    const history = JSON.parse(localStorage.getItem(\"historySearch\")) || [];\n\n    if ((history === null || history === void 0 ? void 0 : history.length) > 0) {\n      setHistorySearch(history);\n    }\n  }, []);\n  return /*#__PURE__*/_jsx(Wrapper, {\n    children: /*#__PURE__*/_jsx(Container, {\n      className: \"container\",\n      children: /*#__PURE__*/_jsx(SearchBox, {\n        listSearchCurrent: historySearch,\n        onSubmit: handleSubmitSearch,\n        hasProvince: true,\n        value: decodeURIComponent(k)\n      })\n    })\n  });\n};\n\nexport default SearchWithProvince;\n\nconst removeParams = _query => {\n  const newQuery = _objectSpread({}, _query);\n\n  delete newQuery.province;\n  delete newQuery.career;\n  delete newQuery.salary;\n  delete newQuery.level;\n  delete newQuery.type;\n  return newQuery || {};\n};","map":null,"metadata":{},"sourceType":"module"}