{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    checkProfileUserExist\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\nquery\\n  {\\n    getAllUserHasPermissions(permissions:[\\\"ADMIN\\\",\\\"EMPLOYER\\\",\\\"CANDIDATE\\\",\\\"MANAGER\\\"], page: 0, size: 9999)\\n    {\\n      totalCount\\n      results{\\n        \", \"\\n     }\\n     \\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: String!) {\\n    getUserById(id: $id) {\\n      \", \"\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"apollo-boost\";\nimport { graphQLCommon } from \"@common/utils/api\";\nvar user = \"\\n    _id\\n      code\\n      title\\n      history\\n      identityCard\\n      province {\\n        _id\\n        name\\n        code\\n      }\\n      clientId\\n      provider\\n      birthday\\n      gender\\n      urlAvt {\\n        default\\n        small\\n        medium\\n      }\\n      firstName\\n      lastName\\n      displayName\\n      company {\\n        name\\n        code\\n      }\\n      username\\n      email\\n      phoneNumber\\n      appliedRecruitment {\\n        recruitment {\\n          _id\\n          slug\\n          name\\n          level {\\n            name\\n          }\\n          location {\\n            province {\\n              name\\n            }\\n          }\\n          createdAt\\n        }\\n        date\\n      }\\n      district {\\n        name\\n        code\\n        _id\\n      }\\n      ward {\\n        name\\n        code\\n        _id\\n      }\\n      street {\\n        name\\n        code\\n        _id\\n      }\\n      point\\n      postedJob\\n      subscribedCompany {\\n        name\\n      }\\n      seenCompany {\\n        name\\n      }\\n      seenRecruitment {\\n        name\\n      }\\n      savedRecruitment {\\n        _id\\n        slug\\n        name\\n        level {\\n          name\\n        }\\n        location {\\n          province {\\n            name\\n          }\\n        }\\n        createdAt\\n      }\\n      slug\\n      keywords\\n      language\\n      enabled\\n      career {\\n        _id\\n        name\\n      }\\n      isSeekingJob\\n\";\nvar GET_USER_PROFILE = gql(_templateObject(), user);\nexport var getUserProfile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLCommon(GET_USER_PROFILE, variables);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getUserProfile(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GET_ALL_USER = gql(_templateObject2(), user);\nexport var getAllUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphQLCommon(GET_ALL_USER, null);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAllUser() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar CHECK_USER_PROFILE_EXIST = gql(_templateObject3());\nexport var checkProfileUserExist = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLCommon(CHECK_USER_PROFILE_EXIST, null);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function checkProfileUserExist() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}