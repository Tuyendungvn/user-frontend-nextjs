{"ast":null,"code":"import { put, call } from \"redux-saga/effects\";\nimport { getWorkLocationByCompanySuccess, getWorkLocationSuccess } from \"@redux/actions/workLocation\";\nimport { setLoading, actionSuccess } from \"@redux/actions/common\";\nimport * as services from \"@services/workLocation\";\nexport function* getWorkLocation(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.getAllWorkLocation, variables);\n  yield put(setLoading(false));\n  const {\n    getAllWorkLocation: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(getWorkLocationSuccess(result));\n  }\n}\nexport function* getWorkLocationByCompany(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.getWorkLocationByCompany, variables);\n  yield put(setLoading(false));\n  const {\n    getWorkLocationByCompany: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(getWorkLocationByCompanySuccess(results));\n  }\n}\nexport function* createWorkLocation(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.createWorkLocation, variables);\n  yield put(setLoading(true));\n  const {\n    createWorkLocation: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}\nexport function* deleteWorkLocation(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.deleteWorkLocation, variables);\n  yield put(setLoading(true));\n  const {\n    deleteWorkLocation: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}\nexport function* updateWorkLocation(payload) {\n  const variables = payload.payload;\n  yield put(setLoading(true));\n  const response = yield call(services.updateWorkLocation, variables);\n  yield put(setLoading(true));\n  const {\n    updateWorkLocation: result\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (result) {\n    yield put(actionSuccess());\n  }\n}","map":null,"metadata":{},"sourceType":"module"}