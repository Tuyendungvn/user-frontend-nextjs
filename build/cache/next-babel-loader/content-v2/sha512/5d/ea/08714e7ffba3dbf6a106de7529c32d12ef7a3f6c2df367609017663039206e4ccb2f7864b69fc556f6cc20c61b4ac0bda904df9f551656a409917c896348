{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setOpenNotification } from \"@redux/actions/common\";\nimport { NotificationContainer, Icon } from \"./styles\";\nimport { useEffect, useState } from \"react\";\nimport { setSeenForNotify } from \"@redux/actions/notification\";\n\nvar Notification = function Notification(_ref) {\n  var children = _ref.children;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.actions;\n  }),\n      isOpenNotification = _useSelector.isOpenNotification;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.auth;\n  }),\n      currentUser = _useSelector2.currentUser;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.notifications;\n  }),\n      _useSelector3$notific = _useSelector3.notifications,\n      _useSelector3$notific2 = _useSelector3$notific.loading,\n      loading = _useSelector3$notific2 === void 0 ? true : _useSelector3$notific2,\n      _useSelector3$notific3 = _useSelector3$notific.getNotifyByUser,\n      result = _useSelector3$notific3 === void 0 ? [] : _useSelector3$notific3,\n      _useSelector3$notific4 = _useSelector3.notificationsSetting,\n      _useSelector3$notific5 = _useSelector3$notific4.loading,\n      loadingSetting = _useSelector3$notific5 === void 0 ? false : _useSelector3$notific5,\n      _useSelector3$notific6 = _useSelector3$notific4.results,\n      notifySetting = _useSelector3$notific6 === void 0 ? [] : _useSelector3$notific6;\n\n  var _useState = useState(false),\n      seen = _useState[0],\n      setSeen = _useState[1];\n\n  var handleClick = function handleClick() {\n    dispatch(setOpenNotification(!isOpenNotification));\n  };\n\n  useEffect(function () {\n    if (isOpenNotification) return;\n    var seenNotifyUser = false;\n    var seenNotifyAdmin = false;\n\n    if (!loading && (result === null || result === void 0 ? void 0 : result.length) > 0) {\n      //check notify of user\n      var stateSeenList = result === null || result === void 0 ? void 0 : result.map(function (notify) {\n        return notify.seen;\n      });\n      var existStateSeen = stateSeenList.includes(false); // = true, mean is not seen\n\n      if (existStateSeen) {\n        seenNotifyUser = false;\n      } else {\n        seenNotifyUser = true;\n      }\n    } else {\n      seenNotifyUser = true;\n    }\n\n    if ((notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.length) > 0) {\n      //check notify from admin\n      var listName = notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.map(function (notify) {\n        return notify === null || notify === void 0 ? void 0 : notify.name;\n      });\n      var notifies = localStorage.getItem(\"notifyAdmin\");\n      var lastNotify = listName === null || listName === void 0 ? void 0 : listName.pop();\n\n      if (!notifies) {\n        seenNotifyAdmin = false;\n        localStorage.setItem(\"notifyAdmin\", lastNotify);\n      }\n\n      if (lastNotify === notifies) {\n        seenNotifyAdmin = true;\n      }\n    } else {\n      seenNotifyAdmin = true;\n    }\n\n    setSeen(seenNotifyUser && seenNotifyAdmin);\n  }, [notifySetting]);\n  useEffect(function () {\n    if (isOpenNotification) {\n      if (seen) return;\n      var listName = notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.map(function (notify) {\n        return notify === null || notify === void 0 ? void 0 : notify.name;\n      });\n      var lastNotify = listName === null || listName === void 0 ? void 0 : listName.pop();\n      var notifies = localStorage.getItem(\"notifyAdmin\");\n\n      if (notifies) {\n        localStorage.setItem(\"notifyAdmin\", lastNotify);\n      }\n\n      var stateSeenList = result === null || result === void 0 ? void 0 : result.map(function (notify) {\n        return notify.seen;\n      });\n      var existStateSeen = stateSeenList.includes(false); // = true, mean is not seen\n\n      if (existStateSeen) {\n        var _currentUser$userInfo;\n\n        dispatch(setSeenForNotify({\n          userId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$userInfo = currentUser.userInfo) === null || _currentUser$userInfo === void 0 ? void 0 : _currentUser$userInfo._id\n        }));\n      }\n\n      setSeen(true);\n    }\n  }, [isOpenNotification]);\n  return /*#__PURE__*/_jsxs(NotificationContainer, {\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsx(Icon, {\n      name: \"common/menu/\".concat(!loading ? seen ? \"noNotify\" : \"haveNotify\" : \"noNotify\"),\n      width: 24,\n      height: 24\n    }), children]\n  });\n};\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}