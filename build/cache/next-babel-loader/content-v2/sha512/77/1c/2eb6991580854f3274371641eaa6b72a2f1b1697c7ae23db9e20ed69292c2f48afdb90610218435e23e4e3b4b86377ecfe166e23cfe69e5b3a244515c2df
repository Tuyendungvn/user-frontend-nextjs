{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setOpenNotification } from \"@redux/actions/common\";\nimport { NotificationContainer, Icon } from \"./styles\";\nimport { useEffect, useState } from \"react\";\nimport { setSeenForNotify } from \"@redux/actions/notification\";\n\nconst Notification = ({\n  children\n}) => {\n  const dispatch = useDispatch();\n  const {\n    isOpenNotification\n  } = useSelector(state => state.actions);\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    notifications: {\n      loading = true,\n      getNotifyByUser: result = []\n    },\n    notificationsSetting: {\n      loading: loadingSetting = false,\n      results: notifySetting = []\n    }\n  } = useSelector(state => state.notifications);\n  const {\n    0: seen,\n    1: setSeen\n  } = useState(false);\n\n  const handleClick = () => {\n    dispatch(setOpenNotification(!isOpenNotification));\n  };\n\n  useEffect(() => {\n    if (isOpenNotification) return;\n    let seenNotifyUser = false;\n    let seenNotifyAdmin = false;\n\n    if (!loading && (result === null || result === void 0 ? void 0 : result.length) > 0) {\n      //check notify of user\n      const stateSeenList = result === null || result === void 0 ? void 0 : result.map(notify => notify.seen);\n      const existStateSeen = stateSeenList.includes(false); // = true, mean is not seen\n\n      if (existStateSeen) {\n        seenNotifyUser = false;\n      } else {\n        seenNotifyUser = true;\n      }\n    } else {\n      seenNotifyUser = true;\n    }\n\n    if ((notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.length) > 0) {\n      //check notify from admin\n      const listName = notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.map(notify => notify === null || notify === void 0 ? void 0 : notify.name);\n      const notifies = localStorage.getItem(\"notifyAdmin\");\n      const lastNotify = listName === null || listName === void 0 ? void 0 : listName.pop();\n\n      if (!notifies) {\n        seenNotifyAdmin = false;\n        localStorage.setItem(\"notifyAdmin\", lastNotify);\n      }\n\n      if (lastNotify === notifies) {\n        seenNotifyAdmin = true;\n      }\n    } else {\n      seenNotifyAdmin = true;\n    }\n\n    setSeen(seenNotifyUser && seenNotifyAdmin);\n  }, [notifySetting]);\n  useEffect(() => {\n    if (isOpenNotification) {\n      if (seen) return;\n      const listName = notifySetting === null || notifySetting === void 0 ? void 0 : notifySetting.map(notify => notify === null || notify === void 0 ? void 0 : notify.name);\n      const lastNotify = listName === null || listName === void 0 ? void 0 : listName.pop();\n      const notifies = localStorage.getItem(\"notifyAdmin\");\n\n      if (notifies) {\n        localStorage.setItem(\"notifyAdmin\", lastNotify);\n      }\n\n      const stateSeenList = result === null || result === void 0 ? void 0 : result.map(notify => notify.seen);\n      const existStateSeen = stateSeenList.includes(false); // = true, mean is not seen\n\n      if (existStateSeen) {\n        var _currentUser$userInfo;\n\n        dispatch(setSeenForNotify({\n          userId: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$userInfo = currentUser.userInfo) === null || _currentUser$userInfo === void 0 ? void 0 : _currentUser$userInfo._id\n        }));\n      }\n\n      setSeen(true);\n    }\n  }, [isOpenNotification]);\n  return /*#__PURE__*/_jsxs(NotificationContainer, {\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsx(Icon, {\n      name: `common/menu/${!loading ? seen ? \"noNotify\" : \"haveNotify\" : \"noNotify\"}`,\n      width: 24,\n      height: 24\n    }), children]\n  });\n};\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}