{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: String!) {\\n    confirmTheInvitation(id: $id)\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: String!) {\\n        getInvitationApplyById(id: $id) {\\n          \", \"\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query($filterInvitationApply: FilterInvitationApply, $page:Int, $size: Int) {\\n        getAllInvitationApply(filterInvitationApply: $filterInvitationApply, page:$page, size:$size){\\n            totalCount\\n            results{\\n                \", \"\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nvar invitation = \"\\n    _id\\n    positionApply\\n    address\\n    receiver { \\n        _id\\n        displayName\\n    }\\n    sender {\\n        _id\\n        displayName\\n    }\\n    senderName\\n    senderPhone\\n    senderEmail\\n    company {\\n        _id\\n        name\\n    }\\n    recruitment {\\n        _id\\n        slug\\n    }\\n    isConfirmFromReceiver\\n    status\\n\";\nvar GET_ALL_INVITATION_APPLY = gql(_templateObject(), invitation);\nexport var getAllInvitationApply = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLCommon(GET_ALL_INVITATION_APPLY, variables);\n\n          case 2:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllInvitationApply(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GET_INVITATION_APPLY_BY_ID = gql(_templateObject2(), invitation);\nexport var getInvitationApplyById = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(variables) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphQLCommon(GET_INVITATION_APPLY_BY_ID, variables);\n\n          case 2:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getInvitationApplyById(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar CONFIRM_THE_INVITATION = gql(_templateObject3());\nexport var confirmTheInvitation = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLCommon(CONFIRM_THE_INVITATION, variables);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function confirmTheInvitation(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}