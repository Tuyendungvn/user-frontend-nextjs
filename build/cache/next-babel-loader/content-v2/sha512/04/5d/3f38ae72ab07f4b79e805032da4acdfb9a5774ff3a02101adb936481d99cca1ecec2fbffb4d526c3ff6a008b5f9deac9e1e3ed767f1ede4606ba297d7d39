{"ast":null,"code":"import _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nexport * from \"./styles\";\nimport { IconWrapper, Icon, Content, Title, Message } from \"./styles\";\nimport { notificationMapping } from \"@constants/notification\";\n\nvar ToastNotification = function ToastNotification(props) {\n  var _ref = props.payload || {},\n      title = _ref.title,\n      message = _ref.message,\n      type = _ref.type;\n\n  useEffect(function () {}, []);\n\n  var renderIcon = function renderIcon() {\n    if (type === \"success\") {\n      return /*#__PURE__*/_jsxs(Fragment, {\n        children: [/*#__PURE__*/_jsx(IconWrapper, {\n          children: /*#__PURE__*/_jsx(Icon, {\n            name: \"common/checked-white\",\n            width: \"15px\",\n            height: \"15px\"\n          })\n        }), /*#__PURE__*/_jsxs(Content, {\n          children: [title ? /*#__PURE__*/_jsx(Title, {\n            children: title\n          }) : \"\", /*#__PURE__*/_jsx(Message, {\n            children: message\n          })]\n        })]\n      });\n    }\n\n    if (type === (\"error\" || \"warning\")) {\n      return /*#__PURE__*/_jsxs(Fragment, {\n        children: [/*#__PURE__*/_jsx(IconWrapper, {\n          children: /*#__PURE__*/_jsx(Icon, {\n            name: \"common/error-white\",\n            width: \"15px\",\n            height: \"15px\"\n          })\n        }), /*#__PURE__*/_jsxs(Content, {\n          children: [title ? /*#__PURE__*/_jsx(Title, {\n            children: title\n          }) : \"\", /*#__PURE__*/_jsx(Message, {\n            children: notificationMapping(message)\n          })]\n        })]\n      });\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: renderIcon()\n  });\n};\n\nexport var toastOptions = {\n  position: toast.POSITION.TOP_RIGHT,\n  autoClose: 2000,\n  hideProgressBar: true,\n  closeOnClick: false,\n  pauseOnHover: true,\n  draggable: true,\n  toastId: \"toast-notification\"\n};\nexport var showNotification = function showNotification(payload) {\n  var type = payload.type;\n  toast( /*#__PURE__*/_jsx(ToastNotification, {\n    payload: payload\n  }), _objectSpread(_objectSpread({}, toastOptions), {}, {\n    type: type\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}