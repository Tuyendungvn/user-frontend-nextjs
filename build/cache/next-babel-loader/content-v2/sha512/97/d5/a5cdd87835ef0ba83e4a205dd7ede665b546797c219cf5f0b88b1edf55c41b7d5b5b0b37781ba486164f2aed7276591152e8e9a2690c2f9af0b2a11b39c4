{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import \"firebase/auth\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport RegisterForm from \"./RegisterForm\";\nimport OTPForm from \"./OTPForm\";\nimport { phoneRegExp, emailRegExp } from \"@constants/validate\";\nimport { useTranslation } from \"next-i18next\";\nimport { registerOtpVoice, sendOtpVoice, verifyOtpVoice } from \"@redux/actions/auth\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { PATH } from \"@routes\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { RegisterContainer } from \"./styles\";\nimport { getAllUser } from \"@services/user\";\nimport { resetAction } from \"@redux/actions/common\";\n\nvar Register = function Register() {\n  var _useTranslation = useTranslation([\"authen\"]),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var redirect = useRedirect();\n\n  var _useState = useState(\"PHONE_NUMBER\"),\n      inputMode = _useState[0],\n      setInputMode = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var _useState3 = useState([]),\n      users = _useState3[0],\n      setUsers = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.actions;\n  }),\n      actionSuccess = _useSelector.actionSuccess;\n\n  useEffect(function () {\n    getAllUserForCheckExist();\n  }, []);\n  useEffect(function () {\n    if (actionSuccess) {\n      dispatch(resetAction());\n      showNotification({\n        type: \"success\",\n        title: t(\"register.create-successful\")\n      });\n      redirect(PATH.LOGIN);\n    }\n  }, [actionSuccess]);\n  var initialValues = {\n    phoneNumber: \"\",\n    email: \"\",\n    password: \"\",\n    otp: \"\"\n  };\n  var validateWithPhone = Yup.object({\n    phoneNumber: Yup.string().required(t(\"register.require-phone-number\")).matches(phoneRegExp, t(\"register.phone-not-valid\")).max(10, t(\"register.phone-not-valid\")),\n    email: Yup.string().required(t(\"register.require-email\")).matches(emailRegExp, t(\"register.email-not-valid\")),\n    password: Yup.string().required(t(\"login.require-password\"))\n  });\n  var validateWithOtp = Yup.object({\n    otp: Yup.string().required()\n  });\n\n  var handleSubmit = function handleSubmit(values) {\n    if (inputMode === \"PHONE_NUMBER\") {\n      var listPhoneNumber = users === null || users === void 0 ? void 0 : users.map(function (user) {\n        return user === null || user === void 0 ? void 0 : user.phoneNumber;\n      });\n      var listEmail = users === null || users === void 0 ? void 0 : users.map(function (user) {\n        return user === null || user === void 0 ? void 0 : user.email;\n      });\n\n      if (values.phoneNumber) {\n        var exist = listPhoneNumber === null || listPhoneNumber === void 0 ? void 0 : listPhoneNumber.includes(values.phoneNumber);\n\n        if (exist) {\n          dispatch(showNotification({\n            type: \"error\",\n            message: t(\"register.exist-phone-number\"),\n            title: t(\"register.have-error\")\n          }));\n          return;\n        }\n      }\n\n      if (values.email) {\n        var _exist = listEmail.includes(values.email);\n\n        if (_exist) {\n          dispatch(showNotification({\n            type: \"error\",\n            message: t(\"register.exist-email\"),\n            title: t(\"register.have-error\")\n          }));\n          return;\n        }\n      }\n\n      handleVerifyPhoneNumber(values);\n    }\n\n    if (inputMode === \"OTP\") {\n      handleVerifyOtpCode(values);\n    }\n  };\n\n  var getAllUserForCheckExist = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, _ref2, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getAllUser();\n\n            case 3:\n              response = _context.sent;\n              _ref2 = (response === null || response === void 0 ? void 0 : response.data) || {}, result = _ref2.getAllUserHasPermissions;\n              setUsers(result === null || result === void 0 ? void 0 : result.results);\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              setUsers([]);\n              console.error(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function getAllUserForCheckExist() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleResendOtpCode = function handleResendOtpCode(values) {\n    var text = values.phoneNumber;\n    var phoneNumber = \"+84\".concat(text.slice(1, text.length));\n    var payload = {\n      phoneNumber: phoneNumber\n    };\n    dispatch(sendOtpVoice(payload));\n  };\n\n  var handleVerifyPhoneNumber = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n\n              try {\n                payload = {\n                  input: {\n                    permission: \"CANDIDATE\",\n                    phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber,\n                    password: values === null || values === void 0 ? void 0 : values.password,\n                    email: values === null || values === void 0 ? void 0 : values.email\n                  }\n                };\n                dispatch(registerOtpVoice(payload));\n                setErrorMessage(\"\");\n                setLoading(false);\n                setInputMode(\"OTP\");\n              } catch (error) {\n                console.error(error);\n                setLoading(false);\n                setErrorMessage(error === null || error === void 0 ? void 0 : error.message);\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleVerifyPhoneNumber(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleVerifyOtpCode = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setLoading(true);\n\n              try {\n                payload = {\n                  input: {\n                    otpCode: values === null || values === void 0 ? void 0 : values.otp,\n                    phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber,\n                    permission: \"CANDIDATE\"\n                  }\n                };\n                dispatch(verifyOtpVoice(payload));\n                eventManager.addListener(\"verifyOtpSuccess\", function () {\n                  redirect(PATH.LOGIN);\n                });\n              } catch (error) {\n                setErrorMessage(error.message);\n                console.error(error);\n                setLoading(false);\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleVerifyOtpCode(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(RegisterContainer, {\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: initialValues,\n      validationSchema: inputMode === \"PHONE_NUMBER\" ? validateWithPhone : validateWithOtp,\n      onSubmit: handleSubmit,\n      children: function children(formik) {\n        if (inputMode === \"PHONE_NUMBER\") {\n          return /*#__PURE__*/_jsx(RegisterForm, {\n            loading: loading,\n            formik: formik,\n            errorMessage: errorMessage\n          });\n        } else {\n          return /*#__PURE__*/_jsx(OTPForm, {\n            title: t(\"register.form-title\"),\n            loading: loading,\n            formik: formik,\n            errorMessage: errorMessage,\n            onResendOtp: handleResendOtpCode,\n            onClose: function onClose() {\n              setInputMode(\"PHONE_NUMBER\");\n            }\n          });\n        }\n      }\n    })\n  });\n};\n\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}