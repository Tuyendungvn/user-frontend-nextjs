{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useTranslation } from \"react-i18next\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { isEmpty } from \"lodash\";\nimport Button from \"@designs/Button\";\nimport InputBox from \"@designs/Input\";\nimport { Container, Form, Title, Wrapper } from \"./style\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLoading } from \"@redux/actions/common\";\nimport { PATH } from \"@routes\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { updateUserPassword } from \"@services/auth\";\nimport { removeCurrentUser } from \"@redux/actions/auth\";\nimport { errorMessageGraphql } from \"@common/functions/printError\";\nimport { useEffect, useState } from \"react\";\n\nvar ChangePassword = function ChangePassword() {\n  var dispatch = useDispatch();\n\n  var _useTranslation = useTranslation([\"common\", \"job-management\"]),\n      t = _useTranslation.t;\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      currentUser = _useSelector.currentUser;\n\n  var _useState = useState(true),\n      enableChange = _useState[0],\n      setEnableChange = _useState[1];\n\n  var redirect = useRedirect();\n  var userInfo = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userInfo) || {};\n  useEffect(function () {\n    if (!isEmpty(userInfo)) {\n      var provider = userInfo === null || userInfo === void 0 ? void 0 : userInfo.provider;\n\n      if (provider === \"facebook\" || provider === \"google\") {\n        setEnableChange(false);\n      }\n    }\n  }, [userInfo]);\n  var formik = useFormik({\n    initialValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: Yup.object({\n      oldPassword: Yup.string().required(t(\"password.required\")),\n      newPassword: Yup.string().required(t(\"password.required\")),\n      confirmPassword: Yup.string().required(t(\"password.required\"))\n    }),\n    onSubmit: function onSubmit(values) {\n      var newPass = values.newPassword;\n      var confirmPass = values.confirmPassword;\n\n      if (newPass === confirmPass) {\n        var payload = {\n          updatePasswordInput: {\n            id: userInfo === null || userInfo === void 0 ? void 0 : userInfo._id,\n            oldPassword: values.oldPassword,\n            newPassword: values.newPassword\n          }\n        };\n        updateUserPasswordAPI(payload);\n      } else {\n        showNotification({\n          type: \"error\",\n          title: t(\"common:notification.password-not-match\")\n        });\n      }\n    }\n  });\n\n  var updateUserPasswordAPI = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n      var response, _ref2, result, redirectPath, errorMessage;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch(setLoading(true));\n              _context.next = 4;\n              return updateUserPassword(payload);\n\n            case 4:\n              response = _context.sent;\n              dispatch(setLoading(false));\n              _ref2 = (response === null || response === void 0 ? void 0 : response.data) || {}, result = _ref2.updateUserPassword;\n\n              if (result) {\n                redirectPath = PATH.LOGIN;\n                showNotification({\n                  type: \"success\",\n                  title: t(\"common:notification.update-password-success\")\n                });\n                redirect(redirectPath);\n                dispatch(removeCurrentUser());\n              } else {\n                errorMessage = errorMessageGraphql(response);\n                showNotification({\n                  type: \"error\",\n                  title: t(\"common:notification.update-password-failed\"),\n                  message: errorMessage\n                });\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              showNotification({\n                type: \"error\",\n                title: t(\"common:notification.update-password-failed\"),\n                message: _context.t0\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function updateUserPasswordAPI(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      children: t(\"header.change-password\")\n    }), /*#__PURE__*/_jsxs(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.old-password\"),\n          id: \"oldPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"oldPassword\")), formik.getFieldMeta(\"oldPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.new-password\"),\n          id: \"newPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"newPassword\")), formik.getFieldMeta(\"newPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n          disabled: !enableChange,\n          required: true,\n          label: t(\"password.re-enter-newpassword\"),\n          id: \"confirmPassword\",\n          type: \"password\"\n        }, formik.getFieldProps(\"confirmPassword\")), formik.getFieldMeta(\"confirmPassword\")))\n      }), /*#__PURE__*/_jsx(Wrapper, {\n        children: /*#__PURE__*/_jsx(Button, {\n          className: \"px-5 py-1.5\",\n          primary: true,\n          type: \"submit\",\n          children: t(\"common:update\")\n        })\n      })]\n    })]\n  });\n};\n\nexport default ChangePassword;","map":null,"metadata":{},"sourceType":"module"}