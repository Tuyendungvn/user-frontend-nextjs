{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"next-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport moment from \"moment\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport { isEmail, regexPhoneNumber } from \"@constants/validate\";\nimport { getDistricts, getWards } from \"@redux/actions/location\";\nimport { updateUserProfile } from \"@redux/actions/user\";\nimport EditSingleForm from \"./components/Form\";\nimport { Container, DialogButton, Title, Wrapper } from \"./styles\";\n\nconst EditSingleDialog = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    address,\n    dateOfBirth,\n    district,\n    email,\n    gender,\n    idCard,\n    phoneNumber,\n    province,\n    ward,\n    userId\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false); // When provinceCode change -> dispatch(getDistricts(provinceCode))\n\n  const {\n    0: provinceCode,\n    1: setProvinceCode\n  } = useState(\"\"); // When districtCode change -> dispatch(getWards(districtCode))\n\n  const {\n    0: districtCode,\n    1: setDistrictCode\n  } = useState(\"\"); // Provinces, districts, wards for options select (dropdown select)\n\n  const {\n    provinces,\n    districts,\n    wards\n  } = useSelector(state => state.location);\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  useEffect(() => {\n    if (provinceCode !== \"\") {\n      const payload = {\n        provinceCode\n      };\n      dispatch(getDistricts(payload));\n    }\n  }, [provinceCode]);\n  useEffect(() => {\n    if (districtCode !== \"\") {\n      const payload = {\n        districtCode\n      };\n      dispatch(getWards(payload));\n    }\n  }, [districtCode]); // Gender options select with i18next (english, vietnamese)\n\n  const genderOptions = [{\n    name: t(\"common:gender.male\"),\n    _id: \"male\"\n  }, {\n    name: t(\"common:gender.female\"),\n    _id: \"female\"\n  }];\n\n  const defaultGenderValue = () => {\n    if (gender === \"male\") {\n      return {\n        name: t(\"common:gender.male\"),\n        _id: \"male\"\n      };\n    }\n\n    if (gender === \"female\") {\n      return {\n        name: t(\"common:gender.female\"),\n        _id: \"female\"\n      };\n    }\n\n    return;\n  };\n\n  const defaultDateOfBirthValue = () => {\n    return !!dateOfBirth && moment(dateOfBirth).format(\"YYYY-MM-DD\");\n  };\n\n  const defaultProvinceValue = () => {\n    return !!(province !== null && province !== void 0 && province.name) && {\n      name: province.name,\n      _id: province._id,\n      code: province.code\n    };\n  };\n\n  const defaultWardValue = () => {\n    return !!(ward !== null && ward !== void 0 && ward.name) && {\n      name: ward.name,\n      _id: ward._id,\n      code: ward.code\n    };\n  };\n\n  const defaultDistrictValue = () => {\n    return !!(district !== null && district !== void 0 && district.name) && {\n      name: district === null || district === void 0 ? void 0 : district.name,\n      _id: district === null || district === void 0 ? void 0 : district._id,\n      code: district === null || district === void 0 ? void 0 : district.code\n    };\n  };\n\n  const initialValues = {\n    email,\n    phoneNumber: phoneNumber,\n    idCard,\n    dateOfBirth: defaultDateOfBirthValue(),\n    gender: defaultGenderValue(),\n    province: defaultProvinceValue(),\n    district: defaultDistrictValue(),\n    ward: defaultWardValue(),\n    address: address === null || address === void 0 ? void 0 : address.name\n  };\n  const validationSchema = Yup.object({\n    phoneNumber: Yup.string().required(t(\"personal-info.single.phone-number-validation\")).matches(regexPhoneNumber, t(\"personal-info.single.phone-number-validation2\")).length(10, t(\"personal-info.single.phone-number-validation2\")),\n    email: Yup.string().required(t(\"personal-info.single.email-empty\")).test(\"Email\", t(\"personal-info.single.email-inValid\"), values => isEmail(values)),\n    gender: Yup.object().required(t(\"personal-info.single.gender-empty\")),\n    province: Yup.object().nullable().required(t(\"personal-info.single.province-empty\")),\n    dateOfBirth: Yup.string().required(t(\"personal-info.single.gender-empty\"))\n  });\n\n  const handleSubmit = values => {\n    var _values$gender, _values$district, _values$province, _values$ward;\n\n    const updateUserPayload = {\n      updateUserInput: {\n        email: values.email,\n        phoneNumber: values.phoneNumber.toString(),\n        identityCard: values.idCard.toString(),\n        birthday: values === null || values === void 0 ? void 0 : values.dateOfBirth,\n        gender: values === null || values === void 0 ? void 0 : (_values$gender = values.gender) === null || _values$gender === void 0 ? void 0 : _values$gender._id,\n        locationTypeInput: {\n          districtCode: values === null || values === void 0 ? void 0 : (_values$district = values.district) === null || _values$district === void 0 ? void 0 : _values$district.code,\n          provinceCode: values === null || values === void 0 ? void 0 : (_values$province = values.province) === null || _values$province === void 0 ? void 0 : _values$province.code,\n          streetName: values === null || values === void 0 ? void 0 : values.address,\n          wardCode: values === null || values === void 0 ? void 0 : (_values$ward = values.ward) === null || _values$ward === void 0 ? void 0 : _values$ward.code\n        }\n      }\n    };\n    handleConfirm(updateUserPayload);\n  };\n\n  const handleConfirm = updateUserPayload => {\n    dispatch(updateUserProfile(updateUserPayload));\n    handleCloseDialog();\n  };\n\n  const onSelected = (type, formik) => value => {\n    if (type === \"province\") {\n      setProvinceCode(value.code);\n    }\n\n    if (type === \"district\") {\n      setDistrictCode(value.code);\n    }\n\n    return formik.setFieldValue(type, value);\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.single.edit-personal-info\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          validationSchema: validationSchema,\n          onSubmit: handleSubmit,\n          children: formik => /*#__PURE__*/_jsx(EditSingleForm, {\n            districts: districts,\n            formik: formik,\n            genderOptions: genderOptions,\n            handleClose: handleCloseDialog,\n            initialValues: initialValues,\n            isLoading: isLoading,\n            onSelected: onSelected,\n            provinces: provinces,\n            wards: wards\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditSingleDialog;","map":null,"metadata":{},"sourceType":"module"}