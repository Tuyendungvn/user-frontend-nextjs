{"ast":null,"code":"import { call, put } from \"@redux-saga/core/effects\";\nimport * as services from \"@services/notification\";\nimport { getNotificationsByUserSuccess, getNotificationsSettingSuccess, getNotificationsSettingByUserSuccess } from \"@redux/actions/notification\";\nimport { actionSuccess } from \"@redux/actions/common\";\nexport function* getNotifications(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getNotificationByUser, variables);\n  const {\n    getNotifyByUser: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(getNotificationsByUserSuccess(results));\n  }\n}\nexport function* setSeenForNotify(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.setSeenForNotify, variables);\n  const {\n    setSeenForNotify: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {}\n}\nexport function* getNotificationsSetting(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getNotificationSetting, variables);\n  const {\n    getAllNotifySetting: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(getNotificationsSettingSuccess(results));\n  }\n}\nexport function* getNotificationsSettingByUser(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.getNotifySettingByUser, variables);\n  const {\n    getNotifySettingByUser: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(getNotificationsSettingByUserSuccess(results));\n  }\n}\nexport function* createNotifySetting(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.createNotifySetting, variables);\n  const {\n    createNotifySetting: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(actionSuccess());\n  }\n}\nexport function* createNotify(payload) {\n  const variables = payload.payload;\n  const response = yield call(services.createNotify, variables);\n  const {\n    createNotify: results\n  } = (response === null || response === void 0 ? void 0 : response.data) || {};\n\n  if (results) {\n    yield put(actionSuccess());\n  }\n}","map":null,"metadata":{},"sourceType":"module"}