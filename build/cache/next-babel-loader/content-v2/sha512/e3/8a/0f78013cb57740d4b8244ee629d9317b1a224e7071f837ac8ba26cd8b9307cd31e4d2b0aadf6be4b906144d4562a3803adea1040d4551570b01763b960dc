{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class EventManager {\n  constructor() {\n    _defineProperty(this, \"listeners\", {});\n  }\n\n  addListener(name, fn) {\n    (this.listeners[name] = this.listeners[name] || new Set()).add(fn);\n    return this;\n  }\n\n  fire(name, payload) {\n    let listCallbacks = this.listeners[name];\n\n    if (listCallbacks !== undefined) {\n      let data = {},\n          evt;\n\n      for (let cb of Array.from(listCallbacks)) {\n        evt = this.EventArg(name, data);\n        cb(payload);\n        data = evt.data;\n\n        if (evt.removed) {\n          listCallbacks.delete(cb);\n        }\n\n        if (evt.cancelled) {\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  EventArg(name, data) {\n    let cancelled = false;\n    let removed = false;\n    return {\n      name,\n      data,\n      cancelled,\n      removed,\n\n      cancel() {\n        this.cancelled = true;\n      },\n\n      remove() {\n        this.removed = true;\n      }\n\n    };\n  }\n\n}\nglobalThis.eventManager = new EventManager();","map":null,"metadata":{},"sourceType":"module"}