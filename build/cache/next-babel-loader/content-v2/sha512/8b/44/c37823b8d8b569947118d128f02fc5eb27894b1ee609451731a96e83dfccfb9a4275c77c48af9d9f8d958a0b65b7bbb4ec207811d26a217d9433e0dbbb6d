{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import \"firebase/auth\";\nimport { useTranslation } from \"next-i18next\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { phoneRegExp } from \"@constants/validate\";\nimport InputBox from \"@designs/Input\";\nimport { forceTextInputEnterNumber } from \"@common/functions/filter\";\nimport { login, sendOtpVoice, verifyOtpVoice } from \"@redux/actions/auth\";\nimport { PATH } from \"@routes\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport useAuth from \"@common/hooks/useAuth\";\nimport { LoginContainer, Title, AuthenTication, Form, Text, Navigation, EmployerLogin, Button } from \"./styles\";\nimport { getAllUser } from \"@services/user\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport OTPForm from \"@containers/Register/OTPForm\";\n\nvar Login = function Login() {\n  var _useState = useState(\"LOG_IN\"),\n      inputMode = _useState[0],\n      setInputMode = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useTranslation = useTranslation([\"authen\"]),\n      t = _useTranslation.t;\n\n  var redirect = useRedirect();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      currentUser = _useSelector.currentUser;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.actions;\n  }),\n      isLoading = _useSelector2.isLoading;\n\n  var _useState4 = useState([]),\n      users = _useState4[0],\n      setUsers = _useState4[1];\n\n  var _useAuth = useAuth(),\n      isAuth = _useAuth.isAuth;\n\n  useEffect(function () {\n    if (currentUser) {\n      redirect(PATH.JOB_MANAGEMENT_PERSONAL_INFO);\n    }\n  }, [currentUser]);\n  useEffect(function () {\n    if (isAuth) {\n      redirect(PATH.JOB_MANAGEMENT_PERSONAL_INFO);\n    } else {\n      getAllUserForCheckExist();\n    }\n  }, []);\n  var initialValues = {\n    username: \"\",\n    password: \"\",\n    otp: \"\"\n  };\n  var validationWithPhone = Yup.object({\n    username: Yup.string().required(t(\"login.require-phone-number\")).matches(phoneRegExp, t(\"login.incorrect-phone-number\")).max(10, t(\"login.incorrect-phone-number\")),\n    password: Yup.string().required(t(\"login.require-password\"))\n  });\n  var validateWithOtp = Yup.object({\n    otp: Yup.string().required()\n  });\n  var formValidation = {\n    LOG_IN: validationWithPhone,\n    ACTIVE_ACOUNT: validateWithOtp\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    if (inputMode === \"LOG_IN\") {\n      handleLoginPhoneNumber(values);\n    }\n\n    if (inputMode === \"ACTIVE_ACOUNT\") {\n      handleVerifyOtpCode(values);\n    }\n  };\n\n  var handleLoginPhoneNumber = function handleLoginPhoneNumber(values) {\n    var listPhone = users === null || users === void 0 ? void 0 : users.map(function (user) {\n      return user === null || user === void 0 ? void 0 : user.phoneNumber;\n    });\n\n    if (values.phoneNumber) {\n      var isExist = listPhone === null || listPhone === void 0 ? void 0 : listPhone.includes(values.phoneNumber);\n\n      if (!isExist) {\n        dispatch(showNotification({\n          type: \"error\",\n          title: t(\"login.have-error\"),\n          message: t(\"login.non-exist-phone\")\n        }));\n        return;\n      }\n    }\n\n    var payload = {\n      user: {\n        username: values.username,\n        password: values.password\n      },\n      permission: \"CANDIDATE\"\n    };\n    dispatch(login(payload));\n    eventManager.addListener(\"activeAccount\", function () {\n      setInputMode(\"ACTIVE_ACOUNT\");\n      var payload_Otp = {\n        phoneNumber: values.username\n      };\n      dispatch(sendOtpVoice(payload_Otp));\n    });\n  };\n\n  var handleVerifyOtpCode = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n\n              try {\n                payload = {\n                  input: {\n                    otpCode: values === null || values === void 0 ? void 0 : values.otp,\n                    phoneNumber: values === null || values === void 0 ? void 0 : values.username,\n                    permission: \"CANDIDATE\"\n                  }\n                };\n                dispatch(verifyOtpVoice(payload));\n                eventManager.addListener(\"verifyOtpSuccess\", function () {\n                  setInputMode(\"LOG_IN\");\n                });\n              } catch (error) {\n                setErrorMessage(error.message);\n                console.error(error);\n                setLoading(false);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleVerifyOtpCode(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getAllUserForCheckExist = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, _ref3, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return getAllUser();\n\n            case 3:\n              response = _context2.sent;\n              _ref3 = (response === null || response === void 0 ? void 0 : response.data) || {}, result = _ref3.getAllUserHasPermissions;\n              setUsers(result === null || result === void 0 ? void 0 : result.results);\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              setUsers([]);\n              console.error(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function getAllUserForCheckExist() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleResendOtpCode = function handleResendOtpCode(values) {\n    var payload = {\n      phoneNumber: values === null || values === void 0 ? void 0 : values.phoneNumber\n    };\n    dispatch(sendOtpVoice(payload));\n  };\n\n  return /*#__PURE__*/_jsxs(LoginContainer, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      children: t(\"login.form-title\")\n    }), /*#__PURE__*/_jsx(AuthenTication, {\n      children: /*#__PURE__*/_jsx(Formik, {\n        initialValues: initialValues,\n        validationSchema: formValidation[inputMode],\n        onSubmit: handleSubmit,\n        children: function children(formik) {\n          if (inputMode !== \"ACTIVE_ACOUNT\") {\n            return /*#__PURE__*/_jsxs(Form, {\n              children: [inputMode === \"LOG_IN\" && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                  onKeyPress: forceTextInputEnterNumber,\n                  label: t(\"login.phone-number\"),\n                  type: \"tel\",\n                  placeholder: t(\"login.enter-phone-number\")\n                }, formik.getFieldProps(\"username\")), formik.getFieldMeta(\"username\"))), /*#__PURE__*/_jsx(InputBox, _objectSpread(_objectSpread({\n                  label: t(\"login.password\"),\n                  placeholder: t(\"login.enter-password\"),\n                  type: \"password\"\n                }, formik.getFieldProps(\"password\")), formik.getFieldMeta(\"password\")))]\n              }), /*#__PURE__*/_jsx(Button, {\n                loading: isLoading,\n                primary: true,\n                type: \"submit\",\n                children: inputMode === \"LOG_IN\" ? t(\"login.login\") : t(\"login.verify\")\n              })]\n            });\n          }\n\n          if (inputMode === \"ACTIVE_ACOUNT\") {\n            return /*#__PURE__*/_jsx(OTPForm, {\n              onClose: function onClose() {\n                setInputMode(\"LOG_IN\");\n                setErrorMessage(\"\");\n              },\n              title: \"Nhập mã xác thực OTP\",\n              loading: loading,\n              formik: formik,\n              errorMessage: errorMessage,\n              onResendOtp: handleResendOtpCode\n            });\n          }\n        }\n      })\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.forgot-password\"), /*#__PURE__*/_jsx(Navigation, {\n        routeName: PATH.FORGOT_PASSWORD,\n        children: t(\"login.reset\")\n      })]\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.dont-have-account\"), /*#__PURE__*/_jsx(Navigation, {\n        routeName: PATH.REGISTER,\n        children: t(\"login.register-here\")\n      })]\n    }), /*#__PURE__*/_jsxs(Text, {\n      children: [t(\"login.are-you-recruiter\"), /*#__PURE__*/_jsx(EmployerLogin, {\n        href: \"https://employer.tuyendungvn.com/dang-nhap\",\n        target: \"_blank\",\n        children: t(\"login.login-for-recruiters\")\n      })]\n    })]\n  });\n};\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}