{"ast":null,"code":"import { graphQLCommon } from \"@common/utils/api\";\nimport { gql } from \"apollo-boost\";\nconst recruitment = `\n        _id \n        name\n        type {\n          name\n        }\n        level {\n          name\n        }\n        view\n        description\n        requirement\n        career {\n          name\n        }\n        location {\n          name\n          province {\n            name\n          }\n          location\n        }\n        highlight\n        user {\n          _id\n          displayName\n          username\n          email\n          phoneNumber\n        }\n        viewedUser {\n          _id\n          displayName\n          username\n          email\n          phoneNumber\n        }\n        appliedUser {\n          _id\n          displayName\n          username\n          email\n          phoneNumber\n        }\n        salaryMin\n        salaryMax\n        dealSalary\n        isApproved\n        slug\n        keywords {\n          name\n        }\n        expiredDate\n        createdAt\n        updatedAt\n        companyName\n        companySize\n        companySlug\n        companyLocation\n        companyBenefit {\n          icon {\n            icon {\n              default\n              medium\n              small\n            }\n            name\n          }\n          content\n        }\n        companyDescription\n        companyLogo {\n          default\n          medium\n          small\n        }\n        companyImages {\n          default\n          medium\n          small\n        }\n        companyVideo\n        company {\n          slug\n          name\n          logo{\n            default\n            medium\n            small\n          }\n        }\n`;\nconst GET_ALL_RECRUITMENT = gql`\n  query(\n    $keyword: String\n    $filterRecruitment: FilterRecruitment\n    $page: Int\n    $size: Int\n  ) {\n    getAllRecruitment(\n      keyword: $keyword\n      filterRecruitment: $filterRecruitment\n      page: $page\n      size: $size\n    ) {\n      totalCount\n      results {\n        ${recruitment}\n      }\n    }\n  }\n`;\nexport const getAllRecruitment = async variables => {\n  const response = await graphQLCommon(GET_ALL_RECRUITMENT, variables);\n  return response;\n};\nconst GET_RECRUITMENT_BY_COMPANY = gql`\n  query($companyId: String!) {\n    getRecruitmentByCompany(companyId: $companyId) {\n      totalCount\n      results {\n        ${recruitment}\n      }\n    }\n  }\n`;\nexport const getRecruitmentByCompany = async (variables) => {\n  const response = await graphQLCommon(GET_RECRUITMENT_BY_COMPANY, variables);\n  return response;\n};\nconst GET_RECRUITMENT_BY_USER = gql`\n  query($userId: String!) {\n    getRecruitmentByUser(userId: $userId) {\n      totalCount\n      results {\n        ${recruitment}\n      }\n    }\n  }\n`;\nexport const getRecruitmentByUser = async (variables) => {\n  const response = await graphQLCommon(GET_RECRUITMENT_BY_USER, variables);\n  return response;\n};\nconst GET_RECRUITMENT_BY_ID = gql`\n  query($id: String!) {\n    getRecruitmentById(id: $id) {\n      ${recruitment}\n    }\n  }\n`;\nexport const getRecruitmentById = async variables => {\n  const response = await graphQLCommon(GET_RECRUITMENT_BY_ID, variables);\n  return response;\n};\nconst GET_RECRUITMENT_BY_SLUG = gql`\n  query($slug: String!) {\n    getRecruitmentBySlug(slug: $slug) {\n      ${recruitment}\n    }\n  }\n`;\nexport const getRecruitmentBySlug = async variables => {\n  const response = await graphQLCommon(GET_RECRUITMENT_BY_SLUG, variables);\n  return response;\n};\nconst SET_SEEN_RECRUITMENT = gql`\n  mutation($userId: String!, $recruitmentId: String!) {\n    setSeenRecruitment(userId: $userId, recruitmentId: $recruitmentId)\n  }\n`;\nexport const setSeenRecruitment = async variables => {\n  const response = await graphQLCommon(SET_SEEN_RECRUITMENT, variables);\n  return response;\n};\nconst SET_APPLIED_RECRUITMENT = gql`\n  mutation($userId: String!, $recruitmentId: String!) {\n    setAppliedRecruitment(userId: $userId, recruitmentId: $recruitmentId)\n  }\n`;\nexport const setAppliedRecruitment = async (variables) => {\n  const response = await graphQLCommon(SET_APPLIED_RECRUITMENT, variables);\n  return response;\n};\nconst SET_SAVED_RECRUITMENT = gql`\n  mutation($userId: String!, $recruitmentId: String!) {\n    setSavedRecruitment(userId: $userId, recruitmentId: $recruitmentId)\n  }\n`;\nexport const setSavedRecruitment = async (variables) => {\n  const response = await graphQLCommon(SET_SAVED_RECRUITMENT, variables);\n  return response;\n};\nconst CREATE_RECRUITMENT = gql`\n  mutation($recruitmentCreateInput: RecruitmentCreateInput!) {\n    createRecruitment(recruitmentCreateInput: $recruitmentCreateInput) {\n      _id\n      name\n    }\n  }\n`;\nexport const createRecruitment = async variables => {\n  const response = await graphQLCommon(CREATE_RECRUITMENT, variables);\n  return response;\n};\nconst GET_BEST_RECRUITMENT = gql`\n  query Query($size: Int, $page: Int) {\n    getBestRecruitment(size: $size, page: $page) {\n      totalCount\n      results {\n        ${recruitment}\n      }\n    }\n  }\n`;\nexport const getBestRecruitment = async variables => {\n  const response = await graphQLCommon(GET_BEST_RECRUITMENT, variables);\n  return response;\n};\nconst REMOVE_SAVED_RECRUITMENT = gql`\n  mutation($userId: String!, $recruitmentId: String!) {\n    removeSavedRecruitmentUser(userId: $userId, recruitmentId: $recruitmentId)\n  }\n`;\nexport const removeSavedRecruitment = async (variables) => {\n  const response = await graphQLCommon(REMOVE_SAVED_RECRUITMENT, variables);\n  return response;\n};","map":null,"metadata":{},"sourceType":"module"}