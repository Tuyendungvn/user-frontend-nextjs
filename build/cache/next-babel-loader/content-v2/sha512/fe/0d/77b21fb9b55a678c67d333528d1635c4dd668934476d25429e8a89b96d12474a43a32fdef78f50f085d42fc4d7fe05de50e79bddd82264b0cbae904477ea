{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import \"firebase/auth\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"next-i18next\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useAuth from \"@common/hooks/useAuth\";\nimport { useRedirect } from \"@common/hooks/useRedirect\";\nimport { forceTextInputEnterNumber } from \"@common/functions\";\nimport Input from \"@designs/Input\";\nimport { PATH } from \"@routes\";\nimport { sendOtpVoice, resetPasswordOtpVoice, verifyOtpResetPassword } from \"@redux/actions/auth\";\nimport { resetAction } from \"@redux/actions/common\";\nimport { phoneRegExp } from \"@constants/validate\";\nimport OTPForm from \"@containers/Register/OTPForm\";\nimport ErrorHelperText from \"@components/ErrorHelperText\";\nimport { showNotification } from \"@components/ToastNotification\";\nimport { ForgotPasswordContainer, Title, Form, Button, Notification, Register } from \"./styles\";\n\nvar ForgotPassword = function ForgotPassword() {\n  var _useTranslation = useTranslation([\"authen\", \"common\"]),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var redirect = useRedirect();\n\n  var _useState = useState(\"PHONE_NUMBER\"),\n      inputMode = _useState[0],\n      setInputMode = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      errorMessage = _useState3[0],\n      setErrorMessage = _useState3[1];\n\n  var _useAuth = useAuth(),\n      isAuth = _useAuth.isAuth;\n\n  useEffect(function () {\n    if (isAuth) {\n      redirect(PATH.HOME);\n    }\n  }, []);\n\n  var _useSelector = useSelector(function (state) {\n    return state.actions;\n  }),\n      actionSuccess = _useSelector.actionSuccess;\n\n  useEffect(function () {\n    if (actionSuccess) {\n      showNotification({\n        type: \"success\",\n        title: t(\"forgot-password.change-password-success\")\n      });\n      dispatch(resetAction());\n      redirect(PATH.LOGIN);\n    }\n  }, [actionSuccess]);\n  var initialValues = {\n    phoneNumber: \"\",\n    otp: \"\",\n    newPassword: \"\",\n    reNewPassword: \"\"\n  };\n  var validationPhoneNumber = Yup.object({\n    phoneNumber: Yup.string().required(t(\"forgot-password.require-phone-number\")).matches(phoneRegExp, t(\"forgot-password.phone-number-not-valid\"))\n  });\n  var validationOTP = Yup.object({\n    otp: Yup.string().required()\n  });\n  var validationNewPassword = Yup.object({\n    newPassword: Yup.string().required(t(\"common:required\")),\n    reNewPassword: Yup.string().required(t(\"common:required\"))\n  });\n  var formValidation = {\n    PHONE_NUMBER: validationPhoneNumber,\n    OTP: validationOTP,\n    CHANGE_PASSWORD: validationNewPassword\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    if (inputMode === \"PHONE_NUMBER\") {\n      var text = values.phoneNumber;\n      var phoneNumber = \"+84\".concat(text.slice(1, text.length));\n      handleVerifyPhoneNumber(phoneNumber);\n    }\n\n    if (inputMode === \"OTP\") {\n      handleVerifyOtpCode(values);\n    }\n\n    if (inputMode === \"CHANGE_PASSWORD\") {\n      handleChangePassword(values);\n    }\n  };\n\n  var handleResendOtpCode = function handleResendOtpCode(values) {\n    var text = values.phoneNumber;\n    var phoneNumber = \"+84\".concat(text.slice(1, text.length));\n    var payload = {\n      phoneNumber: phoneNumber\n    };\n    dispatch(sendOtpVoice(payload));\n  };\n\n  var handleVerifyPhoneNumber = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(phoneNumber) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n\n              try {\n                payload = {\n                  phoneNumber: phoneNumber\n                };\n                dispatch(sendOtpVoice(payload));\n                setErrorMessage(\"\");\n                setLoading(false);\n                setInputMode(\"OTP\");\n              } catch (error) {\n                console.error(error);\n                setLoading(false);\n                setErrorMessage(error === null || error === void 0 ? void 0 : error.message);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleVerifyPhoneNumber(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleVerifyOtpCode = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n\n              try {\n                payload = {\n                  input: {\n                    otpCode: values.otp,\n                    phoneNumber: values.phoneNumber,\n                    permission: \"CANDIDATE\"\n                  }\n                };\n                dispatch(verifyOtpResetPassword(payload));\n                setLoading(false);\n                setInputMode(\"CHANGE_PASSWORD\");\n              } catch (error) {\n                console.error(error);\n                setLoading(false);\n                setErrorMessage(error.message);\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleVerifyOtpCode(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChangePassword = function handleChangePassword(values) {\n    setLoading(true);\n\n    if (values.newPassword === values.reNewPassword) {\n      var payload = {\n        input: {\n          otpCode: values.otp,\n          phoneNumber: values.phoneNumber,\n          permission: \"CANDIDATE\",\n          newPassword: values.newPassword\n        }\n      };\n      dispatch(resetPasswordOtpVoice(payload));\n      eventManager.addListener(\"resetPasswordSuccess\", function () {\n        redirect(PATH.LOGIN);\n      });\n      setLoading(false);\n    } else {\n      setLoading(false);\n      showNotification({\n        type: \"error\",\n        title: t(\"forgot-password.same-password-required\")\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(ForgotPasswordContainer, {\n    children: [/*#__PURE__*/_jsx(Formik, {\n      initialValues: initialValues,\n      validationSchema: formValidation[inputMode],\n      onSubmit: handleSubmit,\n      children: function children(formik) {\n        if (inputMode !== \"OTP\") {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Title, {\n              children: t(\"forgot-password.form-title\")\n            }), /*#__PURE__*/_jsxs(Form, {\n              children: [inputMode === \"PHONE_NUMBER\" && /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                label: t(\"forgot-password.phone-number\"),\n                placeholder: t(\"forgot-password.enter-phone-number\"),\n                onKeyPress: forceTextInputEnterNumber\n              }, formik.getFieldProps(\"phoneNumber\")), formik.getFieldMeta(\"phoneNumber\"))), inputMode === \"CHANGE_PASSWORD\" && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                  label: t(\"forgot-password.new-password\"),\n                  placeholder: t(\"forgot-password.enter-new-password\"),\n                  type: \"password\"\n                }, formik.getFieldProps(\"newPassword\")), formik.getFieldMeta(\"newPassword\"))), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                  label: t(\"forgot-password.re-enter-password\"),\n                  placeholder: t(\"forgot-password.re-enter-your-password\"),\n                  type: \"password\"\n                }, formik.getFieldProps(\"reNewPassword\")), formik.getFieldMeta(\"reNewPassword\")))]\n              }), /*#__PURE__*/_jsx(Button, {\n                loading: loading,\n                type: \"submit\",\n                primary: true,\n                children: t(\"forgot-password.confirm\")\n              }), errorMessage && /*#__PURE__*/_jsx(ErrorHelperText, {\n                text: errorMessage\n              })]\n            })]\n          });\n        }\n\n        if (inputMode === \"OTP\") {\n          return /*#__PURE__*/_jsx(OTPForm, {\n            title: t(\"forgot-password.form-title\"),\n            loading: loading,\n            formik: formik,\n            errorMessage: errorMessage,\n            onResendOtp: handleResendOtpCode,\n            onClose: function onClose() {\n              setInputMode(\"PHONE_NUMBER\");\n            }\n          });\n        }\n      }\n    }), /*#__PURE__*/_jsxs(Notification, {\n      children: [t(\"forgot-password.dont-have-account\"), /*#__PURE__*/_jsx(Register, {\n        routeName: PATH.REGISTER,\n        children: t(\"forgot-password.register-here\")\n      })]\n    })]\n  });\n};\n\nexport default ForgotPassword;","map":null,"metadata":{},"sourceType":"module"}