{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"next-i18next\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport EditDesiredJobForm from \"./components/Form\";\nimport { getAllCategoryLevel1, getAllCategoryLevel2 } from \"@redux/actions/category\";\nimport { updateRecord, createRecord } from \"@redux/actions/record\";\nimport { Container, DialogButton, Title, Wrapper } from \"./styles\";\n\nconst EditDesiredJob = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    benefitList,\n    benefitsWanted,\n    recordId,\n    userId,\n    allJobLevel,\n    careers,\n    level,\n    salary = \"0\",\n    workLocation\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    provinces\n  } = useSelector(state => state.location);\n  const {\n    categoryLevel2: {\n      results: categoryLevel2 = [],\n      totalCount = 0\n    },\n    categoryLevel1: {\n      results: categoryLevel1 = []\n    }\n  } = useSelector(state => state.category);\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: benefits,\n    1: setBenefits\n  } = useState(benefitList);\n  const {\n    0: allCareers,\n    1: setAllCareers\n  } = useState([]);\n  const {\n    0: page,\n    1: setPage\n  } = useState(0);\n\n  const defaultWorkLocationValue = () => {\n    return !!(workLocation !== null && workLocation !== void 0 && workLocation.name) && {\n      name: workLocation.name,\n      _id: workLocation._id,\n      code: workLocation.code\n    };\n  };\n\n  const defaultJobDesiredValue = () => {\n    return !!careers && careers.map(career => ({\n      name: career.name,\n      _id: career._id\n    }));\n  };\n\n  const defaultLevelValue = () => {\n    return !!level && {\n      name: level,\n      _id: level\n    };\n  };\n\n  const initialValues = {\n    workLocation: defaultWorkLocationValue(),\n    jobDesired: defaultJobDesiredValue(),\n    levelDesired: defaultLevelValue(),\n    salaryDesired: !!salary ? Number(salary) : \"\"\n  };\n  const validationSchema = Yup.object({\n    workLocation: Yup.object().required(t(\"personal-info.desired-job.work-location-validation\")).nullable(),\n    levelDesired: Yup.object().required(t(\"personal-info.desired-job.desired-level-validation\")).nullable(),\n    salaryDesired: Yup.number().required(t(\"personal-info.desired-job.salary-validation\"))\n  });\n  useEffect(() => {\n    if ((allCareers === null || allCareers === void 0 ? void 0 : allCareers.length) < totalCount) {\n      const newPage = page + 1;\n      setPage(newPage);\n      getAllCategoryLv2API(newPage);\n    }\n  }, [allCareers]);\n  useEffect(() => {\n    if ((categoryLevel2 === null || categoryLevel2 === void 0 ? void 0 : categoryLevel2.length) > 0) {\n      setAllCareers([...allCareers, ...categoryLevel2]);\n    }\n  }, [categoryLevel2]);\n  useEffect(() => {\n    dispatch(getAllCategoryLevel1({}));\n    getAllCategoryLv2API(0);\n  }, []);\n  useEffect(() => {\n    setBenefits(benefitList);\n  }, [benefitList]);\n  useEffect(() => {\n    if (!!benefits && benefits.length > 0 && !!benefitsWanted && !!open) {\n      setBenefits(state => {\n        let newState = [...state];\n        benefitsWanted === null || benefitsWanted === void 0 ? void 0 : benefitsWanted.forEach(benefitWanted => {\n          var _state$index, _state$index2, _state$index3, _state$index4;\n\n          const index = state.findIndex(benefit => benefit._id === benefitWanted._id);\n          newState[index] = {\n            _id: (_state$index = state[index]) === null || _state$index === void 0 ? void 0 : _state$index._id,\n            description: (_state$index2 = state[index]) === null || _state$index2 === void 0 ? void 0 : _state$index2.description,\n            enabled: true,\n            icon: (_state$index3 = state[index]) === null || _state$index3 === void 0 ? void 0 : _state$index3.icon,\n            name: (_state$index4 = state[index]) === null || _state$index4 === void 0 ? void 0 : _state$index4.name\n          };\n        });\n        return newState;\n      });\n    }\n  }, [open, benefitsWanted]);\n\n  const getAllCategoryLv2API = page => {\n    dispatch(getAllCategoryLevel2({\n      page,\n      size: 50\n    }));\n  };\n\n  const onSelected = (type, formik) => value => {\n    return formik.setFieldValue(type, value);\n  };\n\n  const handleSubmit = values => {\n    const benefitsWanted = benefits.filter(benefit => benefit.enabled === true).map(benefit => benefit._id);\n    const career = values.jobDesired.map(item => item._id);\n\n    if (!recordId && !!userId) {\n      var _values$workLocation, _values$levelDesired;\n\n      const payload = {\n        recordCreateInput: {\n          user: userId,\n          benefitsWanted,\n          career,\n          workPlace: (_values$workLocation = values.workLocation) === null || _values$workLocation === void 0 ? void 0 : _values$workLocation._id,\n          salaryWanted: values.salaryDesired,\n          jobLevelWanted: (_values$levelDesired = values.levelDesired) === null || _values$levelDesired === void 0 ? void 0 : _values$levelDesired.name\n        }\n      };\n      dispatch(createRecord(payload));\n    }\n\n    if (!!recordId && !!userId) {\n      var _values$workLocation2, _values$levelDesired2;\n\n      const payload = {\n        id: recordId,\n        recordUpdateInput: {\n          benefitsWanted,\n          career,\n          workPlace: (_values$workLocation2 = values.workLocation) === null || _values$workLocation2 === void 0 ? void 0 : _values$workLocation2._id,\n          salaryWanted: values.salaryDesired,\n          jobLevelWanted: (_values$levelDesired2 = values.levelDesired) === null || _values$levelDesired2 === void 0 ? void 0 : _values$levelDesired2.name\n        }\n      };\n      dispatch(updateRecord(payload));\n    }\n\n    setOpen(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  const handleSelectBenefits = id => {\n    setBenefits(state => {\n      const index = state.findIndex(benefit => benefit._id === id);\n      let newState = [...state];\n      const enabledList = newState.filter(benefit => benefit.enabled === true);\n\n      if (enabledList.length < 5 || newState[index].enabled === true) {\n        newState[index] = {\n          _id: newState[index]._id,\n          description: newState[index].description,\n          enabled: !newState[index].enabled,\n          icon: newState[index].icon,\n          name: newState[index].name\n        };\n      }\n\n      return newState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.desired-job.edit-desired-job\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          onSubmit: handleSubmit,\n          validationSchema: validationSchema,\n          children: formik => /*#__PURE__*/_jsx(EditDesiredJobForm, {\n            allJobLevel: allJobLevel,\n            benefits: benefits,\n            categoryLevel1: categoryLevel1,\n            categoryLevel2: allCareers,\n            formik: formik,\n            handleCloseDialog: handleCloseDialog,\n            handleSelectBenefits: handleSelectBenefits,\n            initialValues: initialValues,\n            isLoading: isLoading,\n            onSelected: onSelected,\n            provinces: provinces\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditDesiredJob;","map":null,"metadata":{},"sourceType":"module"}