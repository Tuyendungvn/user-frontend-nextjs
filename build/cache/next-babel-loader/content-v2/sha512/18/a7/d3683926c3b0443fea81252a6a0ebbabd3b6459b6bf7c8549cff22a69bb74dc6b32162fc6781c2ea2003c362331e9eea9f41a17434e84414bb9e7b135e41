{"ast":null,"code":"import _regeneratorRuntime from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getNotifications),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(setSeenForNotify),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getNotificationsSetting),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(getNotificationsSettingByUser),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(createNotifySetting),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(createNotify);\n\nimport { call, put } from \"@redux-saga/core/effects\";\nimport * as services from \"@services/notification\";\nimport { getNotificationsByUserSuccess, getNotificationsSettingSuccess, getNotificationsSettingByUserSuccess } from \"@redux/actions/notification\";\nimport { actionSuccess } from \"@redux/actions/common\";\nexport function getNotifications(payload) {\n  var variables, response, _ref, results;\n\n  return _regeneratorRuntime.wrap(function getNotifications$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          variables = payload.payload;\n          _context.next = 3;\n          return call(services.getNotificationByUser, variables);\n\n        case 3:\n          response = _context.sent;\n          _ref = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref.getNotifyByUser;\n\n          if (!results) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return put(getNotificationsByUserSuccess(results));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function setSeenForNotify(payload) {\n  var variables, response, _ref2, results;\n\n  return _regeneratorRuntime.wrap(function setSeenForNotify$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          variables = payload.payload;\n          _context2.next = 3;\n          return call(services.setSeenForNotify, variables);\n\n        case 3:\n          response = _context2.sent;\n          _ref2 = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref2.setSeenForNotify;\n\n          if (results) {}\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function getNotificationsSetting(payload) {\n  var variables, response, _ref3, results;\n\n  return _regeneratorRuntime.wrap(function getNotificationsSetting$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          variables = payload.payload;\n          _context3.next = 3;\n          return call(services.getNotificationSetting, variables);\n\n        case 3:\n          response = _context3.sent;\n          _ref3 = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref3.getAllNotifySetting;\n\n          if (!results) {\n            _context3.next = 8;\n            break;\n          }\n\n          _context3.next = 8;\n          return put(getNotificationsSettingSuccess(results));\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function getNotificationsSettingByUser(payload) {\n  var variables, response, _ref4, results;\n\n  return _regeneratorRuntime.wrap(function getNotificationsSettingByUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          variables = payload.payload;\n          _context4.next = 3;\n          return call(services.getNotifySettingByUser, variables);\n\n        case 3:\n          response = _context4.sent;\n          _ref4 = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref4.getNotifySettingByUser;\n\n          if (!results) {\n            _context4.next = 8;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(getNotificationsSettingByUserSuccess(results));\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function createNotifySetting(payload) {\n  var variables, response, _ref5, results;\n\n  return _regeneratorRuntime.wrap(function createNotifySetting$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          variables = payload.payload;\n          _context5.next = 3;\n          return call(services.createNotifySetting, variables);\n\n        case 3:\n          response = _context5.sent;\n          _ref5 = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref5.createNotifySetting;\n\n          if (!results) {\n            _context5.next = 8;\n            break;\n          }\n\n          _context5.next = 8;\n          return put(actionSuccess());\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function createNotify(payload) {\n  var variables, response, _ref6, results;\n\n  return _regeneratorRuntime.wrap(function createNotify$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          variables = payload.payload;\n          _context6.next = 3;\n          return call(services.createNotify, variables);\n\n        case 3:\n          response = _context6.sent;\n          _ref6 = (response === null || response === void 0 ? void 0 : response.data) || {}, results = _ref6.createNotify;\n\n          if (!results) {\n            _context6.next = 8;\n            break;\n          }\n\n          _context6.next = 8;\n          return put(actionSuccess());\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":null,"metadata":{},"sourceType":"module"}