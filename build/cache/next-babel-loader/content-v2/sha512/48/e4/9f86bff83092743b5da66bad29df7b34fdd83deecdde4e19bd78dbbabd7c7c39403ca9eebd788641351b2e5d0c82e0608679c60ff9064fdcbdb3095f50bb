{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { i18n } from \"next-i18next\";\nimport { paths } from \"@routes/index\";\nimport path from \"path\";\nexport var useRedirect = function useRedirect() {\n  var router = useRouter();\n  var currentLanguage = i18n.language;\n  var redirect = useCallback(function (routeName) {\n    var _currentPath$locale;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var options = arguments.length > 3 ? arguments[3] : undefined;\n    var locale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    var shallow = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    var currentPath = paths.find(function (item) {\n      return item.name === routeName;\n    });\n    if (!locale) locale = currentLanguage;\n\n    if (!currentPath) {\n      console.error(\"[Link Error] Don't find any route which has name is \\\"\".concat(routeName, \"\\\"\"));\n    }\n\n    var href = path.join(\"/\".concat(currentPath === null || currentPath === void 0 ? void 0 : (_currentPath$locale = currentPath.locale) === null || _currentPath$locale === void 0 ? void 0 : _currentPath$locale[locale]));\n\n    if (Object.keys(params).length) {\n      for (var key in params) {\n        var value = params[key];\n        href = href.replace(\"/:\".concat(key), \"/\".concat(value));\n      }\n    }\n\n    href = href.replace(/(\\/:)\\w+/g, \"/-\");\n\n    if (Object.keys(query).length) {\n      var queryString = renderQueryStringFromObject(query);\n      href += \"?\".concat(queryString);\n    }\n\n    if (options !== null && options !== void 0 && options.useRefresh) {\n      var aTag = document.createElement(\"a\");\n      aTag.href = href;\n      aTag.click();\n      return;\n    }\n\n    router.push(href, undefined, {\n      shallow: shallow\n    });\n  }, []);\n  return redirect;\n};\n\nvar renderQueryStringFromObject = function renderQueryStringFromObject(query) {\n  var _URLSearchParams;\n\n  return (_URLSearchParams = new URLSearchParams(query)) === null || _URLSearchParams === void 0 ? void 0 : _URLSearchParams.toString();\n};","map":null,"metadata":{},"sourceType":"module"}