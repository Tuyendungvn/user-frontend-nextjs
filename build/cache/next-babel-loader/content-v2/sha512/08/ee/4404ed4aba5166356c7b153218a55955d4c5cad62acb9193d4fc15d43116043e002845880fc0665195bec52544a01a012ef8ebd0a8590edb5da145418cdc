{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"next-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nimport Dialog from \"@components/Dialog\";\nimport Button from \"@designs/Button\";\nimport Input from \"@designs/Input\";\nimport TextArea from \"@designs/TextArea\";\nimport Select from \"@designs/MultiSelect\";\nimport { updateRecord } from \"@redux/actions/record\";\nimport { ButtonWrapper, Container, DialogButton, Title, Wrapper, Form, DateWrapper } from \"../AddEducationDialog/styles\";\nimport { degreeList } from \"../AddEducationDialog/data\";\n\nvar EditEducationDialog = function EditEducationDialog(props) {\n  var _useTranslation = useTranslation([\"job-management\", \"common\"]),\n      t = _useTranslation.t;\n\n  var ButtonMenu = props.ButtonMenu,\n      className = props.className,\n      educationList = props.educationList,\n      userId = props.userId,\n      recordId = props.recordId,\n      schoolName = props.schoolName,\n      degree = props.degree,\n      major = props.major,\n      timeStart = props.timeStart,\n      timeEnd = props.timeEnd,\n      description = props.description,\n      index = props.index;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.actions;\n  }),\n      isLoading = _useSelector.isLoading;\n\n  var defaultDegreeValue = function defaultDegreeValue() {\n    return degreeList.find(function (item) {\n      return item.name === degree;\n    });\n  };\n\n  var _useState2 = useState(defaultDegreeValue()),\n      degreeSelected = _useState2[0],\n      setDegreeSelected = _useState2[1];\n\n  var initialValues = {\n    major: major || \"\",\n    degree: defaultDegreeValue(),\n    school: schoolName || \"\",\n    begin: !!timeStart && moment(timeStart).format(\"YYYY-MM-DD\") || \"\",\n    to: !!timeEnd && moment(timeEnd).format(\"YYYY-MM-DD\") || \"\",\n    describeLearningProcess: description || \"\"\n  };\n  var validationSchema = Yup.object({\n    major: Yup.string().required(t(\"personal-info.education.major-validation\")),\n    degree: Yup.object().required(t(\"personal-info.education.degree-validation\")).nullable(),\n    school: Yup.string().required(t(\"personal-info.education.school-validation\"))\n  });\n\n  var onDegreeSelected = function onDegreeSelected(type, formik) {\n    return function (value) {\n      return formik.setFieldValue(type, value);\n    };\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    if (!!recordId && !!userId) {\n      var clearFieldEducationList = educationList.map(function (education) {\n        return {\n          schoolName: education.schoolName,\n          degree: education.degree,\n          major: education.major,\n          timeStart: education.timeStart,\n          timeEnd: education.timeEnd,\n          description: education.description\n        };\n      });\n\n      var education = _toConsumableArray(clearFieldEducationList);\n\n      education[index] = {\n        schoolName: values.school,\n        degree: degreeSelected.name,\n        major: values.major,\n        timeStart: values.begin,\n        timeEnd: values.to,\n        description: values.describeLearningProcess\n      };\n      var payload = {\n        id: recordId,\n        recordUpdateInput: {\n          education: education\n        }\n      };\n      dispatch(updateRecord(payload));\n      setOpen(false);\n    }\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpen(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.education.edit-education\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          onSubmit: handleSubmit,\n          validationSchema: validationSchema,\n          children: function children(formik) {\n            return /*#__PURE__*/_jsxs(Form, {\n              children: [/*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                label: t(\"personal-info.education.major\"),\n                placeholder: t(\"personal-info.education.major-placeholder\"),\n                type: \"text\",\n                required: true\n              }, formik.getFieldProps(\"major\")), formik.getFieldMeta(\"major\"))), /*#__PURE__*/_jsx(Select, {\n                label: t(\"personal-info.education.degree\"),\n                options: degreeList,\n                placeholder: t(\"personal-info.education.degree-placeholder\"),\n                defaultValue: degreeSelected,\n                required: true,\n                onChangeSelect: function onChangeSelect(option) {\n                  setDegreeSelected(option);\n                }\n              }), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                label: t(\"personal-info.education.school\"),\n                placeholder: t(\"personal-info.education.school-placeholder\"),\n                type: \"text\",\n                required: true\n              }, formik.getFieldProps(\"school\")), formik.getFieldMeta(\"school\"))), /*#__PURE__*/_jsxs(DateWrapper, {\n                children: [/*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                  label: t(\"personal-info.education.begin\"),\n                  placeholder: t(\"personal-info.education.date-placeholder\"),\n                  className: \"w-full\",\n                  type: \"date\"\n                }, formik.getFieldProps(\"begin\")), formik.getFieldMeta(\"begin\"))), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n                  label: t(\"personal-info.education.to\"),\n                  placeholder: t(\"personal-info.education.date-placeholder\"),\n                  className: \"w-full\",\n                  type: \"date\"\n                }, formik.getFieldProps(\"to\")), formik.getFieldMeta(\"to\")))]\n              }), /*#__PURE__*/_jsx(TextArea, _objectSpread(_objectSpread({\n                label: t(\"personal-info.education.describe-learning-process\"),\n                placeholder: t(\"personal-info.education.describe-learning-process-placeholder\"),\n                type: \"text\",\n                rows: 5\n              }, formik.getFieldProps(\"describeLearningProcess\")), formik.getFieldMeta(\"describeLearningProcess\"))), /*#__PURE__*/_jsxs(ButtonWrapper, {\n                children: [/*#__PURE__*/_jsx(Button, {\n                  type: \"button\",\n                  onClick: handleCloseDialog,\n                  className: \"w-1/2 border border-solid border-primary\",\n                  children: t(\"common:dialog.cancel\")\n                }), /*#__PURE__*/_jsx(Button, {\n                  loading: isLoading,\n                  primary: true,\n                  type: \"submit\",\n                  className: \"w-1/2\",\n                  children: !isLoading && t(\"common:dialog.save\")\n                })]\n              })]\n            });\n          }\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditEducationDialog;","map":null,"metadata":{},"sourceType":"module"}