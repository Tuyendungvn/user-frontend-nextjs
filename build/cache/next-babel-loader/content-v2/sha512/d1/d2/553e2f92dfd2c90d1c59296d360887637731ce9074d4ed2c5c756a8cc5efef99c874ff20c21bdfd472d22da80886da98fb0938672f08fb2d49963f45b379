{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/data/source/tuyendungvn-user-frontend-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Select, { components } from \"react-select\";\nimport { SVG } from \"@designs/SVG\";\nimport { customStyles, Container, SelectWrapper, Label, Required, Error, LimitSelected } from \"./styles\";\n\nvar MultiSelect = function MultiSelect(props) {\n  var label = props.label,\n      touched = props.touched,\n      required = props.required,\n      error = props.error,\n      onChangeSelect = props.onChangeSelect,\n      options = props.options,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? \"\" : _props$placeholder,\n      id = props.id,\n      instanceId = props.instanceId,\n      isMulti = props.isMulti,\n      initValue = props.initValue,\n      defaultValue = props.defaultValue,\n      onBlurInput = props.onBlurInput,\n      _props$optionLabel = props.optionLabel,\n      optionLabel = _props$optionLabel === void 0 ? \"name\" : _props$optionLabel,\n      _props$optionValue = props.optionValue,\n      optionValue = _props$optionValue === void 0 ? \"_id\" : _props$optionValue,\n      limit = props.limit,\n      _props$limitText = props.limitText,\n      limitText = _props$limitText === void 0 ? \"\" : _props$limitText,\n      restProps = _objectWithoutProperties(props, [\"label\", \"touched\", \"required\", \"error\", \"onChangeSelect\", \"options\", \"placeholder\", \"id\", \"instanceId\", \"isMulti\", \"initValue\", \"defaultValue\", \"onBlurInput\", \"optionLabel\", \"optionValue\", \"limit\", \"limitText\"]);\n\n  var _useState = useState(false),\n      isError = _useState[0],\n      setIsError = _useState[1];\n\n  useEffect(function () {\n    if (touched && error) {\n      !isError && setIsError(true);\n    } else {\n      isError && setIsError(false);\n    }\n  }, [touched, error]);\n\n  var handleChange = function handleChange(value) {\n    onChangeSelect && onChangeSelect(value);\n  };\n\n  var Menu = function Menu(props) {\n    var optionSelectedLength = props.getValue().length || 0;\n\n    if (limit) {\n      return /*#__PURE__*/_jsx(components.Menu, _objectSpread(_objectSpread({}, props), {}, {\n        children: optionSelectedLength < limit ? props.children : /*#__PURE__*/_jsx(LimitSelected, {\n          children: limitText\n        })\n      }));\n    }\n\n    return /*#__PURE__*/_jsx(components.Menu, _objectSpread(_objectSpread({}, props), {}, {\n      children: props.children\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [label ? /*#__PURE__*/_jsxs(Label, {\n      children: [label, required && /*#__PURE__*/_jsx(Required, {\n        children: \"(*)\"\n      })]\n    }) : null, /*#__PURE__*/_jsx(SelectWrapper, {\n      children: /*#__PURE__*/_jsx(Select, _objectSpread({\n        error: isError,\n        styles: customStyles,\n        id: id,\n        instanceId: instanceId,\n        options: options,\n        placeholder: placeholder,\n        isMulti: isMulti,\n        onChange: handleChange,\n        value: initValue,\n        defaultValue: defaultValue,\n        components: {\n          Menu: Menu\n        },\n        getOptionLabel: function getOptionLabel(x) {\n          return x[optionLabel];\n        },\n        getOptionValue: function getOptionValue(x) {\n          return x[optionValue];\n        }\n      }, restProps))\n    }), error && touched && /*#__PURE__*/_jsxs(Error, {\n      children: [/*#__PURE__*/_jsx(SVG, {\n        name: \"common/error\",\n        width: 16,\n        height: 16,\n        className: \"mr-0.5 inline-block\"\n      }), error]\n    })]\n  });\n};\n\nexport default MultiSelect;","map":null,"metadata":{},"sourceType":"module"}