{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"next-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport moment from \"moment\";\nimport * as Yup from \"yup\";\nimport Dialog from \"@components/Dialog\";\nimport { isEmail, regexPhoneNumber } from \"@constants/validate\";\nimport { getDistricts, getWards } from \"@redux/actions/location\";\nimport { updateUserProfile } from \"@redux/actions/user\";\nimport EditSingleForm from \"./components/Form\";\nimport { Container, DialogButton, Title, Wrapper } from \"./styles\";\n\nvar EditSingleDialog = function EditSingleDialog(props) {\n  var _useTranslation = useTranslation([\"job-management\", \"common\"]),\n      t = _useTranslation.t;\n\n  var ButtonMenu = props.ButtonMenu,\n      className = props.className,\n      address = props.address,\n      dateOfBirth = props.dateOfBirth,\n      district = props.district,\n      email = props.email,\n      gender = props.gender,\n      idCard = props.idCard,\n      phoneNumber = props.phoneNumber,\n      province = props.province,\n      ward = props.ward,\n      userId = props.userId;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1]; // When provinceCode change -> dispatch(getDistricts(provinceCode))\n\n\n  var _useState2 = useState(\"\"),\n      provinceCode = _useState2[0],\n      setProvinceCode = _useState2[1]; // When districtCode change -> dispatch(getWards(districtCode))\n\n\n  var _useState3 = useState(\"\"),\n      districtCode = _useState3[0],\n      setDistrictCode = _useState3[1]; // Provinces, districts, wards for options select (dropdown select)\n\n\n  var _useSelector = useSelector(function (state) {\n    return state.location;\n  }),\n      provinces = _useSelector.provinces,\n      districts = _useSelector.districts,\n      wards = _useSelector.wards;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.actions;\n  }),\n      isLoading = _useSelector2.isLoading;\n\n  useEffect(function () {\n    if (provinceCode !== \"\") {\n      var payload = {\n        provinceCode: provinceCode\n      };\n      dispatch(getDistricts(payload));\n    }\n  }, [provinceCode]);\n  useEffect(function () {\n    if (districtCode !== \"\") {\n      var payload = {\n        districtCode: districtCode\n      };\n      dispatch(getWards(payload));\n    }\n  }, [districtCode]); // Gender options select with i18next (english, vietnamese)\n\n  var genderOptions = [{\n    name: t(\"common:gender.male\"),\n    _id: \"male\"\n  }, {\n    name: t(\"common:gender.female\"),\n    _id: \"female\"\n  }];\n\n  var defaultGenderValue = function defaultGenderValue() {\n    if (gender === \"male\") {\n      return {\n        name: t(\"common:gender.male\"),\n        _id: \"male\"\n      };\n    }\n\n    if (gender === \"female\") {\n      return {\n        name: t(\"common:gender.female\"),\n        _id: \"female\"\n      };\n    }\n\n    return;\n  };\n\n  var defaultDateOfBirthValue = function defaultDateOfBirthValue() {\n    return !!dateOfBirth && moment(dateOfBirth).format(\"YYYY-MM-DD\");\n  };\n\n  var defaultProvinceValue = function defaultProvinceValue() {\n    return !!(province !== null && province !== void 0 && province.name) && {\n      name: province.name,\n      _id: province._id,\n      code: province.code\n    };\n  };\n\n  var defaultWardValue = function defaultWardValue() {\n    return !!(ward !== null && ward !== void 0 && ward.name) && {\n      name: ward.name,\n      _id: ward._id,\n      code: ward.code\n    };\n  };\n\n  var defaultDistrictValue = function defaultDistrictValue() {\n    return !!(district !== null && district !== void 0 && district.name) && {\n      name: district === null || district === void 0 ? void 0 : district.name,\n      _id: district === null || district === void 0 ? void 0 : district._id,\n      code: district === null || district === void 0 ? void 0 : district.code\n    };\n  };\n\n  var initialValues = {\n    email: email,\n    phoneNumber: phoneNumber,\n    idCard: idCard,\n    dateOfBirth: defaultDateOfBirthValue(),\n    gender: defaultGenderValue(),\n    province: defaultProvinceValue(),\n    district: defaultDistrictValue(),\n    ward: defaultWardValue(),\n    address: address === null || address === void 0 ? void 0 : address.name\n  };\n  var validationSchema = Yup.object({\n    phoneNumber: Yup.string().required(t(\"personal-info.single.phone-number-validation\")).matches(regexPhoneNumber, t(\"personal-info.single.phone-number-validation2\")).length(10, t(\"personal-info.single.phone-number-validation2\")),\n    email: Yup.string().required(t(\"personal-info.single.email-empty\")).test(\"Email\", t(\"personal-info.single.email-inValid\"), function (values) {\n      return isEmail(values);\n    }),\n    gender: Yup.object().required(t(\"personal-info.single.gender-empty\")),\n    province: Yup.object().nullable().required(t(\"personal-info.single.province-empty\")),\n    dateOfBirth: Yup.string().required(t(\"personal-info.single.gender-empty\"))\n  });\n\n  var handleSubmit = function handleSubmit(values) {\n    var _values$gender, _values$district, _values$province, _values$ward;\n\n    var updateUserPayload = {\n      updateUserInput: {\n        email: values.email,\n        phoneNumber: values.phoneNumber.toString(),\n        identityCard: values.idCard.toString(),\n        birthday: values === null || values === void 0 ? void 0 : values.dateOfBirth,\n        gender: values === null || values === void 0 ? void 0 : (_values$gender = values.gender) === null || _values$gender === void 0 ? void 0 : _values$gender._id,\n        locationTypeInput: {\n          districtCode: values === null || values === void 0 ? void 0 : (_values$district = values.district) === null || _values$district === void 0 ? void 0 : _values$district.code,\n          provinceCode: values === null || values === void 0 ? void 0 : (_values$province = values.province) === null || _values$province === void 0 ? void 0 : _values$province.code,\n          streetName: values === null || values === void 0 ? void 0 : values.address,\n          wardCode: values === null || values === void 0 ? void 0 : (_values$ward = values.ward) === null || _values$ward === void 0 ? void 0 : _values$ward.code\n        }\n      }\n    };\n    handleConfirm(updateUserPayload);\n  };\n\n  var handleConfirm = function handleConfirm(updateUserPayload) {\n    dispatch(updateUserProfile(updateUserPayload));\n    handleCloseDialog();\n  };\n\n  var onSelected = function onSelected(type, formik) {\n    return function (value) {\n      if (type === \"province\") {\n        setProvinceCode(value.code);\n      }\n\n      if (type === \"district\") {\n        setDistrictCode(value.code);\n      }\n\n      return formik.setFieldValue(type, value);\n    };\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpen(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: t(\"personal-info.single.edit-personal-info\")\n        }), /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          validationSchema: validationSchema,\n          onSubmit: handleSubmit,\n          children: function children(formik) {\n            return /*#__PURE__*/_jsx(EditSingleForm, {\n              districts: districts,\n              formik: formik,\n              genderOptions: genderOptions,\n              handleClose: handleCloseDialog,\n              initialValues: initialValues,\n              isLoading: isLoading,\n              onSelected: onSelected,\n              provinces: provinces,\n              wards: wards\n            });\n          }\n        })]\n      })\n    })]\n  });\n};\n\nexport default EditSingleDialog;","map":null,"metadata":{},"sourceType":"module"}