{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useTranslation } from \"next-i18next\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Dialog from \"@components/Dialog\";\nimport Button from \"@designs/Button\";\nimport Spinner from \"@designs/icons/Spinner\";\nimport { SVG } from \"@designs/SVG\";\nimport { updateRecord, createRecord } from \"@redux/actions/record\";\nimport { setLoading } from \"@redux/actions/common\";\nimport { Container, DialogButton, Wrapper, Content, Text, Title, ButtonText, CVDescription, Input } from \"./styles\";\n\nconst AddCVDialog = props => {\n  const {\n    t\n  } = useTranslation([\"job-management\", \"common\"]);\n  const {\n    ButtonMenu,\n    className,\n    acceptedFiles,\n    getInputProps,\n    getRootProps,\n    recordId,\n    userId\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    isLoading\n  } = useSelector(state => state.actions);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: urlCV,\n    1: setURLCV\n  } = useState(null);\n  const {\n    0: fileNameCV,\n    1: setFileNameCV\n  } = useState(\"\");\n  useEffect(() => {\n    var _acceptedFiles$;\n\n    setURLCV(acceptedFiles[0]);\n    setFileNameCV((_acceptedFiles$ = acceptedFiles[0]) === null || _acceptedFiles$ === void 0 ? void 0 : _acceptedFiles$.name);\n  }, [acceptedFiles]);\n  useEffect(() => {\n    if (!!urlCV && !!userId && fileNameCV !== \"\") {\n      if (!recordId) {\n        const payload = {\n          recordCreateInput: {\n            user: userId,\n            urlCV,\n            fileNameCV\n          }\n        };\n        handleCreate(payload);\n      }\n\n      if (!!recordId) {\n        const payload = {\n          id: recordId,\n          recordUpdateInput: {\n            fileNameCV,\n            urlCV\n          }\n        };\n        handleUpdate(payload);\n      }\n    }\n  }, [fileNameCV]);\n\n  const handleCreate = payload => {\n    dispatch(setLoading(true));\n\n    try {\n      dispatch(createRecord(payload));\n    } catch (err) {}\n  };\n\n  const handleUpdate = payload => {\n    dispatch(updateRecord(payload));\n    setOpen(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpen(true);\n  };\n\n  const files = acceptedFiles.map(file => /*#__PURE__*/_jsx(CVDescription, {\n    children: file.path\n  }, file.path));\n  return /*#__PURE__*/_jsxs(Container, {\n    className: className,\n    children: [/*#__PURE__*/_jsx(DialogButton, {\n      onClick: handleOpenDialog,\n      children: ButtonMenu\n    }), /*#__PURE__*/_jsx(Dialog, {\n      isOpen: open,\n      onClose: handleCloseDialog,\n      className: \"z-50 rounded-none w-max\",\n      children: /*#__PURE__*/_jsxs(Wrapper, _objectSpread(_objectSpread({}, getRootProps({\n        className: \"dropzone\"\n      })), {}, {\n        children: [/*#__PURE__*/_jsx(Input, _objectSpread({}, getInputProps())), /*#__PURE__*/_jsxs(Content, {\n          children: [isLoading && /*#__PURE__*/_jsx(Spinner, {\n            className: \"text-black\"\n          }), !isLoading && /*#__PURE__*/_jsx(SVG, {\n            name: \"job-management/folder-add-icon\"\n          }), /*#__PURE__*/_jsx(Title, {\n            children: t(\"personal-info.cv.drag-and-drop\")\n          }), acceptedFiles.length > 0 ? files : /*#__PURE__*/_jsx(Button, {\n            className: \"w-full border border-solid phone:w-1/2 border-primary\",\n            children: /*#__PURE__*/_jsx(ButtonText, {\n              children: t(\"personal-info.cv.choose-cv\")\n            })\n          }), /*#__PURE__*/_jsx(Text, {\n            children: t(\"personal-info.cv.cv-note\")\n          })]\n        })]\n      }))\n    })]\n  });\n};\n\nexport default AddCVDialog;","map":null,"metadata":{},"sourceType":"module"}